{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"babel-runtime/helpers/createClass\"","webpack:///external \"babel-runtime/helpers/classCallCheck\"","webpack:///external \"babel-runtime/core-js/json/stringify\"","webpack:///external \"babel-runtime/regenerator\"","webpack:///external \"babel-runtime/core-js/get-iterator\"","webpack:///external \"babel-runtime/helpers/asyncToGenerator\"","webpack:///external \"axios\"","webpack:///external \"crypto-js\"","webpack:///external \"bignumber.js\"","webpack:///external \"babel-runtime/core-js/object/get-prototype-of\"","webpack:///external \"babel-runtime/helpers/possibleConstructorReturn\"","webpack:///external \"babel-runtime/helpers/inherits\"","webpack:///external \"babel-runtime/core-js/map\"","webpack:///external \"elliptic\"","webpack:///external \"bip39\"","webpack:///external \"base64-url\"","webpack:///external \"sm.js\"","webpack:///external \"crypto\"","webpack:///external \"babel-runtime/helpers/extends\"","webpack:///external \"base-58\"","webpack:///external \"long\"","webpack:///external \"babel-runtime/helpers/get\"","webpack:///external \"babel-runtime/core-js/promise\"","webpack:///external \"js-sha3\"","webpack:///./src/html5-websocket/index.js","webpack:///external \"secure-random\"","webpack:///external \"babel-runtime/core-js/object/keys\"","webpack:///external \"babel-runtime/core-js/object/assign\"","webpack:///external \"babel-runtime/helpers/typeof\"","webpack:///external \"babel-runtime/helpers/defineProperty\"","webpack:///./src/hdkey-secp256r1/hdkey.js","webpack:///external \"wif\"","webpack:///external \"pkcs7\"","webpack:///external \"safe-buffer\"","webpack:///external \"babel-runtime/core-js/array/from\"","webpack:///external \"babel-runtime/core-js/number/is-safe-integer\"","webpack:///external \"scrypt-async\"","webpack:///external \"milagro-crypto-js\"","webpack:///external \"babel-runtime/helpers/toConsumableArray\"","webpack:///external \"websocket-as-promised\"","webpack:///external \"babel-runtime/helpers/objectWithoutProperties\"","webpack:///external \"uuid\"","webpack:///external \"assert\"","webpack:///external \"coinstring\"","webpack:///./src/hdkey-secp256r1/secp256r1.js","webpack:///external \"create-hash\"","webpack:///external \"bn.js\"","webpack:///./src/html5-websocket/src/websocket.js","webpack:///external \"ws\"","webpack:///./src/error.ts","webpack:///./src/transaction/opcode.ts","webpack:///./src/consts.ts","webpack:///./src/utils.ts","webpack:///./src/common/bigInt.ts","webpack:///./src/crypto/SignatureScheme.ts","webpack:///./src/crypto/KeyType.ts","webpack:///./src/crypto/CurveLabel.ts","webpack:///./src/crypto/Key.ts","webpack:///./src/crypto/PublicKey.ts","webpack:///./src/transaction/program.ts","webpack:///./src/crypto/address.ts","webpack:///./src/scrypt.ts","webpack:///./src/crypto/Signature.ts","webpack:///./src/crypto/PrivateKey.ts","webpack:///./src/crypto/PrivateKeyFactory.ts","webpack:///./src/smartcontract/abi/parameter.ts","webpack:///./src/crypto/AnonymousCredential.ts","webpack:///./src/crypto/Ecies.ts","webpack:///./src/common/fixed64.ts","webpack:///./src/smartcontract/abi/abiFunction.ts","webpack:///./src/transaction/payload/deployCode.ts","webpack:///./src/transaction/payload/invokeCode.ts","webpack:///./src/common/int128.ts","webpack:///./src/smartcontract/abi/struct.ts","webpack:///./src/transaction/scriptBuilder.ts","webpack:///./src/transaction/txAttribute.ts","webpack:///./src/transaction/transaction.ts","webpack:///./src/transaction/txSignature.ts","webpack:///./src/transaction/transfer.ts","webpack:///./src/transaction/transactionUtils.ts","webpack:///./src/smartcontract/abi/nativeVmParamsBuilder.ts","webpack:///./src/smartcontract/nativevm/tstAssetTxBuilder.ts","webpack:///./src/smartcontract/nativevm/tstidContractTxBuilder.ts","webpack:///./src/transaction/transactionBuilder.ts","webpack:///./src/account.ts","webpack:///./src/network/rest/urlConsts.ts","webpack:///./src/network/rest/restClient.ts","webpack:///./src/network/websocket/deferred.ts","webpack:///./src/network/websocket/websocketBuilder.ts","webpack:///./src/network/websocket/websocketSender.ts","webpack:///./src/network/websocket/websocketClient.ts","webpack:///./src/smartcontract/abi/abiInfo.ts","webpack:///./src/smartcontract/neovm/attestClaimTxBuilder.ts","webpack:///./src/smartcontract/data/attestClaim.ts","webpack:///./src/claim/attestNotifyEvent.ts","webpack:///./src/claim/claim.ts","webpack:///./src/transaction/ddo.ts","webpack:///./src/claim/message.ts","webpack:///./src/identity.ts","webpack:///./src/neocore/TransactionNeo.ts","webpack:///./src/neocore/InvocationTransaction.ts","webpack:///./src/neocore/NeoRpc.ts","webpack:///./src/neocore/Program.ts","webpack:///./src/neocore/SmartContract.ts","webpack:///./src/neocore/TransactionInput.ts","webpack:///./src/neocore/TransactionOutput.ts","webpack:///./src/network/rpc/rpcClient.ts","webpack:///./src/smartcontract/neovm/oep8TxBuilder.ts","webpack:///./src/twallet.ts","webpack:///./src/smartcontract/neovm/oep4TxBuilder.ts","webpack:///./src/sdk/index.ts","webpack:///./src/smartcontract/nativevm/governanceContractTxBuilder.ts","webpack:///./src/smartcontract/nativevm/token.ts","webpack:///./src/smartcontract/neovm/oep5TxBuilder.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","WebSocket","assert","Buffer","crypto","cs","secp256r1","MASTER_SECRET","from","LEN","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","serialize","hdkey","version","buffer","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","createHash","update","digest","_identifier","identifier","set","equal","length","privateKeyVerify","publicKeyCreate","publicKey","slice","readUInt32BE","publicKeyVerify","publicKeyConvert","encode","concat","alloc","privateKey","derive","path","split","forEach","hardened","childIndex","parseInt","deriveChild","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","signature","verify","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","decode","readUInt8","fromJSON","obj","HARDENED_OFFSET","BN","EC","ec","messages","ecparams","curve","loadPublicKey","keyFromPublic","bn","cmp","isZero","privateKeyExport","compressed","Error","EC_PRIVATE_KEY_EXPORT_DER_FAIL","keyFromPrivate","getPublic","privateKeyNegate","sub","umod","toArrayLike","privateKeyModInverse","EC_PRIVATE_KEY_RANGE_INVALID","invm","tweak","EC_PRIVATE_KEY_TWEAK_ADD_FAIL","iadd","isub","privateKeyTweakMul","EC_PRIVATE_KEY_TWEAK_MUL_FAIL","imul","EC_PUBLIC_KEY_CREATE_FAIL","pair","EC_PUBLIC_KEY_PARSE_FAIL","EC_PUBLIC_KEY_TWEAK_ADD_FAIL","g","mul","add","pub","publicKeyTweakMul","EC_PUBLIC_KEY_TWEAK_MUL_FAIL","publicKeyCombine","publicKeys","pairs","Array","point","j","isInfinity","EC_PUBLIC_KEY_COMBINE_FAIL","signatureNormalize","ECDSA_SIGNATURE_PARSE_FAIL","result","nh","signatureExport","signatureImport","sigObj","message","noncefn","getNonce","counter","nonce","isBuffer","ECDSA_SIGN_FAIL","canonical","k","pers","recovery","recoveryParam","sigr","sigs","x","y","recover","recoverPubKey","ECDSA_RECOVER_FAIL","ecdh","shared","ecdhUnsafe","scalar","ECDH_FAIL","NodeWebSocket","url","protocols","TypeError","protocol","readyState","CONNECTING","bufferedAmount","onopen","onclose","onerror","onmessage","ws","eventListeners","open","close","error","addEventListener","type","listener","listeners","isArray","some","fn","push","removeEventListener","filter","send","process","nextTick","emit","CLOSING","OPEN","event","CLOSED","messageEvent","target","bubbles","cancelable","cancelBubble","currentTarget","eventPhase","srcElement","timeStamp","Date","now","ERROR_CODE","OPCODE","ADDR_VERSION","DEFAULT_SCRYPT","cost","blockSize","parallel","size","OEP_HEADER","OEP_FLAG","WEBVIEW_SCHEME","DEFAULT_ALGORITHM","algorithm","parameters","DEFAULT_SM2_ID","TEST_NODE","MAIN_NODE","HTTP_REST_PORT","HTTP_WS_PORT","HTTP_JSON_PORT","REST_API","getBalance","sendRawTx","getMerkleProof","TST_NETWORK","MAIN","TEST","TEST_TST_URL","SOCKET_URL","RPC_URL","REST_URL","sendRawTxByRestful","MAIN_TST_URL","TOKEN_TYPE","TST","TSG","DEFAULT_GAS_LIMIT","NATIVE_INVOKE_NAME","TX_MAX_SIG_SIZE","TST_BIP44_PATH","UNBOUND_GENERATION_AMOUNT","UNBOUND_TIME_INTERVAL","TST_TOTAL_SUPPLY","GENESIS_BLOCK_TIMESTAMP","opcode","hexstring2ab","str","substring","ab2hexstring","arr","uint8Arr","Uint8Array","byteLength","toString","ab2str","String","fromCharCode","apply","str2ab","ArrayBuffer","bufView","strLen","charCodeAt","str2hexstr","hexstr2str","hex2VarBytes","hex","num2VarInt","str2VarBytes","bool2VarByte","v","hexXor","str1","str2","result8","substr","utils_num2hexstring","num","arguments","undefined","littleEndian","RangeError","is_safe_integer_default","hexstring","repeat","reverseHex","out","bigIntFromBytes","bytes","buff","from_default","subarray","fill","external_long_","bigIntToBytes","toBytesLE","negData","neg","stop","b","isNegative","pos","utils_StringReader","StringReader","classCallCheck_default","createClass_default","isEmpty","indexOf","read","bytesToRead","readNextLen","len","utils_EventEmitter","EventEmitter","handlers","handler","utils_sendBackResult2Native","callback","window","prompt","utils_axiosPost","params","external_axios_default","a","post","then","res","console","log","catch","stringify_default","Math","floor","sha256","external_crypto_js_","Hex","parse","ripemd160","SignatureScript","generateRandomArray","external_secure_random_","randomBytes","generateMnemonic","random","external_bip39_","parseMnemonic","varifyPositiveInt","INVALID_PARAMS","isBase64","isHexString","unboundDeadline","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","get_iterator_default","next","done","return","numInterval","calcUnboundTsg","balance","startOffset","endOffset","amount","UNBOUND_DEADLINE","ustart","istart","uend","iend","BigInt","ledgerCompatible","external_bignumber_js_","isInteger","SIZE","SignatureScheme_SignatureScheme","SignatureScheme","label","labelJWS","values","item","find","ECDSAwithSHA224","ECDSAwithSHA256","ECDSAwithSHA384","ECDSAwithSHA512","ECDSAwithSHA3_224","ECDSAwithSHA3_256","ECDSAwithSHA3_384","ECDSAwithSHA3_512","ECDSAwithRIPEMD160","SM2withSM3","EDDSAwithSHA512","KeyType_KeyType","KeyType","defaultSchema","ECDSA","SM2","EDDSA","CurveLabel_CurveLabel","CurveLabel","preset","SECP224R1","SECP256R1","SECP384R1","SECP521R1","SM2P256V1","ED25519","Key_KeyParameters","KeyParameters","json","fromLabel","Key_Key","Key","deserializeJson","msg","scheme","external_js_sha3_","external_sm_js_","sum","schema","serializeJson","PublicKey_PublicKey","_Key","PublicKey","possibleConstructorReturn_default","__proto__","get_prototype_of_default","inherits_default","isSchemaSupported","getSignContent","computeHash","verifySignature","verifyEcDSASignature","verifyEdDSASignature","verifySM2Signature","external_elliptic_","reader","id","readNullTerminated","SM2KeyPair","sr","algorithmHex","curveHex","fromHex","PublicKey_PublicKeyStatus","PublicKeyStatus","hexLabel","comparePublicKeys","paKey","pbKey","pa","pb","getX","getY","pka","pkb","_pubFromString","Number","pushOpCode","op","pushBigInt","PUSHM1","PUSH0","PUSH1","pushNum","pushBytes","bigInt","toHexstr","hexstr","PUSHBYTES75","PUSHBYTES1","PUSHDATA1","PUSHDATA2","PUSHDATA4","program_programFromPubKey","serializeHex","pushPubKey","CHECKSIG","program_programFromMultiPubKey","pubkeys","sort","CHECKMULTISIG","program_programFromParams","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","readOpcode","readBytes","code","keylen","readUint32","readUint16","readUint8","readPubKey","pkStr","readNextBytes","deserializeHex","IN_USE","REVOKED","program_ProgramInfo","ProgramInfo","program_pushHexString","param","address_Address","Address","tstId","vmCode","fromPubKey","toBase58","hexToBase58","val","base58ToHex","address","hexEncoded","datas","external_base_58_","base58Encoded","scrypt","keyphrase","addressHash","derived","external_scrypt_async_","normalize","N","dkLen","encryptWithCtr","publicKeyEncoded","scryptParams","getB58Checksum","derived1","derived2","iv","assembled","encrypt","CTR","padding","NoPadding","ciphertext","decryptWithCtr","encryptedKey","saltOrAddress","encrypted","salt","ciphertexts","decrypt","checkCtrDecrypted","Decrypto_ERROR","encryptWithEcb","addresshash","xor","ECB","decryptWithEcb","checkEcbDecrypted","decryptedKey","encryptWithGcm","aad","cipher","external_crypto_","setAAD","plainText","final","authTag","getAuthTag","decryptWithGcm","decipher","setAuthTag","decrypted","Signature_Signature","Signature","publicKeyId","encoded","external_base64_url_","pgpSignature","Value","deserialzedValue","Algorithm","keyId","PublicKeyId","Format","PrivateKey_PrivateKey","PrivateKey","signed","computeSignature","_ref","asyncToGenerator_default","regenerator_default","mark","_callee","wrap","_context","prev","abrupt","_x","_x2","_x3","getEcDSAPublicKey","getEdDSAPublicKey","getSM2PublicKey","getPublicKey","INVALID_ADDR","keyFromSecret","pubToString","computeEcDSASignature","computeEdDSASignature","computeSM2Signature","toHex","toLowerCase","external_wif_","keyType","wifkey","mnemonic","derivePath","seed","pri","keyDeserializers","defaultKeyDeserializer","DefaultKeyDeserializer","registerKeyDeserializer","deserializer","deserializeFromJson","external","deserialize","getType","ParameterType","ParameterTypeVal","AnonymousCredential_Issuer","Issuer","AnonymousCredential_CryptoSuite","sk","AnonymousCredential_SecretKey","Rand","GenerateSk","GenerateIssuerPublicKey","AttributeName","GenerateAttr","Nym","attrs","e","getRandBN","B","ECP","g1","PAIR","G1mul","h0","attr","h","A","tmp","BIG","invmodp","order","cred","AnonymousCredential_Credential","Set","AnonymousCredential_IssuerPublicKey","COPY","CR","VerifyCredentialRequest","AnonymousCredential_User","User","ipk","h_sk","t1","C","hashToBN","S","modmul","mod","pi","genAttrBN","Cred","wg2e","ECP2","w","G2mul","g2","sig","affine","left","ate","fexp","right","equals","Copy","D","r1","A_","r3","_e","modneg","_A","r2","_r2","B_","s_","r_a","r_e","r_r2","r_r3","r_s_","r_sk","E","t2","_i","c_","s_sk","s_a","_i2","s_e","s_r2","s_r3","s_s_","proof","O","g2Dup","_t1","_t2","c1","c2","comp","CryptoSuite","ctx","external_milagro_crypto_js_","rng","RAND","getG1Generator","getG2Generator","getOrder","rcopy","ROM_CURVE","CURVE_Gx","CURVE_Gy","setxy","qx","FP2","qy","CURVE_Pxa","CURVE_Pxb","bset","CURVE_Pya","CURVE_Pyb","CURVE_Order","clean","randomnum","all","_len","points","_key","pp","toBytes","H","HASH256","process_array","R","fromBytes","HAttr","getRandG1","AnonymousCredential_CryptoBase","CryptoBase","_CryptoBase","SecretKey","_this","setValue","_g1","_g2","SetBasicValue","_CryptoBase2","IssuerPublicKey","_this2","SetAttrValue","_i3","genAttrElement","_C","_CryptoBase3","Credential","_this3","Ecies_Ecies","Ecies","Curve","encAlg","hashAlg","digestSize","keyFormat","compact","keyPair","genKeyPair","priv","getPrivate","privHex","pubkey","_iv","publicB","tmpKP","gTilde","hTilde","PEH","derivedKeyArray","kdf2","derivedKey","setAutoPadding","msgCipher","external_pkcs7_","iv2","plain","unpad","hashFunc","byteLen","ceil","offset","I2OSP","hEnd","writeUIntBE","Fixed64","f","Fixed64Size","AbiFunction","returntype","getName","args","VmType","parameter_Parameter","Parameter","vmType","author","email","description","codeVersion","payload_payload","InvokeCode","I128_SIZE","int128_I128","I128","U128","fromHexstr","bigPow","pow","pow128","maxI128","minus","minI128","negated","I128FromInt","i128","oneBits128","putUint64","I128FromBigInt","valBN","isGreaterThan","isLessThan","plus","bufRArray","Struct","list","scriptBuilder_pushBool","PUSHT","PUSHF","scriptBuilder_pushInt","biHex","scriptBuilder_pushBigNum","isEqualTo","toNumber","scriptBuilder_getStructBytes","ByteArray","scriptBuilder_getMapBytes","Map","keys","getValue","Integer","Long","scriptBuilder_pushMap","NEWMAP","TOALTSTACK","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","DUPFROMALTSTACK","scriptBuilder_pushParam","SETITEM","FROMALTSTACK","pushParam","Boolean","BOOLOR","convertMap","map_default","PACK","ADD","scriptBuilder_serializeAbiFunction","abiFunction","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","scriptBuilder_createCodeParamsScript","convertArray","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","map","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","keys_default","pVal","deserializeItem","readBoolean","ele","_length","TransactionAttributeUsage","createCodeParamsScript","abi_struct","structBytes","scriptBuilder_buildSmartContractParam","functionName","mapBytes","buildWasmContractParam","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","writeString","Int","writeVarBytes","writeAddress","writeBool","writeVarUint","writeUint16","writeUint32","writeUint64","writeI128","putLittleEndianUint","start","TxType","txAttribute_TransactionAttribute","TransactionAttribute","usage","Script","DescriptionUrl","Description","Nonce","ss","dataLen","txSignature_TxSignature","TxSignature","invocationScript","sigData","verificationScript","pubKeys","M","getParamsFromProgram","info","end","_sr","getProgramInfo","signAsync","t0","sent","Fee","payer","fee","fixed64","transaction_Transaction","Transaction","txAttributes","gasPrice","gasLimit","serializeUnsignedData","serializeSignedData","payload","ProgramHexString","ProgramSha256","tx","Invoke","invokeCode","Deploy","deployCode","attributeLength","txAttribute","sigLength","transfer_Transfer","_Transaction","Transfer","makeNativeContractTx","funcName","contractAddr","SYSCALL","createCodeParamScript","SWAP","APPEND","buildNativeCodeScript","NEWSTRUCT","TST_CONTRACT","TSG_CONTRACT","getTokenContract","tokenType","verifyAmount","lte","tstAssetTxBuilder_makeTransferTx","to","struct","contract","method","makeTransferStateTx","states","structs","state","makeTransferToMany","amounts","makeWithdrawTsgTx","tstAssetTxBuilder_makeQueryAllowanceTx","asset","makeQueryBalanceTx","deserializeTransferTx","contractIndex1","lastIndexOf","contractIndex2","contractIndex","max","paramsEnd","methodStr","_methodStr","numTmp","_from","_to","_numTmp","_amount","TSTID_CONTRACT","TSTID_METHOD","regIDWithPublicKey","regIDWithAttributes","addAttributes","removeAttribute","getAttributes","getDDO","addKey","removeKey","getPublicKeys","addRecovery","changeRecovery","getKeyState","buildRegisterTstidTx","buildRegIdWithAttributes","attributes","attrLen","buildAddAttributeTx","buildRemoveAttributeTx","buildGetAttributesTx","buildGetDDOTx","buildAddControlKeyTx","newPk","userKey","p1","p2","p3","buildRemoveControlKeyTx","pk2Remove","sender","buildGetPublicKeysTx","buildAddRecoveryTx","buildChangeRecoveryTx","newrecovery","oldrecovery","buildGetPublicKeyStateTx","pkId","Default_params","Action","Version","Type","Op","transactionBuilder_signTransaction","signTransactionAsync","createAsync","transactionBuilder_addSign","transactionBuilder_equalPks","pks1","pks2","transactionBuilder_signTx","signData","transactionBuilder_makeInvokeTransaction","abiFunc","abi_abiFunction","APPCALL","buildWasmVmInvokeCode","contractaddress","makeWasmVmInvokeTransaction","contractAddress","InvokeWasm","toConsumableArray_default","makeDeployCodeTransaction","desp","dc","NEOVM_TYPE","buildTxParam","PreExec","serialized","assign_default","Data","buildRpcParam","jsonrpc","buildRestfulParam","sendRawTxRestfulUrl","preExec","charAt","restUrl","transferStringParameter","pType","transformMapParameter","transformArrayParameter","typeof_default","transformParameter","arg","buildParamsByJson","paramsList","functions","operation","temp","makeTransactionsByJson","action","invokeConfig","contractHash","txList","buildNativeTxFromJson","_tx","funcArgs","_payer","account_HDKey","account_Account","Account","toJsonObj","extends_default","lock","enc-alg","isDefault","signatureScheme","password","exportPrivateKey","encryptedPrivateKey","saltBase64","account","trim","parseJsonObj","JSON","extra","urlConsts","RestClient","encodeURIComponent","hexData","userId","concatParams","body","txHash","codeHash","height","deferred_Deferred","Deferred","resolve","_resolve","reject","reason","_reject","_promise","promise_default","websocketBuilder_sendSubscribe","SubscribeEvent","SubscribeJsonBlock","SubscribeRawBlock","SubscribeBlockTxHashs","websocketBuilder_sendRawTransaction","websocketBuilder_getRawTransaction","Hash","Raw","websocketBuilder_getRawTransactionJson","websocketBuilder_getBlock","Height","websocketBuilder_getBlockJson","websocketBuilder_getBalance","Addr","websocketBuilder_getUnboundTsg","websocketBuilder_getContract","websocketBuilder_getContractJson","websocketBuilder_getSmartCodeEvent","websocketBuilder_getBlockHeightByTxHash","websocketBuilder_getStorage","websocketBuilder_getMerkleProof","websocketBuilder_getAllowance","Asset","From","To","websocketBuilder_getBlockHash","websocketBuilder_getBlockTxsByHeight","websocketBuilder_getGrantTsg","websocketBuilder_getMempoolTxState","websocketSender_WebsocketSender","WebsocketSender","debug","wsp","external_websocket_as_promised_","createWebSocket","socketUrl","html5_websocket","attachRequestId","Id","extractRequestId","packMessage","unpackMessage","onOpen","addListener","onClose","onSend","onMessage","onError","response","sendRequest","requestId","generateReqId","finish","_x4","onUnpackedMessage","websocketClient_WebsocketClient","WebsocketClient","autoClose","promises","notifyListener","raw","_ref2","_callee2","subscribeEvent","subscribeJsonBlock","subscribeRawBlock","subscribeBlockTxHashes","_context2","_ref3","_callee3","sendResult","deferred","waitNotify","_context3","Result","promise","_x10","_ref4","_callee4","_context4","_x11","_ref5","_callee5","_context5","_x12","_ref6","_callee6","_context6","_ref7","_callee7","_context7","_ref8","_callee8","_context8","_x13","_ref9","_callee9","_context9","_x14","_ref10","_callee10","_context10","_x15","_ref11","_callee11","_context11","_x16","_ref12","_callee12","_context12","_x17","_ref13","_callee13","_context13","_x18","_ref14","_callee14","_context14","_x19","_ref15","_callee15","_context15","_x20","_ref16","_callee16","_context16","_x21","_x22","_ref17","_callee17","_context17","_x23","_ref18","_callee18","_context18","_x24","_x25","_x26","_ref19","_callee19","_context19","_x27","_ref20","_callee20","_context20","_x28","_ref21","_callee21","_context21","_ref22","_callee22","_context22","_x29","_ref23","_callee23","_context23","_ref24","_callee24","_context24","_x30","_ref25","_callee25","_context25","_ref26","_callee26","_context26","_ref27","_callee27","_context27","_x32","TxHash","delete","warn","AbiInfo","entrypoint","attestClaimTxBuilder_abiInfo","abi_abiInfo","parseJson","events","attestClaimTxBuilder_contractHash","getHash","replace","attestClaimTxBuilder_contractAddress","buildCommitRecordTx","claimId","issuer","subject","getFunction","buildRevokeRecordTx","revokerTstid","name1","type1","buildGetRecordStatusTx","RevocationType","attestNotifyEvent_AttestNotifyEvent","AttestNotifyEvent","Desc","attestNotifyEvent_Result","State","GasConsumed","Notify","ContractAddress","States","ddo_PublicKeyWithId","PublicKeyWithId","ddo_DDOAttribute","DDOAttribute","ddo_DDO","DDO","ddo","pkLen","recoveryLen","message_Message","Message","metadata","messageId","external_uuid_","jwt","creator","parts","header","deserializeHeader","deserializePayload","deserializeJWT","payloadFromJSON","rest","stringified","_JSON$parse","jti","iss","issuedAt","iat","expireAt","exp","objectWithoutProperties_default","alg","fromLabelJWS","kid","retrievePublicKey","serializeUnsigned","verifyKeyOwnership","verifyExpiration","retrievePublicKeyState","_x5","serializeHeader","serializePayload","signatureEncoded","serializeJWT","typ","extractTstId","payloadToJSON","client","extractKeyId","rest_restClient","sendRawTransaction","_x6","_x7","fromHexLabel","_x8","_x9","Status","claim_Claim","_Message","Claim","useProof","get_default","checkAttest","getStatus","serializeProof","attesterId","subjectId","claim_GetStatusResponse","status","ATTESTED","issuerId","ver","@context","context","clm","content","clm-rev","revocation","GetStatusResponse","NOTFOUND","identity_ControlData","ControlData","_extends2","defineProperty_default","cd","identity_Identity","Identity","controls","control","toJson","identity","generateTstid","fromTstid","fromJson","TransactionNeo_TransactionNeo","TransactionNeo","scripts","serializeExclusiveData","inputs","outputs","getHashData","InvocationTransaction_InvocationTransaction","_TransactionNeo","InvocationTransaction","script","gas","NeoRpc_NeoRpc","NeoRpc","req","makeRequest","toHexString","Program_Program","Program","parameter","program","pks","SmartContract_SmartContract","SmartContract","addr","makeInvocationTransaction","attr1","attr2","TransactionInput_TransactionInput","TransactionInput","prevHash","prevIndex","input","TransactionOutput_TransactionOutput","TransactionOutput","assetId","scriptHash","output","readLong","RpcClient","oep8TxBuilder_Oep8State","Oep8State","tokenId","oep8TxBuilder_TransferFrom","TransferFrom","spender","FunctionNames","oep8TxBuilder_Oep8TxBuilder","Oep8TxBuilder","sendAddr","recvAddr","func","owner","compoundNum","twallet_TWallet","TWallet","defaultTstid","defaultAccountAddress","identities","accounts","createTime","twallet","toISOString","functionNames","oep4TxBuilder_formatBigNumParameter","valHex","oep4TxBuilder_Oep4State","Oep4State","oep4TxBuilder_Oep4TxBuilder","Oep4TxBuilder","sdk_HDKey","CONTRACT_HASH","sdk_SDK","SDK","node","SERVER_NODE","port","REST_PORT","restClient","SOCKET_PORT","socketClient","transformPassword","addIdentity","errResult","PreExec_ERROR","NETWORK_ERROR","_obj","SUCCESS","UNKNOWN_TSTID","wif","deserializeWIF","_obj2","_obj3","encryptedPrivateKeyObj","importIdentity","getDecryptError","twalletStr","mnemonicHex","generateFromMnemonic","mnemonicEnc","decMne","importAccount","claimData","saltHex","claim","valueObj","Context","_obj4","serializePgp","addressObj","request","_obj5","token","fromAddress","toAddress","_result","_result2","_result3","_result4","identityDataStr","accountDataStr","_obj6","serializeWIF","keystore","keyStoreObj","_obj7","_obj8","getAllowance","getSmartCodeEvent","requiredSignatureNum","allRelatedPks","pubs","fromMultiPubKeys","_result5","txData","txDada","_result6","signedHash","recv","abiInfo","setParamsValue","makeInvokeTransaction","programFromParams","programFromPubKey","oep8","makeQueryBalanceOfTx","makeQueryBalancesTx","vals","makeQueryTotalBalanceTx","payerAddress","makeTransferTx","makeCompoundTx","oep4","queryBalanceOf","ins","cipherContent","setKeyPair","dec","governanceContractTxBuilder_contractAddress","makeRegisterCandidateTx","peerPubKey","keyNo","userAddr","initPos","makeUnregisterCandidateTx","makeApproveCandidateTx","makeRejectCandidateTx","makeVoteForPeerTx","peerPubKeys","posList","makeUnvoteForPeerTx","makeWithdrawTx","withdrawList","makeQuitNodeTx","makeChangeAuthorizationTx","maxAuthorize","makeSetPeerCostTx","peerCost","makeWithdrawFeeTx","makeAuthorizeForPeerTx","peerPubKeyList","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","makeUnauthorizeForPeerTx","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","makeAddInitPosTx","peerPubkey","makeReduceInitPosTx","makeWithdrawPeerUnboundTsgTx","getStorage","governanceContractTxBuilder_PeerAttributes","getSplitFeeAddress","governanceContractTxBuilder_SplitFeeAddress","getAuthorizeInfo","governanceContractTxBuilder_AuthorizeInfo","getGovernanceView","viewRes","view","governanceView","governanceContractTxBuilder_GovernanceView","getPeerPoolMap","key1","key2","keyP","readInt","governanceContractTxBuilder_PeerPoolItem","getGlobalParam","governanceContractTxBuilder_GlobalParam","getTotalStake","governanceContractTxBuilder_TotalStake","getPeerUnboundTsg","totalStake","blockHeight","block","getBlockHeight","getBlockJson","Header","Timestamp","stake","timeOffset","getConfiguration","governanceContractTxBuilder_Configuration","GovernanceView","txhash","PeerPoolItem","totalPos","PeerAttributes","t2PeerCost","t1PeerCost","tPeerCost","field1","field2","field3","field4","pr","SplitFeeAddress","sfa","AuthorizeInfo","consensusPos","freezePos","newPos","withdrawPos","withdrawFreezePos","withdrawUnfreezePos","ai","GlobalParam","gp","feeHexStr","candidateFeeStr","candidateFee","minStr","minInitState","candidateNumStr","candidateNum","posLimitStr","posLimit","aStr","bStr","yStr","yita","pStr","penalty","TotalStake","ts","Configuration","config","toInt","K","L","BlockMsgDelay","HashMsgDelay","PeerHandShakeTimeout","MaxBlockChangeView","token_Transfers","Transfers","stateLen","token_State","token_TokenTransfer","TokenTransfer","tf","bi","token_Contract","Contract","token_TransferFrom","oep5TxBuilder_Oep5Param","Oep5Param","toAcct","oep5TxBuilder_FunctionNames","oep5TxBuilder_Oep5TxBuilder","Oep5TxBuilder","oep5Param","oep5Params","src_TST","TransactionBuilder","transactionBuilder_namespaceObject","TstAssetTxBuilder","tstAssetTxBuilder_namespaceObject","GovernanceTxBuilder","governanceContractTxBuilder_namespaceObject","utils","utils_namespaceObject","scrypt_namespaceObject","CONST","consts_namespaceObject","Token","token_namespaceObject","TstidContract","tstidContractTxBuilder_namespaceObject","rpcClient","Crypto","crypto_namespaceObject","ScriptBuilder","scriptBuilder_namespaceObject","NeoCore","neocore_namespaceObject","Oep4","oep4TxBuilder_namespaceObject","Oep8","oep8TxBuilder_namespaceObject","Oep5","oep5TxBuilder_namespaceObject","__webpack_exports__"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 50);\n","module.exports = require(\"babel-runtime/helpers/createClass\");","module.exports = require(\"babel-runtime/helpers/classCallCheck\");","module.exports = require(\"babel-runtime/core-js/json/stringify\");","module.exports = require(\"babel-runtime/regenerator\");","module.exports = require(\"babel-runtime/core-js/get-iterator\");","module.exports = require(\"babel-runtime/helpers/asyncToGenerator\");","module.exports = require(\"axios\");","module.exports = require(\"crypto-js\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"babel-runtime/core-js/object/get-prototype-of\");","module.exports = require(\"babel-runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"babel-runtime/helpers/inherits\");","module.exports = require(\"babel-runtime/core-js/map\");","module.exports = require(\"elliptic\");","module.exports = require(\"bip39\");","module.exports = require(\"base64-url\");","module.exports = require(\"sm.js\");","module.exports = require(\"crypto\");","module.exports = require(\"babel-runtime/helpers/extends\");","module.exports = require(\"base-58\");","module.exports = require(\"long\");","module.exports = require(\"babel-runtime/helpers/get\");","module.exports = require(\"babel-runtime/core-js/promise\");","module.exports = require(\"js-sha3\");","const WebSocket = require('./src/websocket.js');\r\n\r\nmodule.exports = WebSocket;\r\n","module.exports = require(\"secure-random\");","module.exports = require(\"babel-runtime/core-js/object/keys\");","module.exports = require(\"babel-runtime/core-js/object/assign\");","module.exports = require(\"babel-runtime/helpers/typeof\");","module.exports = require(\"babel-runtime/helpers/defineProperty\");","var assert = require('assert')\r\nvar Buffer = require('safe-buffer').Buffer\r\nvar crypto = require('crypto')\r\nvar cs = require('coinstring')\r\nvar secp256r1 = require('./secp256r1');\r\n\r\nvar MASTER_SECRET = Buffer.from('Nist256p1 seed', 'utf8')\r\nvar HARDENED_OFFSET = 0x80000000\r\nvar LEN = 78\r\n\r\n// Bitcoin hardcoded by default, can use package `coininfo` for others\r\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\r\n\r\nfunction HDKey (versions) {\r\n  this.versions = versions || BITCOIN_VERSIONS\r\n  this.depth = 0\r\n  this.index = 0\r\n  this._privateKey = null\r\n  this._publicKey = null\r\n  this.chainCode = null\r\n  this._fingerprint = 0\r\n  this.parentFingerprint = 0\r\n}\r\n\r\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\r\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\r\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\r\n\r\nObject.defineProperty(HDKey.prototype, 'privateKey', {\r\n  get: function () {\r\n    return this._privateKey\r\n  },\r\n  set: function (value) {\r\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\r\n    assert(secp256r1.privateKeyVerify(value) === true, 'Invalid private key')\r\n\r\n    this._privateKey = value\r\n    this._publicKey = secp256r1.publicKeyCreate(value, true)\r\n    this._identifier = hash160(this.publicKey)\r\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\r\n  }\r\n})\r\n\r\nObject.defineProperty(HDKey.prototype, 'publicKey', {\r\n  get: function () {\r\n    return this._publicKey\r\n  },\r\n  set: function (value) {\r\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\r\n    assert(secp256r1.publicKeyVerify(value) === true, 'Invalid public key')\r\n\r\n    this._publicKey = secp256r1.publicKeyConvert(value, true) // force compressed point\r\n    this._identifier = hash160(this.publicKey)\r\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\r\n    this._privateKey = null\r\n  }\r\n})\r\n\r\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\r\n  get: function () {\r\n    if (this._privateKey) return cs.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\r\n    else return null\r\n  }\r\n})\r\n\r\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\r\n  get: function () {\r\n    return cs.encode(serialize(this, this.versions.public, this.publicKey))\r\n  }\r\n})\r\n\r\nHDKey.prototype.derive = function (path) {\r\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\r\n    return this\r\n  }\r\n\r\n  var entries = path.split('/')\r\n  var hdkey = this\r\n  entries.forEach(function (c, i) {\r\n    if (i === 0) {\r\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\r\n      return\r\n    }\r\n\r\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\r\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\r\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\r\n    if (hardened) childIndex += HARDENED_OFFSET\r\n\r\n    hdkey = hdkey.deriveChild(childIndex)\r\n  })\r\n\r\n  return hdkey\r\n}\r\n\r\nHDKey.prototype.deriveChild = function (index) {\r\n  var isHardened = index >= HARDENED_OFFSET\r\n  var indexBuffer = Buffer.allocUnsafe(4)\r\n  indexBuffer.writeUInt32BE(index, 0)\r\n\r\n  var data\r\n\r\n  if (isHardened) { // Hardened child\r\n    assert(this.privateKey, 'Could not derive hardened child key')\r\n\r\n    var pk = this.privateKey\r\n    var zb = Buffer.alloc(1, 0)\r\n    pk = Buffer.concat([zb, pk])\r\n\r\n    // data = 0x00 || ser256(kpar) || ser32(index)\r\n    data = Buffer.concat([pk, indexBuffer])\r\n  } else { // Normal child\r\n    // data = serP(point(kpar)) || ser32(index)\r\n    //      = serP(Kpar) || ser32(index)\r\n    data = Buffer.concat([this.publicKey, indexBuffer])\r\n  }\r\n\r\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\r\n  var IL = I.slice(0, 32)\r\n  var IR = I.slice(32)\r\n\r\n  var hd = new HDKey(this.versions)\r\n\r\n  // Private parent key -> private child key\r\n  if (this.privateKey) {\r\n    // ki = parse256(IL) + kpar (mod n)\r\n    try {\r\n      hd.privateKey = secp256r1.privateKeyTweakAdd(this.privateKey, IL)\r\n      // throw if IL >= n || (privateKey + IL) === 0\r\n    } catch (err) {\r\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\r\n      return this.derive(index + 1)\r\n    }\r\n  // Public parent key -> public child key\r\n  } else {\r\n    // Ki = point(parse256(IL)) + Kpar\r\n    //    = G*IL + Kpar\r\n    try {\r\n      hd.publicKey = secp256r1.publicKeyTweakAdd(this.publicKey, IL, true)\r\n      // throw if IL >= n || (g**IL + publicKey) is infinity\r\n    } catch (err) {\r\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\r\n      return this.derive(index + 1, isHardened)\r\n    }\r\n  }\r\n\r\n  hd.chainCode = IR\r\n  hd.depth = this.depth + 1\r\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\r\n  hd.index = index\r\n\r\n  return hd\r\n}\r\n\r\nHDKey.prototype.sign = function (hash) {\r\n  return secp256r1.sign(hash, this.privateKey).signature\r\n}\r\n\r\nHDKey.prototype.verify = function (hash, signature) {\r\n  return secp256r1.verify(hash, signature, this.publicKey)\r\n}\r\n\r\nHDKey.prototype.toJSON = function () {\r\n  return {\r\n    xpriv: this.privateExtendedKey,\r\n    xpub: this.publicExtendedKey\r\n  }\r\n}\r\n\r\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\r\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\r\n  var IL = I.slice(0, 32)\r\n  var IR = I.slice(32)\r\n\r\n  var hdkey = new HDKey(versions)\r\n  hdkey.chainCode = IR\r\n  hdkey.privateKey = IL\r\n\r\n  return hdkey\r\n}\r\n\r\nHDKey.fromExtendedKey = function (base58key, versions) {\r\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\r\n  versions = versions || BITCOIN_VERSIONS\r\n  var hdkey = new HDKey(versions)\r\n\r\n  var keyBuffer = cs.decode(base58key)\r\n\r\n  var version = keyBuffer.readUInt32BE(0)\r\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\r\n\r\n  hdkey.depth = keyBuffer.readUInt8(4)\r\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\r\n  hdkey.index = keyBuffer.readUInt32BE(9)\r\n  hdkey.chainCode = keyBuffer.slice(13, 45)\r\n\r\n  var key = keyBuffer.slice(45)\r\n  if (key.readUInt8(0) === 0) { // private\r\n    assert(version === versions.private, 'Version mismatch: version does not match private')\r\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\r\n  } else {\r\n    assert(version === versions.public, 'Version mismatch: version does not match public')\r\n    hdkey.publicKey = key\r\n  }\r\n\r\n  return hdkey\r\n}\r\n\r\nHDKey.fromJSON = function (obj) {\r\n  return HDKey.fromExtendedKey(obj.xpriv)\r\n}\r\n\r\nfunction serialize (hdkey, version, key) {\r\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\r\n  var buffer = Buffer.allocUnsafe(LEN)\r\n\r\n  buffer.writeUInt32BE(version, 0)\r\n  buffer.writeUInt8(hdkey.depth, 4)\r\n\r\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\r\n  buffer.writeUInt32BE(fingerprint, 5)\r\n  buffer.writeUInt32BE(hdkey.index, 9)\r\n\r\n  hdkey.chainCode.copy(buffer, 13)\r\n  key.copy(buffer, 45)\r\n\r\n  return buffer\r\n}\r\n\r\nfunction hash160 (buf) {\r\n  var sha = crypto.createHash('sha256').update(buf).digest()\r\n  return crypto.createHash('rmd160').update(sha).digest()\r\n}\r\n\r\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\r\nmodule.exports = HDKey\r\n","module.exports = require(\"wif\");","module.exports = require(\"pkcs7\");","module.exports = require(\"safe-buffer\");","module.exports = require(\"babel-runtime/core-js/array/from\");","module.exports = require(\"babel-runtime/core-js/number/is-safe-integer\");","module.exports = require(\"scrypt-async\");","module.exports = require(\"milagro-crypto-js\");","module.exports = require(\"babel-runtime/helpers/toConsumableArray\");","module.exports = require(\"websocket-as-promised\");","module.exports = require(\"babel-runtime/helpers/objectWithoutProperties\");","module.exports = require(\"uuid\");","module.exports = require(\"assert\");","module.exports = require(\"coinstring\");","'use strict'\r\nvar Buffer = require('safe-buffer').Buffer\r\nvar createHash = require('create-hash')\r\nvar BN = require('bn.js')\r\nvar EC = require('elliptic').ec\r\n\r\nvar messages = require('./messages.json')\r\n\r\nvar ec = new EC('p256')\r\nvar ecparams = ec.curve\r\n\r\nfunction loadPublicKey (publicKey) {\r\n  return ec.keyFromPublic(publicKey);\r\n}\r\n\r\nexports.privateKeyVerify = function (privateKey) {\r\n  var bn = new BN(privateKey)\r\n  return bn.cmp(ecparams.n) < 0 && !bn.isZero()\r\n}\r\n\r\nexports.privateKeyExport = function (privateKey, compressed) {\r\n  var d = new BN(privateKey)\r\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)\r\n\r\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\r\n}\r\n\r\nexports.privateKeyNegate = function (privateKey) {\r\n  var bn = new BN(privateKey)\r\n  return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)\r\n}\r\n\r\nexports.privateKeyModInverse = function (privateKey) {\r\n  var bn = new BN(privateKey)\r\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)\r\n\r\n  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)\r\n}\r\n\r\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\r\n  var bn = new BN(tweak)\r\n  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\r\n\r\n  bn.iadd(new BN(privateKey))\r\n  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\r\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\r\n\r\n  return bn.toArrayLike(Buffer, 'be', 32)\r\n}\r\n\r\nexports.privateKeyTweakMul = function (privateKey, tweak) {\r\n  var bn = new BN(tweak)\r\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)\r\n\r\n  bn.imul(new BN(privateKey))\r\n  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)\r\n\r\n  return bn.toArrayLike(Buffer, 'be', 32)\r\n}\r\n\r\nexports.publicKeyCreate = function (privateKey, compressed) {\r\n  var d = new BN(privateKey)\r\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)\r\n\r\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\r\n}\r\n\r\nexports.publicKeyConvert = function (publicKey, compressed) {\r\n  var pair = loadPublicKey(publicKey)\r\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\r\n\r\n  return Buffer.from(pair.getPublic(compressed, true))\r\n}\r\n\r\nexports.publicKeyVerify = function (publicKey) {\r\n  return loadPublicKey(publicKey) !== null\r\n}\r\n\r\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\r\n  var pair = loadPublicKey(publicKey)\r\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\r\n\r\n  tweak = new BN(tweak)\r\n  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\r\n\r\n  return Buffer.from(ecparams.g.mul(tweak).add(pair.pub).encode(true, compressed))\r\n}\r\n\r\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\r\n  var pair = loadPublicKey(publicKey)\r\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\r\n\r\n  tweak = new BN(tweak)\r\n  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)\r\n\r\n  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))\r\n}\r\n\r\nexports.publicKeyCombine = function (publicKeys, compressed) {\r\n  var pairs = new Array(publicKeys.length)\r\n  for (var i = 0; i < publicKeys.length; ++i) {\r\n    pairs[i] = loadPublicKey(publicKeys[i])\r\n    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\r\n  }\r\n\r\n  var point = pairs[0].pub\r\n  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)\r\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)\r\n\r\n  return Buffer.from(point.encode(true, compressed))\r\n}\r\n\r\nexports.signatureNormalize = function (signature) {\r\n  var r = new BN(signature.slice(0, 32))\r\n  var s = new BN(signature.slice(32, 64))\r\n  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\r\n\r\n  var result = Buffer.from(signature)\r\n  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)\r\n\r\n  return result\r\n}\r\n\r\nexports.signatureExport = function (signature) {\r\n  var r = signature.slice(0, 32)\r\n  var s = signature.slice(32, 64)\r\n  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\r\n\r\n  return { r: r, s: s }\r\n}\r\n\r\nexports.signatureImport = function (sigObj) {\r\n  var r = new BN(sigObj.r)\r\n  if (r.cmp(ecparams.n) >= 0) r = new BN(0)\r\n\r\n  var s = new BN(sigObj.s)\r\n  if (s.cmp(ecparams.n) >= 0) s = new BN(0)\r\n\r\n  return Buffer.concat([\r\n    r.toArrayLike(Buffer, 'be', 32),\r\n    s.toArrayLike(Buffer, 'be', 32)\r\n  ])\r\n}\r\n\r\nexports.sign = function (message, privateKey, noncefn, data) {\r\n  if (typeof noncefn === 'function') {\r\n    var getNonce = noncefn\r\n    noncefn = function (counter) {\r\n      var nonce = getNonce(message, privateKey, null, data, counter)\r\n      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)\r\n\r\n      return new BN(nonce)\r\n    }\r\n  }\r\n\r\n  var d = new BN(privateKey)\r\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)\r\n\r\n  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })\r\n  return {\r\n    signature: Buffer.concat([\r\n      result.r.toArrayLike(Buffer, 'be', 32),\r\n      result.s.toArrayLike(Buffer, 'be', 32)\r\n    ]),\r\n    recovery: result.recoveryParam\r\n  }\r\n}\r\n\r\nexports.verify = function (message, signature, publicKey) {\r\n  var sigObj = {r: signature.slice(0, 32), s: signature.slice(32, 64)}\r\n\r\n  var sigr = new BN(sigObj.r)\r\n  var sigs = new BN(sigObj.s)\r\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\r\n  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false\r\n\r\n  var pair = loadPublicKey(publicKey)\r\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\r\n\r\n  return ec.verify(message, sigObj, {x: pair.pub.x, y: pair.pub.y})\r\n}\r\n\r\nexports.recover = function (message, signature, recovery, compressed) {\r\n  var sigObj = {r: signature.slice(0, 32), s: signature.slice(32, 64)}\r\n\r\n  var sigr = new BN(sigObj.r)\r\n  var sigs = new BN(sigObj.s)\r\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\r\n\r\n  try {\r\n    if (sigr.isZero() || sigs.isZero()) throw new Error()\r\n\r\n    var point = ec.recoverPubKey(message, sigObj, recovery)\r\n    return Buffer.from(point.encode(true, compressed))\r\n  } catch (err) {\r\n    throw new Error(messages.ECDSA_RECOVER_FAIL)\r\n  }\r\n}\r\n\r\nexports.ecdh = function (publicKey, privateKey) {\r\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)\r\n  return createHash('sha256').update(shared).digest()\r\n}\r\n\r\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\r\n  var pair = loadPublicKey(publicKey)\r\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\r\n\r\n  var scalar = new BN(privateKey)\r\n  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)\r\n\r\n  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))\r\n}\r\n","module.exports = require(\"create-hash\");","module.exports = require(\"bn.js\");","'use strict';\r\n\r\nconst NodeWebSocket = require('ws');\r\n\r\n/**\r\n * Creates something similar to a WebApi MessageEvent\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent\r\n *\r\n * @param {Object} target\r\n * @param {String|Blob|ArrayBuffer} data\r\n */\r\nconst MessageEvent = function (target, data) {\r\n    this.bubbles = false;\r\n    this.cancelable = false;\r\n    this.cancelBubble = false;\r\n    this.currentTarget = this;\r\n    this.data = data;\r\n    this.eventPhase = 0;\r\n    this.srcElement = this;\r\n    this.target = this;\r\n    this.timeStamp = Date.now();\r\n    this.type = 'message';\r\n};\r\n\r\n// @todo CloseEvent\r\n\r\n/**\r\n * Creates something similar to a HTML5 WebSocket\r\n *\r\n * @param {String} url\r\n */\r\nconst WebSocket = function (url, protocols) {\r\n\r\n    if (!(this instanceof WebSocket)) {\r\n        throw new TypeError(\"Constructor WebSocket requires 'new'.\");\r\n    }\r\n\r\n    this.url = url;\r\n    this.protocol = protocols;\r\n    this.readyState = this.CONNECTING;\r\n    this.bufferedAmount = 0;\r\n\r\n    // DOM Level 0\r\n    this.onopen = null;\r\n    this.onclose = null;\r\n    this.onerror = null;\r\n    this.onmessage = null;\r\n\r\n    const ws = new NodeWebSocket(url, protocols);\r\n\r\n    // DOM Level 2\r\n    const eventListeners = {\r\n        open: [],\r\n        close: [],\r\n        message: [],\r\n        error: [],\r\n    };\r\n\r\n    /**\r\n     * @param  {String} type\r\n     * @param  {Function} listener\r\n     */\r\n    this.addEventListener = (type, listener) => {\r\n        const listeners = eventListeners[type];\r\n        if (Array.isArray(listeners)) {\r\n            if (!listeners.some(fn => fn === listener)) {\r\n                listeners.push(listener);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param  {String} type\r\n     * @param  {Function} listener\r\n     */\r\n    this.removeEventListener = (type, listener) => {\r\n        const listeners = eventListeners[type];\r\n        if (Array.isArray(listeners)) {\r\n            eventListeners[type] = listeners.filter(fn => fn !== listener);\r\n        }\r\n    };\r\n\r\n    this.send = (data) => {\r\n        ws.send(data, error => {\r\n            if (error) {\r\n                eventListeners.error.forEach(fn => fn(error));\r\n                this.onerror(error);\r\n            }\r\n        });\r\n    };\r\n\r\n    this.close = () => {\r\n        ws.close();\r\n        if (this.readyState === this.CONNECTING) {\r\n            // Browser's WebSocket emits a `close` event when\r\n            // transitioning from CONNECTING to CLOSING\r\n            process.nextTick(() => {\r\n                ws.emit('close');\r\n            });\r\n        }\r\n        this.readyState = this.CLOSING;\r\n    };\r\n\r\n    ws.addEventListener('open', () => {\r\n        this.readyState = this.OPEN;\r\n        eventListeners.open.forEach(fn => fn());\r\n        this.onopen && this.onopen();\r\n    });\r\n\r\n    ws.addEventListener('close', event => {\r\n        this.readyState = this.CLOSED;\r\n        eventListeners.close.forEach(fn => fn(event));\r\n        this.onclose && this.onclose();\r\n    });\r\n\r\n    ws.addEventListener('message', event => {\r\n        // https://developer.mozilla.org/en-US/docs/Web/Events/message\r\n        const messageEvent = new MessageEvent(this, event.data);\r\n        eventListeners.message.forEach(fn => fn(messageEvent));\r\n        this.onmessage && this.onmessage(messageEvent);\r\n    });\r\n\r\n    ws.addEventListener('error', error => {\r\n        this.close(); // maybe this should check the error type\r\n        eventListeners.error.forEach(fn => fn(error));\r\n        this.onerror && this.onerror(error);\r\n    });\r\n};\r\n\r\nWebSocket.prototype.CONNECTING = 0;\r\nWebSocket.prototype.OPEN = 1;\r\nWebSocket.prototype.CLOSING = 2;\r\nWebSocket.prototype.CLOSED = 3;\r\n\r\nWebSocket.CONNECTING = 0;\r\nWebSocket.OPEN = 1;\r\nWebSocket.CLOSING = 2;\r\nWebSocket.CLOSED = 3;\r\n\r\nmodule.exports = WebSocket;\r\n","module.exports = require(\"ws\");","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nexport enum ERROR_CODE {\r\n    SUCCESS\t            =     0, // 成功\r\n    SESSION_EXPIRED     = 41001,   // 会话无效或已过期（ 需要重新登录） |\r\n    SERVICE_CEILING     = 41002,   // 达到服务上限 |\r\n    ILLEGAL_DATAFORMAT  = 41003,   // 不合法数据格式 |\r\n    INVALID_VERSION     = 41004,   // 不合法的版本 |\r\n    INVALID_METHOD      = 42001,   // 无效的方法 |\r\n    INVALID_PARAMS      = 42002,   // 无效的参数 |\r\n    INVALID_TRANSACTION = 43001,   // 无效的交易 |\r\n    INVALID_ASSET       = 43002,   // 无效的资产 |\r\n    INVALID_BLOCK       = 43003,   // 无效的块 |\r\n    UNKNOWN_TRANSACTION = 44001,   // 找不到交易 |\r\n    UNKNOWN_ASSET       = 44002,   // 找不到资产 |\r\n    UNKNOWN_BLOCK       = 44003,   // 找不到块 |\r\n    UNKNWN_CONTRACT     = 44004,   // 找不到合约 |\r\n    INTERNAL_ERROR      = 45001,   // 内部错误 |\r\n    SMARTCODE_ERROR     = 47001,   // 智能合约错误 |\r\n\r\n    UNKNOWN_TSTID       = 51000,   // 不存在的TST ID,\r\n    NETWORK_ERROR       = 52000,   // 网络错误,\r\n    Decrypto_ERROR      = 53000,    // 解密错误,\r\n    INVALID_ADDR        = 53001,   // 地址验证失败\r\n\r\n    PreExec_ERROR = 54000   // 预执行错误\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nenum OPCODE {\r\n    // Constants\r\n    PUSH0 = 0x00, // An empty array of bytes is pushed onto the stack.\r\n    PUSHF = PUSH0,\r\n    PUSHBYTES1 = 0x01, // 0x01-0x4B The next bytes is data to be pushed onto the stack\r\n    PUSHBYTES75 = 0x4B,\r\n    PUSHDATA1 = 0x4C, // The next byte contains the number of bytes to be pushed onto the stack.\r\n    PUSHDATA2 = 0x4D, // The next two bytes contain the number of bytes to be pushed onto the stack.\r\n    PUSHDATA4 = 0x4E, // The next four bytes contain the number of bytes to be pushed onto the stack.\r\n    PUSHM1 = 0x4F, // The number -1 is pushed onto the stack.\r\n    PUSH1 = 0x51, // The number 1 is pushed onto the stack.\r\n    PUSHT = PUSH1,\r\n    PUSH2 = 0x52, // The number 2 is pushed onto the stack.\r\n    PUSH3 = 0x53, // The number 3 is pushed onto the stack.\r\n    PUSH4 = 0x54, // The number 4 is pushed onto the stack.\r\n    PUSH5 = 0x55, // The number 5 is pushed onto the stack.\r\n    PUSH6 = 0x56, // The number 6 is pushed onto the stack.\r\n    PUSH7 = 0x57, // The number 7 is pushed onto the stack.\r\n    PUSH8 = 0x58, // The number 8 is pushed onto the stack.\r\n    PUSH9 = 0x59, // The number 9 is pushed onto the stack.\r\n    PUSH10 = 0x5A, // The number 10 is pushed onto the stack.\r\n    PUSH11 = 0x5B, // The number 11 is pushed onto the stack.\r\n    PUSH12 = 0x5C, // The number 12 is pushed onto the stack.\r\n    PUSH13 = 0x5D, // The number 13 is pushed onto the stack.\r\n    PUSH14 = 0x5E, // The number 14 is pushed onto the stack.\r\n    PUSH15 = 0x5F, // The number 15 is pushed onto the stack.\r\n    PUSH16 = 0x60, // The number 16 is pushed onto the stack.\r\n\r\n    // Flow control\r\n    NOP = 0x61, // Does nothing.\r\n    JMP = 0x62,\r\n    JMPIF = 0x63,\r\n    JMPIFNOT = 0x64,\r\n    CALL = 0x65,\r\n    RET = 0x66,\r\n    APPCALL = 0x67,\r\n    SYSCALL = 0x68,\r\n    TAILCALL = 0x69,\r\n    DUPFROMALTSTACK = 0x6A,\r\n\r\n    // Stack\r\n    TOALTSTACK = 0x6B, // Puts the input onto the top of the alt stack. Removes it from the main stack.\r\n    FROMALTSTACK = 0x6C, // Puts the input onto the top of the main stack. Removes it from the alt stack.\r\n    XDROP = 0x6D,\r\n    XSWAP = 0x72,\r\n    XTUCK = 0x73,\r\n    DEPTH = 0x74, // Puts the number of stack items onto the stack.\r\n    DROP = 0x75, // Removes the top stack item.\r\n    DUP = 0x76, // Duplicates the top stack item.\r\n    NIP = 0x77, // Removes the second-to-top stack item.\r\n    OVER = 0x78, // Copies the second-to-top stack item to the top.\r\n    PICK = 0x79, // The item n back in the stack is copied to the top.\r\n    ROLL = 0x7A, // The item n back in the stack is moved to the top.\r\n    ROT = 0x7B, // The top three items on the stack are rotated to the left.\r\n    SWAP = 0x7C, // The top two items on the stack are swapped.\r\n    TUCK = 0x7D, // The item at the top of the stack is copied and inserted before the second-to-top item.\r\n\r\n    // Splice\r\n    CAT = 0x7E, // Concatenates two strings.\r\n    SUBSTR = 0x7F, // Returns a section of a string.\r\n    LEFT = 0x80, // Keeps only characters left of the specified point in a string.\r\n    RIGHT = 0x81, // Keeps only characters right of the specified point in a string.\r\n    SIZE = 0x82, // Returns the length of the input string.\r\n\r\n    // Bitwise logic\r\n    INVERT = 0x83, // Flips all of the bits in the input.\r\n    AND = 0x84, // Boolean and between each bit in the inputs.\r\n    OR = 0x85, // Boolean or between each bit in the inputs.\r\n    XOR = 0x86, // Boolean exclusive or between each bit in the inputs.\r\n    EQUAL = 0x87, // Returns 1 if the inputs are exactly equal, 0 otherwise.\r\n    // EQUALVERIFY = 0x88, // Same as EQUAL, but runs VERIFY afterward.\r\n    // RESERVED1 = 0x89, // Transaction is invalid unless occuring in an unexecuted IF branch\r\n    // RESERVED2 = 0x8A, // Transaction is invalid unless occuring in an unexecuted IF branch\r\n\r\n    // Arithmetic\r\n    // Note: Arithmetic inputs are limited to signed 32-bit integers, but may overflow their output.\r\n    INC = 0x8B, // 1 is added to the input.\r\n    DEC = 0x8C, // 1 is subtracted from the input.\r\n    // SAL           = 0x8D, // The input is multiplied by 2.\r\n    // SAR           = 0x8E, // The input is divided by 2.\r\n    NEGATE = 0x8F, // The sign of the input is flipped.\r\n    ABS = 0x90, // The input is made positive.\r\n    NOT = 0x91, // If the input is 0 or 1, it is flipped. Otherwise the output will be 0.\r\n    NZ = 0x92, // Returns 0 if the input is 0. 1 otherwise.\r\n    ADD = 0x93, // a is added to b.\r\n    SUB = 0x94, // b is subtracted from a.\r\n    MUL = 0x95, // a is multiplied by b.\r\n    DIV = 0x96, // a is divided by b.\r\n    MOD = 0x97, // Returns the remainder after dividing a by b.\r\n    SHL = 0x98, // Shifts a left b bits, preserving sign.\r\n    SHR = 0x99, // Shifts a right b bits, preserving sign.\r\n    BOOLAND = 0x9A, // If both a and b are not 0, the output is 1. Otherwise 0.\r\n    BOOLOR = 0x9B, // If a or b is not 0, the output is 1. Otherwise 0.\r\n    NUMEQUAL = 0x9C, // Returns 1 if the numbers are equal, 0 otherwise.\r\n    NUMNOTEQUAL = 0x9E, // Returns 1 if the numbers are not equal, 0 otherwise.\r\n    LT = 0x9F, // Returns 1 if a is less than b, 0 otherwise.\r\n    GT = 0xA0, // Returns 1 if a is greater than b, 0 otherwise.\r\n    LTE = 0xA1, // Returns 1 if a is less than or equal to b, 0 otherwise.\r\n    GTE = 0xA2, // Returns 1 if a is greater than or equal to b, 0 otherwise.\r\n    MIN = 0xA3, // Returns the smaller of a and b.\r\n    MAX = 0xA4, // Returns the larger of a and b.\r\n    WITHIN = 0xA5, // Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.\r\n\r\n    // Crypto\r\n    // RIPEMD160 = 0xA6, // The input is hashed using RIPEMD-160.\r\n    SHA1 = 0xA7, // The input is hashed using SHA-1.\r\n    SHA256 = 0xA8, // The input is hashed using SHA-256.\r\n    HASH160 = 0xA9,\r\n    HASH256 = 0xAA,\r\n    // tslint:disable-next-line:max-line-length\r\n    CHECKSIG = 0xAC, // The entire transaction's outputs inputs and script (from the most recently-executed CODESEPARATOR to the end) are hashed. The signature used by CHECKSIG must be a valid signature for this hash and public key. If it is 1 is returned 0 otherwise.\r\n    // tslint:disable-next-line:max-line-length\r\n    CHECKMULTISIG = 0xAE, // For each signature and public key pair CHECKSIG is executed. If more public keys than signatures are listed some key/sig pairs can fail. All signatures need to match a public key. If all signatures are valid 1 is returned 0 otherwise. Due to a bug one extra unused value is removed from the stack.\r\n\r\n    // Array\r\n\t// tslint:disable:indent\r\n    ARRAYSIZE  = 0xC0,\r\n\tPACK       = 0xC1,\r\n\tUNPACK     = 0xC2,\r\n\tPICKITEM   = 0xC3,\r\n\tSETITEM    = 0xC4,\r\n\tNEWARRAY   = 0xC5,\r\n\tNEWSTRUCT  = 0xC6,\r\n\tNEWMAP     = 0xC7,\r\n\tAPPEND     = 0xC8,\r\n\tREVERSE    = 0xC9,\r\n\tREMOVE     = 0xCA,\r\n\tHASKEY     = 0xCB,\r\n\tKEYS       = 0xCC,\r\n\tVALUES     = 0xCD,\r\n\r\n\t// Exception\r\n\tTHROW = 0xF0,\r\n\tTHROWIFNOT = 0xF1\r\n}\r\n\r\nexport default OPCODE;\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n// export const ADDR_VERSION = '41';\r\nexport const ADDR_VERSION = '17';\r\n\r\nexport const DEFAULT_SCRYPT = {\r\n    cost: 4096, // 除以2时间减半\r\n    blockSize: 8,\r\n    parallel: 8,\r\n    size: 64\r\n};\r\n\r\n// specified by oep, same as bip38\r\nexport const OEP_HEADER = '0142';\r\n\r\nexport const OEP_FLAG = 'e0';\r\n\r\n// Tst://nativeMethod?param1=xxx&param2=yyy\r\nexport const WEBVIEW_SCHEME = 'Tst';\r\n\r\nexport const DEFAULT_ALGORITHM = {\r\n    algorithm: 'ECDSA',\r\n    parameters: {\r\n        curve: 'P-256' // also called secp256r1\r\n    }\r\n};\r\n\r\nexport const DEFAULT_SM2_ID = '1234567812345678';\r\n\r\nexport const TEST_NODE = 'dapp4.tesra.me'; // 0.9\r\n// export const TEST_NODE = '192.168.50.74';\r\n// export const TEST_NODE = '127.0.0.1';\r\n\r\nexport const MAIN_NODE = 'dapp3.tesra.me';\r\n\r\nexport const HTTP_REST_PORT = '25770';\r\nexport const HTTP_WS_PORT = '25771';\r\nexport const HTTP_JSON_PORT = '25768';\r\n\r\nexport const REST_API = {\r\n    getBalance: '/api/v1/balance',\r\n    sendRawTx: '/api/v1/transaction',\r\n    getMerkleProof: '/api/v1/merkleproof' // end with /txHash\r\n};\r\n\r\nexport const TST_NETWORK = {\r\n    MAIN: 'MainNet',\r\n    TEST: 'TestNet'\r\n};\r\n\r\nexport const TEST_TST_URL = {\r\n    SOCKET_URL: `ws://${TEST_NODE}:${HTTP_WS_PORT}`,\r\n\r\n    RPC_URL: `http://${TEST_NODE}:${HTTP_JSON_PORT}`,\r\n\r\n    REST_URL: `http://${TEST_NODE}:${HTTP_REST_PORT}`,\r\n\r\n    sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${REST_API.sendRawTx}`\r\n};\r\n\r\nexport const MAIN_TST_URL = {\r\n    SOCKET_URL: `ws://${MAIN_NODE}:${HTTP_WS_PORT}`,\r\n\r\n    RPC_URL: `http://${MAIN_NODE}:${HTTP_JSON_PORT}/`,\r\n\r\n    REST_URL: `http://${MAIN_NODE}:${HTTP_REST_PORT}/`,\r\n\r\n    sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${REST_API.sendRawTx}`\r\n\r\n};\r\n\r\nexport const TOKEN_TYPE = {\r\n    TST: 'TST',\r\n    TSG: 'TSG'\r\n};\r\n\r\nexport const DEFAULT_GAS_LIMIT = 30000;\r\n\r\nexport const NATIVE_INVOKE_NAME = 'Tesra.Native.Invoke';\r\n\r\nexport const TX_MAX_SIG_SIZE = 16;\r\n\r\n// tslint:disable-next-line:quotemark\r\nexport const TST_BIP44_PATH = \"m/44'/1024'/0'/0/0\";\r\n\r\nexport const UNBOUND_GENERATION_AMOUNT = [5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\n\r\nexport const UNBOUND_TIME_INTERVAL = 31536000;\r\n\r\nexport const TST_TOTAL_SUPPLY = 1000000000;\r\n\r\nexport const GENESIS_BLOCK_TIMESTAMP = 1530316800;\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport axios from 'axios';\r\nimport * as bip39 from 'bip39';\r\nimport * as cryptoJS from 'crypto-js';\r\nimport * as Long from 'long';\r\nimport * as secureRandom from 'secure-random';\r\nimport { TST_TOTAL_SUPPLY, UNBOUND_GENERATION_AMOUNT, UNBOUND_TIME_INTERVAL, WEBVIEW_SCHEME } from './consts';\r\nimport { ERROR_CODE } from './error';\r\n/**\r\n * Turn hex string into array buffer\r\n * @param str hex string\r\n */\r\nexport function hexstring2ab(str: string): number[] {\r\n    const result = [];\r\n\r\n    while (str.length >= 2) {\r\n        result.push(parseInt(str.substring(0, 2), 16));\r\n        str = str.substring(2, str.length);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Turn array buffer into hex string\r\n * @param arr Array like value\r\n */\r\nexport function ab2hexstring(arr: any): string {\r\n    let result: string = '';\r\n    const uint8Arr: Uint8Array = new Uint8Array(arr);\r\n    for (let i = 0; i < uint8Arr.byteLength; i++) {\r\n        let str = uint8Arr[i].toString(16);\r\n        str = str.length === 0\r\n            ? '00'\r\n            : str.length === 1\r\n                ? '0' + str\r\n                : str;\r\n        result += str;\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Turn ArrayBuffer or array-like oject into normal string\r\n * @param buf\r\n */\r\nexport function ab2str(buf: ArrayBuffer | number[]): string {\r\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\r\n}\r\n\r\n/**\r\n * Turn normal string into ArrayBuffer\r\n * @param str Normal string\r\n */\r\nexport function str2ab(str: string) {\r\n    const buf = new ArrayBuffer(str.length); // 每个字符占用1个字节\r\n    const bufView = new Uint8Array(buf);\r\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\r\n        bufView[i] = str.charCodeAt(i);\r\n    }\r\n    return buf;\r\n}\r\n\r\n/**\r\n * Turn normal string into hex string\r\n * @param str Normal string\r\n */\r\nexport function str2hexstr(str: string) {\r\n    return ab2hexstring(str2ab(str));\r\n}\r\n\r\n/**\r\n * Turn hex string into normal string\r\n * @param str Hex string\r\n */\r\nexport function hexstr2str(str: string) {\r\n    return ab2str(hexstring2ab(str));\r\n}\r\n\r\n/**\r\n * return the (length of bytes) + bytes\r\n * @param hex Hex string\r\n */\r\nexport function hex2VarBytes(hex: string) {\r\n    let result = '';\r\n    result += num2VarInt(hex.length / 2);\r\n    result += hex;\r\n    return result;\r\n}\r\n\r\n/**\r\n * return the length of string(bytes) + string(bytes)\r\n * @param str Normal string\r\n */\r\nexport function str2VarBytes(str: string) {\r\n    let result = '';\r\n    const hex = str2hexstr(str);\r\n    const hexLen = num2VarInt(hex.length / 2);\r\n    result += hexLen;\r\n    result += hex;\r\n    return result;\r\n}\r\n\r\n/**\r\n * return the byte of boolean value\r\n * @param v\r\n */\r\nexport function bool2VarByte(v: boolean) {\r\n    return v ? '01' : '00';\r\n}\r\n\r\n/**\r\n * Do xor operation with two strings\r\n * @param str1 Hex string\r\n * @param str2 Hex string\r\n */\r\nexport function hexXor(str1: string, str2: string): string {\r\n    if (str1.length !== str2.length) {\r\n        throw new Error('strings are disparate lengths');\r\n    }\r\n    if (str1.length % 2 !== 0) {\r\n        throw new Error('strings must be hex');\r\n    }\r\n\r\n    const result = new ArrayBuffer(str1.length / 2);\r\n    const result8 = new Uint8Array(result);\r\n    for (let i = 0; i < str1.length; i += 2) {\r\n        // tslint:disable-next-line:no-bitwise\r\n        result8[i / 2] = (parseInt(str1.substr(i, 2), 16) ^ parseInt(str2.substr(i, 2), 16));\r\n    }\r\n    return ab2hexstring(result);\r\n}\r\n\r\n/**\r\n * Converts a number to a big endian hexstring of a suitable size, optionally little endian\r\n * @param {number} num\r\n * @param {number} size - The required size in bytes, eg 1 for Uint8, 2 for Uint16. Defaults to 1.\r\n * @param {boolean} littleEndian - Encode the hex in little endian form\r\n * @return {string}\r\n */\r\nexport const num2hexstring = (num: number, size = 1, littleEndian = false) => {\r\n    if (num < 0) {\r\n        throw new RangeError('num must be >=0');\r\n    }\r\n    if (size % 1 !== 0) {\r\n        throw new Error('size must be a whole integer');\r\n    }\r\n    if (!Number.isSafeInteger(num)) {\r\n        throw new RangeError(`num (${num}) must be a safe integer`);\r\n    }\r\n\r\n    size = size * 2;\r\n    let hexstring = num.toString(16);\r\n    hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\r\n    if (littleEndian) {\r\n        hexstring = reverseHex(hexstring);\r\n    }\r\n    return hexstring;\r\n};\r\n\r\n/**\r\n * Converts a number to a hex\r\n * @param {number} num - The number\r\n * @returns {string} hexstring of the variable Int.\r\n */\r\nexport const num2VarInt = (num: number) => {\r\n    if (num < 0xfd) {\r\n        return num2hexstring(num);\r\n    } else if (num <= 0xffff) {\r\n        // uint16\r\n        return 'fd' + num2hexstring(num, 2, true);\r\n    } else if (num <= 0xffffffff) {\r\n        // uint32\r\n        return 'fe' + num2hexstring(num, 4, true);\r\n    } else {\r\n        // uint64\r\n        return 'ff' + num2hexstring(num, 8, true);\r\n    }\r\n};\r\n\r\n/**\r\n * Reverses a hex string, 2 chars as 1 byte\r\n * @example\r\n * reverseHex('abcdef') = 'efcdab'\r\n * @param {string} hex - HEX string\r\n * @return {string} reversed hex string.\r\n */\r\nexport const reverseHex = (hex: string) => {\r\n    if (hex.length % 2 !== 0) {\r\n        throw new Error(`Incorrect Length: ${hex}`);\r\n    }\r\n    let out = '';\r\n    for (let i = hex.length - 2; i >= 0; i -= 2) {\r\n        out += hex.substr(i, 2);\r\n    }\r\n    return out;\r\n};\r\n\r\nexport function bigIntFromBytes(bytes: string): Long {\r\n    const buff = Buffer.from(bytes, 'hex');\r\n    let data = Array.from(buff.subarray(0));\r\n    const b = data[data.length - 1];\r\n\r\n    if (b >> 7 === 1) {\r\n        data = data.concat(Array(8 - data.length).fill(255));\r\n    }\r\n    return Long.fromBytesLE(data);\r\n}\r\n\r\nexport function bigIntToBytes(value: Long) {\r\n    let data = value.toBytesLE();\r\n    const negData = value.neg().toBytesLE();\r\n    let stop;\r\n    if (value.isNegative()) {\r\n        stop = 255;\r\n    } else {\r\n        stop = 0;\r\n    }\r\n    let b = stop;\r\n    let pos = 0;\r\n    for (let i = data.length - 1; i >= 0; i--) {\r\n        if (data[i] !== stop) {\r\n            b = value.isNegative() ? negData[i] : data[i];\r\n            pos = i + 1;\r\n            break;\r\n        }\r\n    }\r\n    data = data.slice(0, pos);\r\n\r\n    if (b >> 7 === 1) {\r\n        data.push(value.isNegative() ? 255 : 0);\r\n    }\r\n    return new Buffer(data).toString('hex');\r\n}\r\n\r\n/**\r\n * @class StringReader\r\n * @classdesc A string helper used to read given string as bytes.2 chars as one byte.\r\n * @param {string} str - The string to read.\r\n */\r\nexport class StringReader {\r\n    str: string;\r\n    pos: number;\r\n    size: number;\r\n    constructor(str = '') {\r\n        if (str.length % 2 !== 0) {\r\n            throw new Error('Param\\'s length is not even.');\r\n        }\r\n        this.str = str;\r\n        this.pos = 0;\r\n        this.size = this.str.length / 2;\r\n    }\r\n\r\n    /**\r\n     * Checks if reached the end of the string.\r\n     */\r\n    isEmpty() {\r\n        return this.pos >= this.str.length;\r\n    }\r\n\r\n    /**\r\n     * Reads some bytes.\r\n     * @param {number} bytes - Number of bytes to read\r\n     */\r\n    read(bytes: number) {\r\n        if (this.isEmpty()) {\r\n            throw new Error('StringReader reached the end.');\r\n        }\r\n        const out = this.str.substr(this.pos, bytes * 2);\r\n        this.pos += bytes * 2;\r\n        return out;\r\n    }\r\n\r\n    unreadBytes(bytes: number) {\r\n        if ((this.pos - bytes * 2) < 0) {\r\n            throw new Error('Can not unread too many bytes.');\r\n        }\r\n        this.pos -= bytes * 2;\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Reads string terminated by NULL.\r\n     */\r\n    readNullTerminated(): string {\r\n        const index = this.str.indexOf('00', this.pos);\r\n        if (index === -1) {\r\n            throw new Error('No ending NULL found');\r\n        }\r\n\r\n        const out = this.str.substring(this.pos, index);\r\n        this.pos = index + 2;\r\n        return out;\r\n    }\r\n\r\n    readNextByte() {\r\n        return this.read(1);\r\n    }\r\n\r\n    /**\r\n     * First, read one byte as the length of bytes to read. Then read the following bytes.\r\n     */\r\n    readNextBytes() {\r\n        const bytesToRead = this.readNextLen();\r\n        if (bytesToRead === 0) {\r\n            return '';\r\n        }\r\n\r\n        return this.read(bytesToRead);\r\n    }\r\n\r\n    /**\r\n     * Reads one byte as int, which may indicates the length of following bytes to read.\r\n     * @returns {number}\r\n     */\r\n    readNextLen() {\r\n        let len = parseInt(this.read(1), 16);\r\n\r\n        if (len === 0xfd) {\r\n            len = parseInt(reverseHex(this.read(2)), 16);\r\n        } else if (len === 0xfe) {\r\n            len = parseInt(reverseHex(this.read(4)), 16);\r\n        } else if (len === 0xff) {\r\n            len = parseInt(reverseHex(this.read(8)), 16);\r\n        }\r\n\r\n        return len;\r\n    }\r\n\r\n    readVarUint() {\r\n        return this.readNextLen();\r\n    }\r\n\r\n    /**\r\n     * Read Uint8\r\n     */\r\n    readUint8() {\r\n        return parseInt(reverseHex(this.read(1)), 16);\r\n    }\r\n\r\n    /**\r\n     * read 2 bytes as uint16 in littleEndian\r\n     */\r\n    readUint16() {\r\n        return parseInt(reverseHex(this.read(2)), 16);\r\n    }\r\n\r\n    /**\r\n     * Read 4 bytes as uint32 in littleEndian\r\n     */\r\n    readUint32() {\r\n        return parseInt(reverseHex(this.read(4)), 16);\r\n    }\r\n\r\n    /**\r\n     * Read 8 bytes as uint64 in littleEndian\r\n     */\r\n    readUint64() {\r\n        return parseInt(reverseHex(this.read(8)), 16);\r\n    }\r\n\r\n    /**\r\n     * Read 4 bytes as int in littleEndian\r\n     */\r\n    readInt() {\r\n        return parseInt(reverseHex(this.read(4)), 16);\r\n    }\r\n\r\n    /**\r\n     * Read 8 bytes as long in littleEndian\r\n     */\r\n    readLong() {\r\n        return parseInt(reverseHex(this.read(8)), 16);\r\n    }\r\n\r\n    readBoolean() {\r\n        return parseInt(this.read(1), 16) !== 0;\r\n    }\r\n}\r\n\r\nexport class EventEmitter {\r\n    handlers: any = {};\r\n\r\n    // register event type and handler\r\n    on(type: string, handler: () => void) {\r\n        if (typeof this.handlers[type] === 'undefined') {\r\n            this.handlers[type] = [];\r\n        }\r\n        this.handlers[type].push(handler);\r\n    }\r\n\r\n    /**\r\n     * trigger event\r\n     * @param { string } type\r\n     * @param { any } event , is the parameter\r\n     */\r\n    trigger(type: string, event?: any) {\r\n        if (this.handlers[type] instanceof Array) {\r\n            const handlers = this.handlers[type];\r\n            for (let i = 0, len = handlers.length; i < len; i++) {\r\n                handlers[i](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    // remove event listener\r\n    off(type: string) {\r\n        delete this.handlers[type];\r\n    }\r\n}\r\n\r\nexport const sendBackResult2Native = (result: string, callback: string) => {\r\n    if (window && window.prompt) {\r\n        window.prompt(`${WEBVIEW_SCHEME}://${callback}?params=${result}`);\r\n    }\r\n};\r\n\r\nexport const axiosPost = (url: string, params: any) => {\r\n    return axios.post(url, params).then((res: any) => {\r\n        // tslint:disable-next-line:no-console\r\n        console.log('axios res:' + res);\r\n        return res;\r\n    }).catch((err: any) => {\r\n        // tslint:disable-next-line:no-console\r\n        console.log('axios res:' + JSON.stringify(err));\r\n\r\n        return err;\r\n    });\r\n};\r\n\r\n/**\r\n * Gets current time in unix timestamp format.\r\n */\r\nexport function now(): number {\r\n    return Math.floor(Date.now() / 1000);\r\n}\r\n\r\n/**\r\n * Computes sha-256 hash from hex encoded data.\r\n *\r\n * @param data Hex encoded data\r\n */\r\nexport function sha256(data: string) {\r\n    const hex = cryptoJS.enc.Hex.parse(data);\r\n    const sha = cryptoJS.SHA256(hex).toString();\r\n    return sha;\r\n}\r\n\r\n/**\r\n * Computes ripemd-160 hash from hex encoded data.\r\n *\r\n * @param data Hex encoded data\r\n */\r\nexport function ripemd160(data: string) {\r\n    const hex = cryptoJS.enc.Hex.parse(data);\r\n    const ripemd = cryptoJS.RIPEMD160(hex).toString();\r\n    return ripemd;\r\n}\r\n\r\n/**\r\n * Computes ripemd-160 hash of sha-256 hash from hex encoded data.\r\n *\r\n * @param data Hex encoded data\r\n */\r\nexport function hash160(SignatureScript: string): string {\r\n    return ripemd160(sha256(SignatureScript));\r\n}\r\n\r\n/**\r\n * Generates random ArrayBuffer of specified length.\r\n *\r\n * @param len Length of the array to generate\r\n */\r\nexport function generateRandomArray(len: number): ArrayBuffer {\r\n    return secureRandom(len);\r\n}\r\n\r\n/**\r\n * Generates random ArrayBuffer of specified length encoded as hex string\r\n *\r\n * @param len Length of the array to generate\r\n */\r\nexport function randomBytes(len: number) {\r\n    return ab2hexstring(generateRandomArray(len));\r\n}\r\n\r\nexport function generateMnemonic(size: number = 16): string {\r\n    const random = ab2hexstring(generateRandomArray(size));\r\n    return bip39.entropyToMnemonic(random);\r\n}\r\n\r\nexport function parseMnemonic(str: string) {\r\n    return bip39.mnemonicToEntropy(str);\r\n}\r\n\r\nexport function varifyPositiveInt(v: number) {\r\n    if (!/^[1-9]\\d*$/.test(v.toString())) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    return;\r\n}\r\n\r\nexport function isBase64(str: string): boolean {\r\n    return Buffer.from(str, 'base64').toString('base64') === str;\r\n}\r\n\r\nexport function isHexString(str: string): boolean {\r\n    const regexp = /^[0-9a-fA-F]+$/;\r\n    return regexp.test(str) && (str.length % 2 === 0);\r\n}\r\n\r\nexport function unboundDeadline() {\r\n    let count = 0;\r\n    for (const m of UNBOUND_GENERATION_AMOUNT) {\r\n        count += m;\r\n    }\r\n    count *= UNBOUND_TIME_INTERVAL;\r\n    const numInterval = UNBOUND_GENERATION_AMOUNT.length;\r\n    if (UNBOUND_GENERATION_AMOUNT[numInterval - 1] !== 1 ||\r\n        !((count - UNBOUND_TIME_INTERVAL < TST_TOTAL_SUPPLY) && TST_TOTAL_SUPPLY <= count)) {\r\n        throw new Error('incompatible constants setting');\r\n    }\r\n    return UNBOUND_TIME_INTERVAL * numInterval - (count - TST_TOTAL_SUPPLY);\r\n}\r\n\r\nexport function calcUnboundTsg(balance: number, startOffset: number, endOffset: number) {\r\n    let amount = 0;\r\n    if (startOffset >= endOffset) {\r\n        return 0;\r\n    }\r\n    const UNBOUND_DEADLINE = unboundDeadline();\r\n    if (startOffset < UNBOUND_DEADLINE) {\r\n        let ustart = Math.floor(startOffset / UNBOUND_TIME_INTERVAL);\r\n        let istart = startOffset % UNBOUND_TIME_INTERVAL;\r\n        if (endOffset >= UNBOUND_DEADLINE) {\r\n            endOffset = UNBOUND_DEADLINE;\r\n        }\r\n        const uend = Math.floor(endOffset / UNBOUND_TIME_INTERVAL);\r\n        const iend = endOffset % UNBOUND_TIME_INTERVAL;\r\n        while (ustart < uend) {\r\n            amount += (UNBOUND_TIME_INTERVAL - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\r\n            ustart++;\r\n            istart = 0;\r\n        }\r\n        amount += (iend - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\r\n    }\r\n    return amount * balance;\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport * as Long from 'long';\r\nimport { ERROR_CODE } from './../error';\r\nimport { bigIntFromBytes, bigIntToBytes } from './../utils';\r\n\r\nconst SIZE = 8;\r\n/**\r\n * Big positive integer base on BigNumber\r\n */\r\nexport default class BigInt {\r\n    /**\r\n     * Create BigInt from string\r\n     * @param hex Byte string value\r\n     */\r\n    static fromHexstr(hex: string): BigInt {\r\n        // hex = reverseHex(hex);\r\n        // const bi = new BigNumber(hex, 16).toString();\r\n        // return new BigInt(bi);\r\n        const long = bigIntFromBytes(hex);\r\n        return new BigInt(long.toString());\r\n    }\r\n\r\n    value: string | number;\r\n    ledgerCompatible: boolean;\r\n\r\n    constructor(value: string | number, ledgerCompatible: boolean = true) {\r\n        const bi = new BigNumber(value);\r\n        if (!bi.isInteger()) {\r\n            throw new Error(String(ERROR_CODE.INVALID_PARAMS));\r\n        }\r\n        this.value = value;\r\n        this.ledgerCompatible = ledgerCompatible;\r\n    }\r\n\r\n    /**\r\n     * Create hex string from BigInt\r\n     */\r\n    toHexstr(): string {\r\n        const bi = Long.fromValue(this.value);\r\n        let hex = bigIntToBytes(bi);\r\n        if (this.ledgerCompatible && (hex.length % 2 !== 0 || hex.length < 16)) {\r\n            hex = hex + '0'.repeat(SIZE * 2 - hex.length);\r\n        }\r\n        return hex;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Schema used during signing and verification of signature.\r\n */\r\nexport class SignatureScheme {\r\n    static values: SignatureScheme[] = [];\r\n\r\n    static ECDSAwithSHA224 = new SignatureScheme('SHA224withECDSA', 0, 'ES224');\r\n    static ECDSAwithSHA256 = new SignatureScheme('SHA256withECDSA', 1, 'ES256');\r\n    static ECDSAwithSHA384 = new SignatureScheme('SHA384withECDSA', 2, 'ES384');\r\n    static ECDSAwithSHA512 = new SignatureScheme('SHA512withECDSA', 3, 'ES512');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_224 = new SignatureScheme('SHA3-224withECDSA', 4, 'ES3-224');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_256 = new SignatureScheme('SHA3-256withECDSA', 5, 'ES3-256');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_384 = new SignatureScheme('SHA3-384withECDSA', 6, 'ES3-384');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_512 = new SignatureScheme('SHA3-512withECDSA', 7, 'ES3-512');\r\n    static ECDSAwithRIPEMD160 = new SignatureScheme('RIPEMD160withECDSA', 8, 'ER160');\r\n    static SM2withSM3 = new SignatureScheme('SM3withSM2', 9, 'SM');\r\n    static EDDSAwithSHA512 = new SignatureScheme('SHA512withEdDSA', 10, 'EDS512');\r\n\r\n    /**\r\n     * Finds Signature schema corresponding to specified hex representation.\r\n     *\r\n     * @param hex Byte hex value\r\n     */\r\n    static fromHex(hex: number): SignatureScheme {\r\n        const item = SignatureScheme.values.find((v) => v.hex === hex);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Signature schema corresponding to specified label representation.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabel(label: string): SignatureScheme {\r\n        const item = SignatureScheme.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Signature schema corresponding to specified label representation in JWS.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabelJWS(label: string): SignatureScheme {\r\n        const item = SignatureScheme.values.find((v) => v.labelJWS === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n    hex: number;\r\n    labelJWS: string;\r\n\r\n    constructor(label: string, hex: number, labelJWS: string) {\r\n        this.label = label;\r\n        this.hex = hex;\r\n        this.labelJWS = labelJWS;\r\n\r\n        SignatureScheme.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Type of key. ECDSA is the default one to use.\r\n */\r\nexport class KeyType {\r\n    static values: KeyType[] = [];\r\n\r\n    static ECDSA = new KeyType('ECDSA', 0x12, SignatureScheme.ECDSAwithSHA256);\r\n    static SM2 = new KeyType('SM2', 0x13, SignatureScheme.SM2withSM3);\r\n    static EDDSA = new KeyType('EDDSA', 0x14, SignatureScheme.EDDSAwithSHA512);\r\n\r\n    /**\r\n     * Finds Key type corresponding to specified hex representation.\r\n     *\r\n     * @param hex Byte hex value\r\n     */\r\n    static fromHex(hex: number): KeyType {\r\n        const item = KeyType.values.find((v) => v.hex === hex);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Key type corresponding to specified label representation.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabel(label: string): KeyType {\r\n        const item = KeyType.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n    hex: number;\r\n    defaultSchema: SignatureScheme;\r\n\r\n    constructor(label: string, hex: number, defaultSchema: SignatureScheme) {\r\n        this.label = label;\r\n        this.hex = hex;\r\n        this.defaultSchema = defaultSchema;\r\n\r\n        KeyType.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Elliptic curve used.\r\n */\r\nexport class CurveLabel {\r\n    static values: CurveLabel[] = [];\r\n\r\n    static SECP224R1 = new CurveLabel('P-224', 1, 'p224');\r\n    static SECP256R1 = new CurveLabel('P-256', 2, 'p256');\r\n    static SECP384R1 = new CurveLabel('P-384', 3, 'p384');\r\n    static SECP521R1 = new CurveLabel('P-521', 4, 'p521');\r\n    static SM2P256V1 = new CurveLabel('sm2p256v1', 20, 'sm2p256v1');\r\n    static ED25519 = new CurveLabel('ed25519', 25, 'ed25519');\r\n\r\n    /**\r\n     * Finds Curvecorresponding to specified hex representation.\r\n     *\r\n     * @param hex Byte hex value\r\n     */\r\n    static fromHex(hex: number): CurveLabel {\r\n        const item = CurveLabel.values.find((v) => v.hex === hex);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Curve corresponding to specified label representation.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabel(label: string): CurveLabel {\r\n        const item = CurveLabel.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n    hex: number;\r\n    preset: string;\r\n\r\n    constructor(label: string, hex: number, preset: string) {\r\n        this.label = label;\r\n        this.hex = hex;\r\n        this.preset = preset;\r\n\r\n        CurveLabel.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as cryptoJS from 'crypto-js';\r\nimport { sha3_224, sha3_256, sha3_384, sha3_512 } from 'js-sha3';\r\nimport { sm3 } from 'sm.js';\r\nimport { DEFAULT_ALGORITHM } from '../consts';\r\nimport { hexstring2ab } from '../utils';\r\nimport { CurveLabel } from './CurveLabel';\r\nimport { KeyType } from './KeyType';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Specific parameters for the key type.\r\n */\r\nexport class KeyParameters {\r\n    /**\r\n     * Create KeyParameters from json.\r\n     * @param json JsonKeyParameters\r\n     */\r\n    static deserializeJson(json: JsonKeyParameters): KeyParameters {\r\n        return new KeyParameters(\r\n        CurveLabel.fromLabel(json.curve)\r\n        );\r\n    }\r\n    curve: CurveLabel;\r\n\r\n    constructor(curve: CurveLabel) {\r\n        this.curve = curve;\r\n    }\r\n\r\n    /**\r\n     * Serialize KeyParameters to json.\r\n     */\r\n    serializeJson(): JsonKeyParameters {\r\n        return {\r\n            curve: this.curve.label\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Common representation of private or public key\r\n */\r\nexport class Key {\r\n    /**\r\n     * Algorithm used for key generation.\r\n     */\r\n    algorithm: KeyType;\r\n\r\n    /**\r\n     * Parameters of the algorithm.\r\n     */\r\n    parameters: KeyParameters;\r\n\r\n    /**\r\n     * Key data.\r\n     */\r\n    key: string;\r\n\r\n    /**\r\n     * Creates Key.\r\n     *\r\n     * If no algorithm or parameters are specified, default values will be used.\r\n     * This is strongly discurraged, because it will forbid using other Key types.\r\n     * Therefore use it only for testing.\r\n     *\r\n     * @param key Hex encoded key value\r\n     * @param algorithm Key type\r\n     * @param parameters Parameters of the key type\r\n     */\r\n    constructor(key: string, algorithm?: KeyType, parameters?: KeyParameters) {\r\n        this.key = key;\r\n\r\n        if (algorithm === undefined) {\r\n            algorithm = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\r\n        }\r\n\r\n        if (parameters === undefined) {\r\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\r\n        }\r\n\r\n        this.algorithm = algorithm;\r\n        this.parameters = parameters;\r\n    }\r\n\r\n    /**\r\n     * Computes hash of message using hashing function of signature schema.\r\n     *\r\n     * @param msg Hex encoded input data\r\n     * @param scheme Signing schema to use\r\n     */\r\n    computeHash(msg: string, scheme: SignatureScheme): string {\r\n        switch (scheme) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n            return cryptoJS.SHA224(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n            return cryptoJS.SHA256(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n            return cryptoJS.SHA384(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return cryptoJS.SHA512(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n            return sha3_224(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n            return sha3_256(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n            return sha3_384(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n            return sha3_512(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return cryptoJS.RIPEMD160(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.SM2withSM3:\r\n            return (new sm3()).sum(hexstring2ab(msg), 'hex');\r\n        default:\r\n            throw new Error('Unsupported hash algorithm.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if signing schema is compatible with key type.\r\n     *\r\n     * @param schema Signing schema to use\r\n     */\r\n    isSchemaSupported(schema: SignatureScheme): boolean {\r\n        switch (schema) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return this.algorithm === KeyType.ECDSA;\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return this.algorithm === KeyType.EDDSA;\r\n        case SignatureScheme.SM2withSM3:\r\n            return this.algorithm === KeyType.SM2;\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets JSON representation of the Key (Public/Private).\r\n     */\r\n    serializeJson(): JsonKey {\r\n        return {\r\n            algorithm: this.algorithm.label,\r\n            parameters: this.parameters.serializeJson(),\r\n            key: this.key\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Json representation of the Key.\r\n */\r\nexport interface JsonKey {\r\n    algorithm: string;\r\n    parameters: JsonKeyParameters;\r\n    key: string | null;\r\n    external?: any | null;\r\n}\r\n\r\n/**\r\n * Json representation of the Key parameters.\r\n */\r\nexport interface JsonKeyParameters {\r\n    curve: string;\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as elliptic from 'elliptic';\r\nimport { sm2 } from 'sm.js';\r\nimport { DEFAULT_SM2_ID } from '../consts';\r\nimport { hexstr2str, hexstring2ab, num2hexstring, StringReader } from '../utils';\r\nimport { CurveLabel } from './CurveLabel';\r\nimport { Key, KeyParameters } from './Key';\r\nimport { KeyType } from './KeyType';\r\nimport { Signable } from './signable';\r\nimport { Signature } from './Signature';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Class to manage the public key with some userful functions.\r\n */\r\nexport class PublicKey extends Key {\r\n    /**\r\n     * Creates PublicKey from Hex representation.\r\n     *\r\n     * @param sr String reader\r\n     * @param length Byte length of the serialized object\r\n     *\r\n     */\r\n    static deserializeHex(sr: StringReader, length: number = 33): PublicKey {\r\n        if (length === 33) { // ECDSA\r\n            const algorithm = KeyType.ECDSA;\r\n            const curve = CurveLabel.SECP256R1;\r\n            const pk = sr.read(33);\r\n            return new PublicKey(pk, algorithm, new KeyParameters(curve));\r\n        } else {\r\n            const algorithmHex = parseInt(sr.read(1), 16);\r\n            const curveHex = parseInt(sr.read(1), 16);\r\n            const pk = sr.read(length - 2);\r\n\r\n            return new PublicKey(\r\n                pk,\r\n                KeyType.fromHex(algorithmHex),\r\n                new KeyParameters(CurveLabel.fromHex(curveHex))\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies if the signature was created with private key corresponding to supplied public key\r\n     * and was not tampered with using signature schema.\r\n     *\r\n     * @param msg Hex encoded input data or Signable object\r\n     * @param signature Signature object\r\n     */\r\n    verify(msg: string | Signable, signature: Signature): boolean {\r\n        if (!this.isSchemaSupported(signature.algorithm)) {\r\n            throw new Error('Signature schema does not match key type.');\r\n        }\r\n\r\n        // retrieves content to sign if not provided directly\r\n        if (typeof msg !== 'string') {\r\n            msg = msg.getSignContent();\r\n        }\r\n\r\n        let hash: string;\r\n        if (signature.algorithm === SignatureScheme.SM2withSM3) {\r\n            // library sm.js (SM2withSM3) has implemented hashing as part of verification, therefore it is skipped\r\n            hash = msg;\r\n        } else {\r\n            hash = this.computeHash(msg, signature.algorithm);\r\n        }\r\n\r\n        return this.verifySignature(hash, signature.value, signature.algorithm);\r\n    }\r\n\r\n    /**\r\n     * Serializes public key to Hex representation.\r\n     *\r\n     * Length definition is not included.\r\n     */\r\n    serializeHex(): string {\r\n        let result = '';\r\n        switch (this.algorithm) {\r\n        case KeyType.ECDSA:\r\n            result += this.key;\r\n            break;\r\n        case KeyType.EDDSA:\r\n        case KeyType.SM2:\r\n            result += num2hexstring(this.algorithm.hex);\r\n            result += num2hexstring(this.parameters.curve.hex);\r\n            result += this.key;\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * For internal use.\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     * @param schema Signature scheme to use\r\n     */\r\n    verifySignature(hash: string, signature: string, schema: SignatureScheme): boolean {\r\n        switch (schema) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return this.verifyEcDSASignature(hash, signature);\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return this.verifyEdDSASignature(hash, signature);\r\n        case SignatureScheme.SM2withSM3:\r\n            return this.verifySM2Signature(hash, signature);\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies EcDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     */\r\n    verifyEcDSASignature(hash: string, signature: string): boolean {\r\n        const r = signature.substr(0, 64);\r\n        const s = signature.substr(64, 64);\r\n\r\n        const ec = new elliptic.ec(this.parameters.curve.preset);\r\n        return ec.verify(hash, { r, s }, this.key, 'hex');\r\n    }\r\n\r\n    /**\r\n     * Verifies EdDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     */\r\n    verifyEdDSASignature(hash: string, signature: string): boolean {\r\n        const r = signature.substr(0, 64);\r\n        const s = signature.substr(64, 64);\r\n\r\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n        return eddsa.verify(hash, { r, s }, this.key, 'hex');\r\n    }\r\n\r\n    /**\r\n     * Verifies SM2 signature of message hash.\r\n     *\r\n     * Only default SM2 ID is supported.\r\n     *\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     */\r\n    verifySM2Signature(hash: string, signature: string): boolean {\r\n        const reader = new StringReader(signature);\r\n\r\n        const id = hexstr2str(reader.readNullTerminated());\r\n        if (id !== DEFAULT_SM2_ID && id !== '') {\r\n            throw new Error('Unsupported SM2 id used.');\r\n        }\r\n\r\n        const r = reader.read(32);\r\n        const s = reader.read(32);\r\n\r\n        const keyPair = sm2.SM2KeyPair(this.key);\r\n        return keyPair.verify(hexstring2ab(hash), r, s);\r\n    }\r\n}\r\n\r\n/**\r\n * Public key status enumaration.\r\n */\r\nexport class PublicKeyStatus {\r\n    static values: PublicKeyStatus[] = [];\r\n\r\n    static IN_USE = new PublicKeyStatus('in use');\r\n\r\n    static REVOKED = new PublicKeyStatus('revoked');\r\n\r\n    /**\r\n     * Finds Public key status corresponding to specified label representation.\r\n     *\r\n     * @param label Hex encoded label\r\n     */\r\n    static fromHexLabel(hexLabel: string): PublicKeyStatus {\r\n        const label = hexstr2str(hexLabel);\r\n\r\n        const item = PublicKeyStatus.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n\r\n    constructor(label: string) {\r\n        this.label = label;\r\n\r\n        PublicKeyStatus.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as elliptic from 'elliptic';\r\nimport { sm2 } from 'sm.js';\r\nimport BigInt from '../common/bigInt';\r\nimport { KeyType } from '../crypto/KeyType';\r\nimport { PublicKey } from '../crypto/PublicKey';\r\nimport { ERROR_CODE } from '../error';\r\nimport { num2hexstring, StringReader } from './../utils';\r\nimport opcode from './opcode';\r\n// The sorting rules is as follows:\r\n//    1. if keys have different types, then sorted by the KeyType value.\r\n//    2. else,\r\n//       2.1. ECDSA or SM2:\r\n//           2.1.1. if on different curves, then sorted by the curve label.\r\n//           2.1.2. else if x values are different, then sorted by x.\r\n//           2.1.3. else sorted by y.\r\n//       2.2. EdDSA: sorted by the byte sequence directly.\r\nexport function comparePublicKeys(a: PublicKey, b: PublicKey) {\r\n    if (a.algorithm !== b.algorithm) {\r\n        return a.algorithm.hex - b.algorithm.hex;\r\n    }\r\n    switch (a.algorithm) {\r\n    case KeyType.ECDSA:\r\n        const ec = new elliptic.ec(a.parameters.curve.preset);\r\n        const paKey = ec.keyFromPublic(a.key, 'hex', true);\r\n        const pbKey = ec.keyFromPublic(b.key, 'hex', true);\r\n        const pa = paKey.getPublic();\r\n        const pb = pbKey.getPublic();\r\n        if (pa.getX() !== pb.getX()) {\r\n            return pa.getX() - pb.getX();\r\n        } else {\r\n            return pa.getY() - pb.getY();\r\n        }\r\n    case KeyType.SM2:\r\n        const pka = new sm2.SM2KeyPair();\r\n        const pkb = new sm2.SM2KeyPair();\r\n        pka._pubFromString(a.key);\r\n        pkb._pubFromString(b.key);\r\n        if (pka.getX().toString() !== pkb.getX().toString()) {\r\n            return Number(pka.getX().toString()) - Number(pkb.getX().toString());\r\n        } else {\r\n            return Number(pka.getY().toString()) - Number(pkb.getY().toString());\r\n        }\r\n    case KeyType.EDDSA:\r\n        return Number(a.key) - Number(b.key);\r\n    default:\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function pushOpCode(op: opcode): string {\r\n    return num2hexstring(op);\r\n}\r\n\r\nexport function pushPubKey(pk: PublicKey): string {\r\n    const pkStr = pk.serializeHex();\r\n    return pushBytes(pkStr);\r\n}\r\n\r\nexport function pushBigInt(num: number): string {\r\n    if (num === -1) {\r\n        return num2hexstring(opcode.PUSHM1);\r\n    }\r\n    if (num === 0) {\r\n        return num2hexstring(opcode.PUSH0);\r\n    }\r\n    if (num > 0 && num <= 16) {\r\n        return num2hexstring(opcode.PUSH1 - 1 + num);\r\n    }\r\n    return num2hexstring(num, 8, true);\r\n}\r\n\r\nexport function pushNum(num: number): string {\r\n    if ( num === 0 ) {\r\n        return pushOpCode(opcode.PUSH0);\r\n    } else if ( num <= 16 ) {\r\n        return num2hexstring(num - 1 + opcode.PUSH1);\r\n    }\r\n    const bint = new BigInt(num.toString());\r\n    return pushBytes(bint.toHexstr());\r\n}\r\n\r\nexport function pushBytes(hexstr: string): string {\r\n    let result = '';\r\n    if (hexstr.length === 0) {\r\n        throw new Error('pushBytes error, hexstr is empty.');\r\n    }\r\n    const len = hexstr.length / 2;\r\n    if (len <= opcode.PUSHBYTES75 + 1 - opcode.PUSHBYTES1 ) {\r\n        result += num2hexstring(len + opcode.PUSHBYTES1 - 1);\r\n    } else if (len < 0x100) {\r\n        result += num2hexstring(opcode.PUSHDATA1);\r\n        result += num2hexstring(len);\r\n    } else if (len < 0x10000) {\r\n        result += num2hexstring(opcode.PUSHDATA2);\r\n        result += num2hexstring(len, 2, true);\r\n    } else if (len < 0x100000000) {\r\n        result += num2hexstring(opcode.PUSHDATA4);\r\n        result += num2hexstring(len, 4, true);\r\n    } else {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    result += hexstr;\r\n    return result;\r\n}\r\n\r\nexport function programFromPubKey(pk: PublicKey): string {\r\n    let result = '';\r\n    result += pushPubKey(pk);\r\n    result += pushOpCode(opcode.CHECKSIG);\r\n    return result;\r\n}\r\n\r\nexport function programFromMultiPubKey(pubkeys: PublicKey[], m: number): string {\r\n    const n = pubkeys.length;\r\n    if (!(1 <= m && m <= n && n <= 1024)) {\r\n        throw new Error('Wrong multi-sig param');\r\n    }\r\n    // const pkStrList = pubkeys.map( (p) => p.serializeHex());\r\n    // pkStrList.sort();\r\n\r\n    pubkeys.sort(comparePublicKeys);\r\n\r\n    let result = '';\r\n    result += pushNum(m);\r\n\r\n    for (const pk of pubkeys) {\r\n        result += pushBytes(pk.serializeHex());\r\n    }\r\n    result += pushNum(n);\r\n    result += pushOpCode(opcode.CHECKMULTISIG);\r\n    return result;\r\n}\r\n\r\nexport function programFromParams(sigs: string[]): string {\r\n    let result = '';\r\n    sigs.sort();\r\n    for ( const s of sigs) {\r\n        result += pushBytes(s);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function readOpcode(sr: StringReader) {\r\n    return parseInt(sr.read(1), 16);\r\n}\r\n\r\nexport function readNum(sr: StringReader) {\r\n    let code;\r\n    try {\r\n        code = readOpcode(sr);\r\n    } catch (err) {\r\n        return 0;\r\n    }\r\n    let num = code - opcode.PUSH1 + 1;\r\n    if (code === opcode.PUSH0) {\r\n        readOpcode(sr);\r\n        return 0;\r\n    } else if (1 <= num && num <= 16) {\r\n        readOpcode(sr);\r\n        return num;\r\n    }\r\n    const bint = BigInt.fromHexstr(sr.readNextBytes());\r\n    num = parseInt(bint.value.toString(), 10);\r\n    return num;\r\n}\r\n\r\nexport function readBytes(sr: StringReader) {\r\n    const code = readOpcode(sr);\r\n    let keylen;\r\n    if (code === opcode.PUSHDATA4) {\r\n        keylen = sr.readUint32();\r\n    } else if (code === opcode.PUSHDATA2) {\r\n        keylen = sr.readUint16();\r\n    } else if (code === opcode.PUSHDATA1) {\r\n        keylen = sr.readUint8();\r\n    } else if (code <= opcode.PUSHBYTES75 && code >= opcode.PUSHBYTES1) {\r\n        keylen = code - opcode.PUSHBYTES1 + 1;\r\n    } else {\r\n        throw new Error('unexpected opcode: ' + code);\r\n    }\r\n    return sr.read(keylen);\r\n}\r\n\r\nexport function readPubKey(sr: StringReader) {\r\n    const pkStr = sr.readNextBytes();\r\n    return PublicKey.deserializeHex(new StringReader(pkStr));\r\n}\r\n\r\nexport function getParamsFromProgram(hexstr: string): string[] {\r\n    const sigs = [];\r\n    const sr = new StringReader(hexstr);\r\n    while (!sr.isEmpty()) {\r\n        sigs.push(readBytes(sr));\r\n    }\r\n    return sigs;\r\n}\r\n\r\nexport class ProgramInfo {\r\n    M: number;\r\n    pubKeys: PublicKey[];\r\n}\r\nexport function getProgramInfo(hexstr: string): ProgramInfo {\r\n    const info = new ProgramInfo();\r\n    const end = parseInt(hexstr.substr(-2, 2), 16);\r\n    if (end === opcode.CHECKSIG) {\r\n        const sr = new StringReader(hexstr);\r\n        const pk = readPubKey(sr);\r\n        info.M = 1;\r\n        info.pubKeys = [pk];\r\n        return info;\r\n    } else if (end === opcode.CHECKMULTISIG) {\r\n        const sr = new StringReader(hexstr);\r\n        const m = parseInt(sr.read(1), 16) - opcode.PUSH1 + 1;\r\n        const n = parseInt(hexstr.substr(-4, 2), 16) - opcode.PUSH1 + 1;\r\n        info.M = m;\r\n        info.pubKeys = [];\r\n        for (let i = 0; i < n; i++) {\r\n            const key = readPubKey(sr);\r\n            info.pubKeys.push(key);\r\n        }\r\n        // const n = readNum(sr);\r\n        return info;\r\n    } else {\r\n        throw new Error('Unsupported program.');\r\n    }\r\n}\r\n\r\nexport const pushHexString = (param: string) => {\r\n    let result = '';\r\n    const len = param.length / 2;\r\n    if (len <= opcode.PUSHBYTES75) {\r\n        result += num2hexstring(len);\r\n    } else if (len < 0x100) {\r\n        result += num2hexstring(opcode.PUSHDATA1);\r\n        result += num2hexstring(len);\r\n    } else if (len < 0x10000) {\r\n        result += num2hexstring(opcode.PUSHDATA2);\r\n        result += num2hexstring(len, 2, true);\r\n    } else {\r\n        result += num2hexstring(opcode.PUSHDATA4);\r\n        result += num2hexstring(len, 4, true);\r\n    }\r\n    result += param;\r\n    return result;\r\n};\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as base58 from 'base-58';\r\nimport * as cryptoJS from 'crypto-js';\r\nimport { ADDR_VERSION } from '../consts';\r\nimport { ERROR_CODE } from '../error';\r\nimport opcode from '../transaction/opcode';\r\nimport { comparePublicKeys, programFromPubKey, pushBigInt } from '../transaction/program';\r\nimport { pushHexString } from '../transaction/program';\r\nimport { ab2hexstring, hash160, num2hexstring, sha256, StringReader } from '../utils';\r\nimport { reverseHex } from './../utils';\r\nimport { PublicKey } from './PublicKey';\r\n\r\n/**\r\n * Representation of Address.\r\n *\r\n * There are 4 types of address:\r\n * 1. Public key based\r\n * 2. Multi public key based (m, n)\r\n * 3. Contract based\r\n * 4. TST ID based\r\n *\r\n * The value is stored as base58 or hex encoded, therefore always use\r\n * toBase58() or serialize() according to requirements.\r\n */\r\nexport class Address {\r\n    static deserialize(sr: StringReader): Address {\r\n        return new Address(sr.read(20));\r\n    }\r\n    /**\r\n     * Generates public key based address.\r\n     *\r\n     * @param publicKey Public key to use\r\n     */\r\n    static fromPubKey(publicKey: PublicKey): Address {\r\n        const program = programFromPubKey(publicKey);\r\n        // const program = publicKey.key + num2hexstring(opcode.CHECKSIG);\r\n        const programHash = hash160(program);\r\n        return new Address(programHash);\r\n    }\r\n\r\n    /**\r\n     * Generates identity based address.\r\n     * @param tstId TST ID in the form did:tst:AXmQDzzvpEtPkNwBEFsREzApTTDZFW6frD\r\n     */\r\n    static fromTstid(tstId: string): Address {\r\n        const address = tstId.substr(8);\r\n        return new Address(address);\r\n    }\r\n\r\n    /**\r\n     * Generates address from smart contract code.\r\n     *\r\n     * @param vmCode Hex encoded smart contract code\r\n     */\r\n    static fromVmCode(vmCode: string): Address {\r\n        const programHash = hash160(vmCode);\r\n        // programHash = num2hexstring(vmType) + programHash.substring(2);\r\n        return new Address(programHash);\r\n    }\r\n\r\n    /**\r\n     * Generates (m, n) threshold address.\r\n     *\r\n     * m - threshold\r\n     * n - total number of public keys\r\n     *\r\n     * @param m The threshold\r\n     * @param publicKeys Public key\r\n     */\r\n    static fromMultiPubKeys(m: number, publicKeys: PublicKey[]): Address {\r\n        const n = publicKeys.length;\r\n\r\n        if (m <= 0 || m > n || n > 24 ) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n\r\n        // const pkHexStrs = publicKeys.map((p) => p.serializeHex());\r\n        // pkHexStrs.sort();\r\n        publicKeys.sort(comparePublicKeys);\r\n        let result = '';\r\n        result += pushBigInt(m);\r\n        for (const s of publicKeys) {\r\n            result += pushHexString(s.serializeHex());\r\n        }\r\n        result += pushBigInt(n);\r\n        result += num2hexstring(opcode.CHECKMULTISIG);\r\n        const programHash = hash160(result);\r\n        return new Address(programHash);\r\n    }\r\n\r\n    /**\r\n     * Deterministicaly generates TST ID from this public key.\r\n     */\r\n    static generateTstid(publicKey: PublicKey): string {\r\n        const address = Address.fromPubKey(publicKey);\r\n        const tstId = 'did:tst:' + address.toBase58();\r\n\r\n        return tstId;\r\n    }\r\n\r\n    /**\r\n     * Base58 or Hex encoded address\r\n     */\r\n    value: string;\r\n\r\n    constructor(value: string) {\r\n        if (value.length === 40 || value.length === 34) {\r\n            this.value = value;\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets Base58 encoded representation of the address.\r\n     */\r\n    toBase58() {\r\n        if (this.value.length === 34) {\r\n            return this.value;\r\n        } else {\r\n            return hexToBase58(this.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets Hex encoded representation of the address.\r\n     */\r\n    toHexString() {\r\n        let val;\r\n        if (this.value.length === 40) {\r\n            val = this.value;\r\n        } else {\r\n            val = base58ToHex(this.value);\r\n        }\r\n        return reverseHex(val);\r\n    }\r\n\r\n    serialize() {\r\n        if (this.value.length === 40) {\r\n            return this.value;\r\n        } else {\r\n            return base58ToHex(this.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes the salt from address for decrypt.\r\n     */\r\n    getB58Checksum() {\r\n        const address = this.toBase58();\r\n        const hash = cryptoJS.SHA256(address).toString();\r\n        const hash2 = sha256(hash);\r\n        return hash2.slice(0, 8);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param programhash\r\n */\r\nfunction hexToBase58(hexEncoded: string): string {\r\n    const data = ADDR_VERSION + hexEncoded;\r\n\r\n    const hash = sha256(data);\r\n    const hash2 = sha256(hash);\r\n    const checksum = hash2.slice(0, 8);\r\n\r\n    const datas = data + checksum;\r\n\r\n    return base58.encode(new Buffer(datas, 'hex'));\r\n}\r\n\r\nfunction base58ToHex(base58Encoded: string) {\r\n    const decoded = base58.decode(base58Encoded);\r\n    const hexEncoded = ab2hexstring(decoded).substr(2, 40);\r\n\r\n    if (base58Encoded !== hexToBase58(hexEncoded)) {\r\n        throw new Error('[addressToU160] decode encoded verify failed');\r\n    }\r\n    return hexEncoded;\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as base58 from 'base-58';\r\nimport { createCipheriv, createDecipheriv } from 'crypto';\r\nimport * as CryptoJS from 'crypto-js';\r\nimport * as asyncScrypt from 'scrypt-async';\r\nimport { DEFAULT_SCRYPT, OEP_FLAG, OEP_HEADER } from './consts';\r\nimport { Address } from './crypto/address';\r\nimport { PublicKey } from './crypto/PublicKey';\r\nimport { ERROR_CODE } from './error';\r\nimport { ab2hexstring, hexstring2ab, hexXor, isHexString, StringReader } from './utils';\r\n\r\n/**\r\n * Decribtes the structure of params for scrypt\r\n */\r\nexport interface ScryptParams {\r\n    cost: number;\r\n    blockSize: number;\r\n    parallel: number;\r\n    size: number;\r\n}\r\n\r\n/**\r\n * Synchronious call to scrypt-async-js.\r\n *\r\n * @param keyphrase Keyphrase to use\r\n * @param addressHash Hex encoded address\r\n * @param params Scrypt params\r\n */\r\nfunction scrypt(keyphrase: string, addressHash: string, params: ScryptParams) {\r\n    let derived: number[] = [];\r\n\r\n    asyncScrypt(\r\n        keyphrase.normalize('NFC'),\r\n        hexstring2ab(addressHash),\r\n        {\r\n            N: params.cost,\r\n            r: params.blockSize,\r\n            p: params.parallel,\r\n            dkLen: params.size\r\n        },\r\n        (result: string | number[]) => {\r\n            derived = result as number[];\r\n        }\r\n    );\r\n    return new Buffer(derived);\r\n}\r\n\r\n/**\r\n * Encrypt with aes-ctr\r\n */\r\nexport function encryptWithCtr(\r\n    privateKey: string,\r\n    publicKeyEncoded: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    // let privateKey = PrivateKey.deserializeWIF(wifKey);\r\n    // console.log( \"privateKey: \", privateKey );\r\n\r\n    // console.log( \"publickeyEncode: \", publicKey );\r\n\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log( \"address: \", address );\r\n\r\n    const addresshash = address.getB58Checksum();\r\n    // console.log( \"addresshash: \", addresshash );\r\n\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 32);\r\n    const derived2 = derived.slice(64);\r\n    const iv = CryptoJS.enc.Hex.parse(derived1);\r\n\r\n    // console.log('decrypt derived: ' + derived)\r\n    // console.log('decrypt iv: ' + iv)\r\n    // console.log('decrypt derived2: ' + derived2)\r\n\r\n    // AES Encrypt\r\n    // let xor = hexXor(privateKey, derived1);\r\n    const encrypted = CryptoJS.AES.encrypt(\r\n        CryptoJS.enc.Hex.parse(privateKey),\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\r\n    );\r\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\r\n\r\n    // Construct\r\n    // let assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\r\n    const assembled = encrypted.ciphertext.toString();\r\n\r\n    // console.log( \"enc assembled: \", assembled );\r\n\r\n    // return Bs58check.encode(Buffer.from(assembled, 'hex'));\r\n    return new Buffer(assembled, 'hex').toString('base64');\r\n}\r\n\r\n/**\r\n * Decrypt with aes-ctr\r\n * @param encryptedKey encrypted private key\r\n * @param keyphrase user's password to encrypt private key\r\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\r\n */\r\nexport function decryptWithCtr(\r\n    encryptedKey: string,\r\n    keyphrase: string,\r\n    saltOrAddress: string | Address,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    // let assembled = ab2hexstring(Bs58check.decode(encryptedKey));\r\n    const encrypted = Buffer.from(encryptedKey, 'base64').toString('hex');\r\n\r\n    // tslint:disable-next-line:no-console\r\n    // console.log('dec assembled: ', encrypted);\r\n\r\n    let salt = '';\r\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\r\n        salt = saltOrAddress;\r\n    } else if (saltOrAddress instanceof Address) {\r\n        salt = saltOrAddress.getB58Checksum();\r\n    } else {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n\r\n    // let addressHash = assembled.substr(0, 8);\r\n    // console.log( \"dec addressHash: \", addressHash );\r\n\r\n    // let encrypted = assembled.substr(8);\r\n    // console.log( \"encrypted: \", encrypted );\r\n\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, salt, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 32);\r\n    const derived2 = derived.slice(64);\r\n    // console.log('decrypt derived: ' + derived)\r\n\r\n    const iv = CryptoJS.enc.Hex.parse(derived1);\r\n\r\n    // AES Decrypt\r\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\r\n    const decrypted = CryptoJS.AES.decrypt(\r\n        ciphertexts,\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\r\n    );\r\n    // console.log( \"decrypted: \", decrypted.toString() );\r\n\r\n    // Check PrivateKey\r\n    // ----------------------------------------------------------\r\n\r\n    // PrivateKey\r\n    // let privateKey = hexXor(decrypted.toString(), derived1);\r\n    const privateKey = decrypted.toString();\r\n    // console.log( \"privateKey: \", privateKey );\r\n    return privateKey;\r\n}\r\n\r\n/**\r\n * Checks if the password supplied to decrypt was correct.\r\n *\r\n * This method was taken out from decrypt, because it needs to create public key from private key\r\n * and it needs to be supplied from outside.\r\n *\r\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\r\n * @param publicKeyEncoded Public key from decrypted key\r\n */\r\nexport function checkCtrDecrypted(saltOrAddress: string | Address, publicKeyEncoded: string): void {\r\n    // const assembled = ab2hexstring(Bs58check.decode(encryptedKey));\r\n    // let assembled = Buffer.from(encryptedKey, 'base64').toString('hex')\r\n\r\n    // console.log( \"assembled: \", assembled );\r\n\r\n    // const addressHash = assembled.substr(0, 8);\r\n    // console.log( \"addressHash: \", addressHash );\r\n\r\n    // console.log('publicKey', publicKey)\r\n    let salt = '';\r\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\r\n        salt = saltOrAddress;\r\n    } else if (saltOrAddress instanceof Address) {\r\n        salt = saltOrAddress.getB58Checksum();\r\n    } else {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    // Address\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log('address 2', address)\r\n\r\n    // AddressHash\r\n    const saltNew = address.getB58Checksum();\r\n\r\n    if (saltNew !== salt) {\r\n\r\n        // tslint:disable-next-line:no-console\r\n        console.log('keyphrase error.');\r\n\r\n        throw ERROR_CODE.Decrypto_ERROR;\r\n    }\r\n\r\n    // WIF\r\n    // let wifKey = privateKey.serializeWIF();\r\n    // console.log( \"wifKey: \", wifKey );\r\n}\r\n\r\n/**\r\n * Encrypt with aes-ecb\r\n */\r\nexport function encryptWithEcb(\r\n    privateKey: string,\r\n    publicKeyEncoded: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log( \"address: \", address );\r\n\r\n    const addresshash = address.getB58Checksum();\r\n    // console.log( \"addresshash: \", addresshash );\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 64);\r\n    const derived2 = derived.slice(64);\r\n\r\n    // AES Encrypt\r\n    const xor = hexXor(privateKey, derived1);\r\n    const encrypted = CryptoJS.AES.encrypt(\r\n        CryptoJS.enc.Hex.parse(xor),\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\r\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\r\n    // Construct\r\n    const assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\r\n    // console.log( \"assembled: \", assembled );\r\n    return base58.encode(Buffer.from(assembled, 'hex'));\r\n}\r\n\r\n/**\r\n * Decrypt with aes-ecb\r\n */\r\nexport function decryptWithEcb(\r\n    encryptedKey: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\r\n    // console.log( \"assembled: \", assembled );\r\n    const addressHash = assembled.substr(6, 8);\r\n    // console.log( \"addressHash: \", addressHash );\r\n    const encrypted = assembled.substr(-64);\r\n    // console.log( \"encrypted: \", encrypted );\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, addressHash, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 64);\r\n    const derived2 = derived.slice(64);\r\n\r\n    // AES Decrypt\r\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\r\n    const decrypted = CryptoJS.AES.decrypt(\r\n        ciphertexts,\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\r\n    // console.log( \"decrypted: \", decrypted.toString() );\r\n    // Check PrivateKey\r\n    // ----------------------------------------------------------\r\n    // PrivateKey\r\n    const privateKey = hexXor(decrypted.toString(), derived1);\r\n    // console.log( \"privateKey: \", privateKey );\r\n    return privateKey;\r\n}\r\n\r\n/**\r\n * Checks if the password supplied to decrypt was correct.\r\n *\r\n * This method was taken out from decrypt, because it needs to create public key from private key\r\n * and it needs to be supplied from outside.\r\n *\r\n * @param encryptedKey Original encrypted key\r\n * @param decryptedKey Decrypted key with decrypt\r\n * @param publicKeyEncoded Public key from decrypted key\r\n */\r\nexport function checkEcbDecrypted(encryptedKey: string, decryptedKey: string, publicKeyEncoded: string): void {\r\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\r\n    // console.log( \"assembled: \", assembled );\r\n    const addressHash = assembled.substr(6, 8);\r\n\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    // Address\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log('address', address)\r\n    // AddressHash\r\n    const addressHashNew = address.getB58Checksum();\r\n\r\n    if (addressHashNew !== addressHash) {\r\n        // tslint:disable-next-line:no-console\r\n        console.log('keyphrase error.');\r\n        throw ERROR_CODE.Decrypto_ERROR;\r\n    }\r\n}\r\n\r\n/**\r\n * Encrypt with aes-gcm-256\r\n * This is the default encryption algorithm for private key\r\n * @param privateKey Private key to encpryt with\r\n * @param address Adderss to encrypt with\r\n * @param salt Salt to encrypt with\r\n * @param keyphrase User's password\r\n * @param scryptParams Optional params to encrypt\r\n */\r\nexport function encryptWithGcm(\r\n    privateKey: string,\r\n    address: Address,\r\n    salt: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n) {\r\n    if (!isHexString(privateKey)) {\r\n        throw new Error(ERROR_CODE.INVALID_PARAMS + ', Invalid private key');\r\n    }\r\n    const derived = scrypt(keyphrase, salt, scryptParams);\r\n    const derived1 = derived.slice(0, 12);\r\n    const derived2 = derived.slice(32);\r\n    const key = derived2;\r\n    const iv = derived1;\r\n    const aad = new Buffer(address.toBase58());\r\n    const cipher = createCipheriv('aes-256-gcm', key, iv);\r\n    cipher.setAAD(aad);\r\n    const plainText = Buffer.from(privateKey, 'hex');\r\n    let ciphertext = cipher.update(plainText);\r\n    // ciphertext += cipher.final();\r\n    const final = cipher.final();\r\n    const authTag = cipher.getAuthTag();\r\n    ciphertext = Buffer.concat([ciphertext, final]);\r\n\r\n    const result = Buffer.concat([ciphertext, authTag]);\r\n    return result.toString('base64');\r\n}\r\n\r\n/**\r\n * Decrypt with aes-256-gcm\r\n * @param encrypted Encrypted private key\r\n * @param address Address to decrypt with\r\n * @param salt Salt to decrypt with\r\n * @param keyphrase User's password\r\n * @param scryptParams Optioanl params to decrypt with\r\n */\r\nexport function decryptWithGcm(\r\n    // ciphertext: string,\r\n    // authTag: string,\r\n    encrypted: string,\r\n    address: Address,\r\n    salt: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n) {\r\n    if (salt.length !== 32) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const result = Buffer.from(encrypted, 'base64');\r\n    const ciphertext = result.slice(0, result.length - 16);\r\n    const authTag = result.slice(result.length - 16);\r\n    const derived = scrypt(keyphrase, salt, scryptParams);\r\n    const derived1 = derived.slice(0, 12);\r\n    const derived2 = derived.slice(32);\r\n    const key = derived2;\r\n    const iv = derived1;\r\n    const aad = new Buffer(address.toBase58());\r\n    // const auth = new Buffer(authTag, 'hex');\r\n    const decipher = createDecipheriv('aes-256-gcm', key, iv);\r\n    decipher.setAAD(aad);\r\n    decipher.setAuthTag(authTag);\r\n    let decrypted = decipher.update(ciphertext).toString('hex');\r\n\r\n    try {\r\n        decrypted += decipher.final().toString('hex');\r\n    } catch (err) {\r\n        throw ERROR_CODE.Decrypto_ERROR;\r\n    }\r\n    return decrypted;\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as b64 from 'base64-url';\r\nimport { num2hexstring, StringReader } from '../utils';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Signature generated by signing data with Private Key.\r\n */\r\nexport class Signature {\r\n    static deserializeJWT(encoded: string, algorithm: SignatureScheme, publicKeyId: string): Signature {\r\n        const decoded = b64.decode(encoded, 'hex');\r\n\r\n        return new Signature(\r\n        algorithm,\r\n        decoded,\r\n        publicKeyId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Deserializes PgpSignature to Signature.\r\n     * @param pgpSignature PgpSignature\r\n     */\r\n    static deserializePgp(pgpSignature: PgpSignature): Signature {\r\n        const value = new Buffer(pgpSignature.Value, 'base64').toString('hex');\r\n        const deserialzedValue = Signature.deserializeHex(value).value;\r\n        return new Signature(\r\n        SignatureScheme.fromLabel(pgpSignature.Algorithm),\r\n            deserialzedValue\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Deserializes hex representation to Signature\r\n     * @param data hex string\r\n     */\r\n    static deserializeHex(data: string): Signature {\r\n        if (data.length < 4) {\r\n            throw new Error('Invalid params.');\r\n        }\r\n        const sr = new StringReader(data);\r\n        const scheme = parseInt(sr.read(1), 16);\r\n        const sigScheme = SignatureScheme.fromHex(scheme);\r\n        const value = data.substr(2);\r\n        const sig = new Signature(sigScheme, value);\r\n        return sig;\r\n    }\r\n\r\n    algorithm: SignatureScheme;\r\n    value: string;\r\n\r\n    /**\r\n     * Public key Id used for create this signature.\r\n     *\r\n     */\r\n    publicKeyId?: string;\r\n\r\n    constructor(algorithm: SignatureScheme, value: string, publicKeyId?: string) {\r\n        this.algorithm = algorithm;\r\n        this.value = value;\r\n        this.publicKeyId = publicKeyId;\r\n    }\r\n\r\n    /**\r\n     * Serializes signature to Hex representation.\r\n     * For transfer to java backend and verify it.\r\n     */\r\n    serializeHex(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.algorithm.hex);\r\n        result += this.value;\r\n        return result;\r\n\r\n    }\r\n\r\n    /**\r\n     * Serializes signature to PGP representation with optional PublicKeyId.\r\n     *\r\n     * @param keyId Whole Public Key Id in the form <TSTID>#keys-<id>\r\n     */\r\n    serializePgp(keyId?: string): PgpSignature {\r\n        const encoded = new Buffer(this.serializeHex(), 'hex').toString('base64');\r\n        return {\r\n            PublicKeyId: keyId,\r\n            Format: 'pgp',\r\n            Value: encoded,\r\n            Algorithm: this.algorithm.label\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Serializes signature to base64url format.\r\n     */\r\n    serializeJWT(): string {\r\n        return b64.encode(this.value, 'hex');\r\n    }\r\n}\r\n\r\n/**\r\n * PGP representation of the signature with embedded KeyId\r\n */\r\nexport interface PgpSignature {\r\n    PublicKeyId?: string;\r\n    Format: 'pgp';\r\n    Algorithm: string;\r\n    Value: string;\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as bip39 from 'bip39';\r\nimport * as elliptic from 'elliptic';\r\nimport * as secureRandom from 'secure-random';\r\nimport { sm2 } from 'sm.js';\r\nimport * as wif from 'wif';\r\nimport { DEFAULT_ALGORITHM, DEFAULT_SM2_ID, TST_BIP44_PATH } from '../consts';\r\nimport { ERROR_CODE } from '../error';\r\nimport { decryptWithGcm, encryptWithGcm, ScryptParams } from '../scrypt';\r\nimport { ab2hexstring, hexstring2ab, isBase64, str2hexstr } from '../utils';\r\nimport { Address } from './address';\r\nimport { Key, KeyParameters } from './Key';\r\nimport { KeyType } from './KeyType';\r\nimport { PublicKey } from './PublicKey';\r\nimport { Signable } from './signable';\r\nimport { Signature } from './Signature';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst HDKey = require('./../hdkey-secp256r1/hdkey.js');\r\n\r\nexport class PrivateKey extends Key {\r\n  /**\r\n   * Generates random Private key using supplied Key type and parameters.\r\n   *\r\n   * If no Key type or parameters is supplied, default SDK key type with default parameters will be used.\r\n   *\r\n   * @param keyType The key type\r\n   * @param parameters The parameters for the key type\r\n   */\r\n    static random(keyType?: KeyType, parameters?: KeyParameters): PrivateKey {\r\n        if (keyType === undefined) {\r\n            keyType = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\r\n        }\r\n\r\n        if (parameters === undefined) {\r\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\r\n        }\r\n\r\n        return new PrivateKey(ab2hexstring(secureRandom(32)), keyType, parameters);\r\n    }\r\n\r\n    /**\r\n     * Creates PrivateKey from TWallet Import Format (WIF) representation.\r\n     *\r\n     * @param wifkey WIF private key representation\r\n     *\r\n     */\r\n    static deserializeWIF(wifkey: string): PrivateKey {\r\n        const key = ab2hexstring(wif.decode(wifkey, 128).privateKey);\r\n        return new PrivateKey(key);\r\n    }\r\n\r\n    /**\r\n     * Creates PrivateKey from mnemonic according to BIP39 protocol.\r\n     *\r\n     * @param mnemonic Space separated list of words\r\n     *\r\n     */\r\n    static generateFromMnemonic(mnemonic: string, derivePath: string = TST_BIP44_PATH): PrivateKey {\r\n        if (mnemonic.split(' ').length < 12) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\r\n\r\n        // generate privateKey\r\n        // const pri = seed.substr(0, 64);\r\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\r\n        const pri = hdkey.derive(derivePath);\r\n        const key = Buffer.from(pri.privateKey).toString('hex');\r\n        const privateKey = new PrivateKey(key);\r\n        return privateKey;\r\n    }\r\n\r\n    /**\r\n     * Signs the data with supplied private key using signature schema.\r\n     *\r\n     * If the signature schema is not provided, the default schema for this key type is used.\r\n     *\r\n     * This method is not suitable, if external keys (Ledger, TPM, ...) support is required.\r\n     *\r\n     * @param msg Hex encoded input data or Signable object\r\n     * @param schema Signing schema to use\r\n     * @param publicKeyId Id of public key\r\n     */\r\n    sign(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Signature {\r\n        if (schema === undefined) {\r\n            schema = this.algorithm.defaultSchema;\r\n        }\r\n\r\n        if (!this.isSchemaSupported(schema)) {\r\n            throw new Error('Signature schema does not match key type.');\r\n        }\r\n\r\n        // retrieves content to sign if not provided directly\r\n        if (typeof msg !== 'string') {\r\n            msg = msg.getSignContent();\r\n        }\r\n\r\n        let hash: string;\r\n        if (schema === SignatureScheme.SM2withSM3) {\r\n            // library sm.js (SM2withSM3) has implemented hashing as part of signing, therefore it is skipped\r\n            hash = msg;\r\n        } else {\r\n            hash = this.computeHash(msg, schema);\r\n        }\r\n\r\n        const signed = this.computeSignature(hash, schema);\r\n        return new Signature(schema, signed, publicKeyId);\r\n    }\r\n\r\n    /**\r\n     * Asynchroniously signs the data with supplied private key using signature schema.\r\n     *\r\n     * If the signature schema is not provided, the default schema for this key type is used.\r\n     *\r\n     * This method is suitable, if external keys (Ledger, TPM, ...) support is required.\r\n     *\r\n     * @param msg Hex encoded input data or Signable object\r\n     * @param schema Signing schema to use\r\n     * @param publicKeyId Id of public key\r\n     */\r\n    async signAsync(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Promise<Signature> {\r\n        return this.sign(msg, schema, publicKeyId);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key.\r\n     */\r\n    getPublicKey(): PublicKey {\r\n        switch (this.algorithm) {\r\n        case KeyType.ECDSA:\r\n            return this.getEcDSAPublicKey();\r\n        case KeyType.EDDSA:\r\n            return this.getEdDSAPublicKey();\r\n        case KeyType.SM2:\r\n            return this.getSM2PublicKey();\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decrypts encrypted private key with supplied password.\r\n     *\r\n     * @param keyphrase Password to decrypt with\r\n     * @param address For aad in decryption\r\n     * @param 16 secure random bytes\r\n     * @param params Optional Scrypt params\r\n     */\r\n    decrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\r\n        // const decrypted = decrypt(this.key, keyphrase, checksum, params);\r\n        if (salt.length === 24 && isBase64(salt)) {\r\n            salt = Buffer.from(salt, 'base64').toString('hex');\r\n        }\r\n        const decrypted = decryptWithGcm(this.key, address, salt, keyphrase, params);\r\n        const decryptedKey = new PrivateKey(decrypted, this.algorithm, this.parameters);\r\n        // checkDecrypted(checksum, decryptedKey.getPublicKey().serializeHex());\r\n        const pk = decryptedKey.getPublicKey();\r\n        const addrTmp = Address.fromPubKey(pk);\r\n        if (addrTmp.toBase58() !== address.toBase58()) {\r\n            throw ERROR_CODE.Decrypto_ERROR;\r\n        }\r\n        return decryptedKey;\r\n    }\r\n\r\n    /**\r\n     * Encrypts private key with supplied password.\r\n     *\r\n     * @param keyphrase Password to encrypt with\r\n     * @param address For aad in encryption\r\n     * @param salt 16 secure random bytes\r\n     * @param params Optional Scrypt params\r\n     */\r\n    encrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\r\n        // add address check\r\n        const publicKey = this.getPublicKey();\r\n        const addr = Address.fromPubKey(publicKey).toBase58();\r\n        if (addr !== address.toBase58()) {\r\n            throw ERROR_CODE.INVALID_ADDR;\r\n        }\r\n        const encrypted = encryptWithGcm(this.key, address, salt, keyphrase, params);\r\n        return new PrivateKey(encrypted, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key using EcDSA algorithm.\r\n     */\r\n    getEcDSAPublicKey(): PublicKey {\r\n        const ec = new elliptic.ec(this.parameters.curve.preset);\r\n        const keyPair = ec.keyFromPrivate(this.key, 'hex');\r\n        const pk = keyPair.getPublic(true, 'hex');\r\n\r\n        return new PublicKey(pk, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key using EdDSA algorithm.\r\n     */\r\n    getEdDSAPublicKey(): PublicKey {\r\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n        const keyPair = eddsa.keyFromSecret(this.key, 'hex');\r\n        const pk = keyPair.getPublic(true, 'hex');\r\n\r\n        return new PublicKey(pk, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key using SM2 algorithm.\r\n     */\r\n    getSM2PublicKey(): PublicKey {\r\n        const keyPair = sm2.SM2KeyPair(null, this.key);\r\n        const pk = keyPair.pubToString('compress');\r\n\r\n        return new PublicKey(pk, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Computes signature of message hash using specified signature schema.\r\n     *\r\n     * @param hash Message hash\r\n     * @param schema Signature schema to use\r\n     */\r\n    computeSignature(hash: string, schema: SignatureScheme): string {\r\n        switch (schema) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return this.computeEcDSASignature(hash);\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return this.computeEdDSASignature(hash);\r\n        case SignatureScheme.SM2withSM3:\r\n            return this.computeSM2Signature(hash);\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes EcDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     */\r\n    computeEcDSASignature(hash: string): string {\r\n        const ec = new elliptic.ec(this.parameters.curve.preset);\r\n        const signed = ec.sign(hash, this.key, { canonical: true });\r\n        return Buffer.concat([\r\n            signed.r.toArrayLike(Buffer, 'be', 32),\r\n            signed.s.toArrayLike(Buffer, 'be', 32)\r\n        ]).toString('hex');\r\n    }\r\n\r\n    /**\r\n     * Computes EdDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     */\r\n    computeEdDSASignature(hash: string): string {\r\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n        const signed = eddsa.sign(hash, this.key);\r\n        return signed.toHex().toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Computes SM2 signature of message hash.\r\n     *\r\n     * Only default SM2 ID is supported.\r\n     *\r\n     * @param hash Message hash\r\n     */\r\n    computeSM2Signature(hash: string): string {\r\n        const keyPair = sm2.SM2KeyPair(null, this.key);\r\n        const signed = keyPair.sign(hexstring2ab(hash));\r\n\r\n        const id = DEFAULT_SM2_ID;\r\n\r\n        return str2hexstr(id + '\\0') + signed.r + signed.s;\r\n    }\r\n\r\n    /**\r\n     * Gets TWallet Import Format (WIF) representation of the PrivateKey.\r\n     *\r\n     */\r\n    serializeWIF(): string {\r\n        return wif.encode(128, Buffer.from(this.key, 'hex'), true);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { JsonKey, KeyParameters } from './Key';\r\nimport { KeyType } from './KeyType';\r\nimport { PrivateKey } from './PrivateKey';\r\n\r\n/**\r\n * Interface for Key deserializers\r\n */\r\nexport interface KeyDeserializer {\r\n    getType(): string;\r\n    deserialize(json: JsonKey): PrivateKey;\r\n}\r\n\r\n/**\r\n * Default private key deserializer.\r\n */\r\nexport class DefaultKeyDeserializer implements KeyDeserializer {\r\n    getType(): string {\r\n        return '';\r\n    }\r\n\r\n    deserialize(json: JsonKey): PrivateKey {\r\n        if (json.key != null) {\r\n            return new PrivateKey(\r\n                json.key,\r\n                KeyType.fromLabel(json.algorithm),\r\n                KeyParameters.deserializeJson(json.parameters)\r\n            );\r\n        } else {\r\n            throw new Error('Unsupported Key type.');\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Registered key deserializers\r\n */\r\nconst keyDeserializers: KeyDeserializer[] = [];\r\nconst defaultKeyDeserializer = new DefaultKeyDeserializer();\r\n\r\n/**\r\n * Registers new external deserializer for private keys.\r\n *\r\n * @param deserializer Deserializer instance\r\n */\r\nexport function registerKeyDeserializer(deserializer: KeyDeserializer) {\r\n    keyDeserializers.push(deserializer);\r\n}\r\n\r\n/**\r\n * Creates PrivateKey from Json representation.\r\n *\r\n * @param json Json private key representation\r\n *\r\n */\r\nexport function deserializeFromJson(json: JsonKey): PrivateKey {\r\n    if (json.external == null) {\r\n        return defaultKeyDeserializer.deserialize(json);\r\n    } else {\r\n        for (const deserializer of keyDeserializers) {\r\n            if (deserializer.getType() === json.external.type) {\r\n                return deserializer.deserialize(json);\r\n            }\r\n        }\r\n\r\n        throw new Error('Unsupported Key type.');\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nexport enum ParameterType  {\r\n    Boolean = 'Boolean',\r\n    Integer = 'Integer',\r\n    ByteArray = 'ByteArray',\r\n    Interface = 'Interface',\r\n    Array = 'Array',\r\n    Struct = 'Struct',\r\n    Map = 'Map',\r\n    String  = 'String',\r\n    Int = 'Integer',\r\n    Long = 'Long', // value should be string\r\n    IntArray = 'IntArray',\r\n    LongArray = 'LongArray',\r\n    Address = 'Address'\r\n}\r\n\r\nexport enum ParameterTypeVal {\r\n    ByteArray = 0x00,\r\n    Boolean = 0x01,\r\n    Integer = 0x02,\r\n    Interface = 0x40,\r\n    Array = 0x80,\r\n    Struct = 0x81,\r\n    Map = 0x82\r\n}\r\n\r\n/**\r\n * Decribes the parameter.\r\n */\r\nexport class Parameter {\r\n    public name: string;\r\n    public type: ParameterType;\r\n    public value: any;\r\n    constructor(name: string, type: ParameterType, value: any) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getType(): ParameterType {\r\n        return this.type;\r\n    }\r\n\r\n    getValue(): any {\r\n        return this.value;\r\n    }\r\n\r\n    setValue(value: any): boolean {\r\n        if (value.type === this.type && value.name === this.name && value.value != null) {\r\n            this.value = value.value;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as CTX from 'milagro-crypto-js';\r\nimport * as utils from '../utils';\r\n\r\n/**\r\n * Issuer\r\n *  Issuer in Anonymous Credential\r\n */\r\nexport class Issuer {\r\n\r\n    sk: SecretKey;\r\n    pk: IssuerPublicKey;\r\n    // AttrMap: Map<string, number>;\r\n    AttributeName: string[];\r\n\r\n    param: CryptoSuite;\r\n\r\n    constructor(curve: string) {\r\n        this.param = new CryptoSuite(curve);\r\n        this.sk = new SecretKey(this.param);\r\n    }\r\n\r\n    /* GenerateSk():SecretKey\r\n     *  generate a random secret key\r\n     */\r\n    GenerateSk(): SecretKey {\r\n        this.sk.Rand();\r\n        return this.sk;\r\n    }\r\n\r\n    /* GenerateKeyPair()\r\n     *  generate a random secret key\r\n     */\r\n    GenerateKeyPair() {\r\n        this.sk = SecretKey.GenerateSk(this.param);\r\n        this.pk = this.sk.GenerateIssuerPublicKey();\r\n    }\r\n\r\n    /* SetAttributeSet(AttributeName:string[])\r\n     *  generate a random secret key\r\n     */\r\n    SetAttributeSet(AttributeName: string[]) {\r\n        this.AttributeName = AttributeName;\r\n        this.pk.GenerateAttr(AttributeName);\r\n    }\r\n\r\n    /* Sign(Nym, attrs):Credential\r\n     *  sign a credential for a user\r\n     */\r\n    Sign(Nym: any, attrs: any[]): Credential {\r\n        // random e, s\r\n        const e = this.param.getRandBN();\r\n        const s = this.param.getRandBN();\r\n        const B = new this.param.ECP(); // B = g1 · HRand^s · Nym · MulAll(HAttrs[i]^(Attrs[i]))\r\n        B.copy(this.param.g1);\r\n        B.add(this.param.PAIR.G1mul(this.pk.h0, s));\r\n        B.add(Nym);\r\n        for (let i = 0; i < this.pk.attr.length; i++) {\r\n            B.add(this.param.PAIR.G1mul(this.pk.h[i], attrs[i]));\r\n        }\r\n\r\n        let A = new this.param.ECP(); // A = B^(1/(e+x))\r\n        const tmp = new this.param.BIG(); // tmp = (1/(e+x))\r\n        tmp.copy(e);\r\n        tmp.add(this.sk.value); // !!!!!!!!!!!\r\n        tmp.invmodp(this.param.order);\r\n\r\n        A = this.param.PAIR.G1mul(B, tmp);\r\n\r\n        const cred = new Credential(this.param);\r\n        cred.Set(A, B, e, s, attrs);\r\n        return cred;\r\n    }\r\n\r\n    /* GetPk()\r\n     *  get issuer's public key\r\n     */\r\n    GetPk(): IssuerPublicKey {\r\n        return IssuerPublicKey.COPY(this.pk);\r\n    }\r\n\r\n    /* GenerateSk():SecretKey\r\n     *  generate a random secret key\r\n     */\r\n    GenerateNonce(): any {\r\n        const nonce = this.param.getRandBN();\r\n        return nonce;\r\n    }\r\n\r\n    VerifyCredentialRequest(CR: any): boolean {\r\n        return this.pk.VerifyCredentialRequest(CR);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * User\r\n *  An user in Anonymous Credential\r\n *  Prover and Verifier are all user.\r\n */\r\nexport class User {\r\n\r\n    attrs: any[];\r\n\r\n    private sk: SecretKey;\r\n    private Nym: any;\r\n    // private pi: {\r\n    //     C: any,\r\n    //     S: any\r\n    // };\r\n\r\n    private Cred: Credential;\r\n\r\n    private ipk: IssuerPublicKey;\r\n\r\n    private param: CryptoSuite;\r\n\r\n    constructor(curve: string) {\r\n        this.param = new CryptoSuite(curve);\r\n    }\r\n\r\n    /* GenerateSk():SecretKey\r\n     *  generate a random secret key\r\n     */\r\n    GenerateSk(): SecretKey {\r\n        this.sk = SecretKey.GenerateSk(this.param);\r\n        return this.sk;\r\n    }\r\n\r\n    /* SetIpk(ipk:IssuerPublicKey)\r\n     *  save issuer's public key\r\n     */\r\n    SetIpk(ipk: IssuerPublicKey) {\r\n        this.ipk = IssuerPublicKey.COPY(ipk);\r\n    }\r\n\r\n    GenerateCrendentialRequest(nonce: any): any {\r\n        if (this.ipk === undefined) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log('Please set ipk first.');\r\n            return;\r\n        }\r\n\r\n        const ipk = this.ipk;\r\n        const Nym = this.param.PAIR.G1mul(ipk.h_sk, this.sk.value); // Nym\r\n\r\n        const r = this.param.getRandBN(); // r\r\n        const t1 = this.param.PAIR.G1mul(ipk.h_sk, r); // t1\r\n\r\n        const C = this.param.hashToBN(t1, ipk.h_sk, Nym, nonce);\r\n\r\n        const S = this.param.BIG.modmul(C, this.sk.value, this.param.order);\r\n        S.add(r);\r\n        S.mod(this.param.order);\r\n\r\n        const pi = {\r\n            C,\r\n            S\r\n        };\r\n\r\n        const attrs = this.param.genAttrBN(ipk.attr);\r\n\r\n        this.Nym = Nym;\r\n        this.attrs = attrs;\r\n\r\n        const CR = {\r\n            Nym,\r\n            pi,\r\n            nonce,\r\n            attrs\r\n        };\r\n\r\n        return CR;\r\n    }\r\n\r\n    VerifyBBSplus(Cred: Credential): boolean {\r\n        // pk   <- ipk.w\r\n        // m    <- attrs\r\n        // sig  <- (A,E,s)\r\n\r\n        // check if\r\n        // e(A, g2^E * pk) == e(B, g2)\r\n        // and if\r\n        // B == g1 * HRand^s * Nym * (h1^m1 * ... * hL^mL)\r\n\r\n        const wg2e = new this.param.ECP2();\r\n        wg2e.copy(this.ipk.w);\r\n        wg2e.add(this.param.PAIR.G2mul(this.param.g2, Cred.sig.e));\r\n        wg2e.affine(); // ~!!!!use affine() after ECP's mul operation, for pairing.\r\n\r\n        const A = new this.param.ECP();\r\n        A.copy(Cred.sig.A);\r\n        A.affine();\r\n\r\n        let left = this.param.PAIR.ate(wg2e, A);\r\n        left = this.param.PAIR.fexp(left);\r\n\r\n        const B = new this.param.ECP();\r\n        B.copy(this.param.g1);\r\n        B.add(this.param.PAIR.G1mul(this.ipk.h0, Cred.sig.s));\r\n        B.add(this.Nym);\r\n\r\n        for (let i = 0; i < Cred.attrs.length; i++) {\r\n            B.add(this.param.PAIR.G1mul(this.ipk.h[i], Cred.attrs[i]));\r\n        }\r\n\r\n        B.affine();\r\n        let right = this.param.PAIR.ate(this.param.g2, B);\r\n        right = this.param.PAIR.fexp(right);\r\n\r\n        return left.equals(right);\r\n    }\r\n\r\n    SetCredential(Cred: Credential) {\r\n        this.Cred = new Credential(this.param);\r\n        this.Cred.Copy(Cred);\r\n        return true;\r\n    }\r\n\r\n    Prove(D: any[]) {\r\n        const ipk = this.ipk;\r\n        const Cred = this.Cred;\r\n\r\n        const r1 = this.param.getRandBN(); // r1\r\n\r\n        const A_ = this.param.PAIR.G1mul(Cred.sig.A, r1); // A'\r\n\r\n        const r3 = new this.param.BIG(0); // r3\r\n        r3.copy(r1);\r\n        r3.invmodp(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        let _e = new this.param.BIG(0); // -e\r\n        _e.copy(Cred.sig.e);\r\n        _e = this.param.BIG.modneg(_e, this.param.order);\r\n\r\n        const _A = this.param.PAIR.G1mul(A_, _e); // _A\r\n        _A.add(this.param.PAIR.G1mul(Cred.sig.B, r1));\r\n\r\n        const r2 = this.param.getRandBN(); // r2\r\n        // tslint:disable-next-line:variable-name\r\n        let _r2 = new this.param.BIG(0); // -r2\r\n        _r2.copy(r2);\r\n        _r2 = this.param.BIG.modneg(_r2, this.param.order);\r\n\r\n        const B_ = this.param.PAIR.G1mul(Cred.sig.B, r1); // B'\r\n        B_.add(this.param.PAIR.G1mul(ipk.h0, _r2));\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        let s_ = this.param.BIG.modmul(r2, r3, this.param.order); // s'\r\n        s_ = this.param.BIG.modneg(s_, this.param.order);\r\n        s_.add(Cred.sig.s);\r\n        s_.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const r_a = []; // r_a[]\r\n        for (let i = 0; i < D.length; i++) {\r\n            if (D[i] === 0) {\r\n                r_a[i] = this.param.getRandBN();\r\n            } else {\r\n                r_a[i] = false;\r\n            }\r\n        }\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const r_e = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_r2 = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_r3 = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_s_ = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_sk = this.param.getRandBN();\r\n\r\n        const E = this.param.PAIR.G1mul(ipk.h_sk, r_sk); // E\r\n\r\n        const t1 = this.param.PAIR.G1mul(A_, r_e); // t1\r\n        t1.add(this.param.PAIR.G1mul(ipk.h0, r_r2));\r\n\r\n        const t2 = this.param.PAIR.G1mul(B_, r_r3); // t2\r\n        t2.add(this.param.PAIR.G1mul(ipk.h0, r_s_));\r\n        t2.add(this.param.PAIR.G1mul(E, new this.param.BIG(-1)));\r\n        for (let i = 0; i < r_a.length; i++) {\r\n            if (r_a[i] !== false) {\r\n                t2.add(this.param.PAIR.G1mul(ipk.h[i], r_a[i]));\r\n            }\r\n        }\r\n\r\n        // c' = H(A', _A, B', Nym, t1, t2, g1, HRand, h1, ... , hL, w)\r\n        // tslint:disable-next-line:variable-name\r\n        const c_ = this.param.hashToBN(\r\n            A_,\r\n            _A,\r\n            B_,\r\n            this.Nym,\r\n            t1,\r\n            t2,\r\n            this.param.g1,\r\n            ipk.h0,\r\n            ipk.h,\r\n            ipk.w\r\n        );\r\n\r\n        const nonce = this.param.getRandBN();\r\n        // c = H(nonce, c', (D, I))\r\n        const c = this.param.hashToBN(nonce, c_, D, this.attrs);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_sk = new this.param.BIG(0);\r\n        s_sk.copy(r_sk);\r\n        s_sk.add(this.param.BIG.modmul(c, this.sk.value, this.param.order));\r\n        s_sk.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_a = [];\r\n        for (let i = 0; i < D.length; i++) {\r\n            if (D[i] === 0) {\r\n                s_a[i] = new this.param.BIG(0);\r\n                s_a[i].copy(r_a[i]);\r\n                s_a[i].sub(this.param.BIG.modmul(c, this.attrs[i], this.param.order));\r\n                s_a[i].mod(this.param.order);\r\n            } else {\r\n                s_a[i] = false;\r\n            }\r\n        }\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_e = new this.param.BIG(0);\r\n        s_e.copy(r_e);\r\n        s_e.sub(this.param.BIG.modmul(c, Cred.sig.e, this.param.order));\r\n        s_e.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_r2 = new this.param.BIG(0);\r\n        s_r2.copy(r_r2);\r\n        s_r2.add(this.param.BIG.modmul(c, r2, this.param.order));\r\n        s_r2.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_r3 = new this.param.BIG(0);\r\n        s_r3.copy(r_r3);\r\n        s_r3.add(this.param.BIG.modmul(c, r3, this.param.order));\r\n        s_r3.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_s_ = new this.param.BIG(0);\r\n        s_s_.copy(r_s_);\r\n        s_s_.sub(this.param.BIG.modmul(c, s_, this.param.order));\r\n        s_s_.mod(this.param.order);\r\n\r\n        const pi = {\r\n            c,\r\n            s_sk,\r\n            s_a,\r\n            s_e,\r\n            s_r2,\r\n            s_r3,\r\n            s_s_,\r\n            nonce\r\n        };\r\n\r\n        const proof = {\r\n            A_,\r\n            _A,\r\n            B_,\r\n            Nym: this.Nym,\r\n            pi\r\n        };\r\n\r\n        return proof;\r\n    }\r\n\r\n    Verify(proof: any, D: any[], attrs: any[]): boolean {\r\n        const ipk = this.ipk;\r\n\r\n        // make sure A is not infinity\r\n        const O = new this.param.ECP(0); // Add\r\n        // let O = new this.param.ECP(1); // Muliply\r\n        if (proof.A_.equals(O)) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log('A\\' == O return true, verify failed.');\r\n            return false;\r\n        }\r\n\r\n        const A_ = new this.param.ECP();\r\n        A_.copy(proof.A_);\r\n        const w = new this.param.ECP2();\r\n        w.copy(ipk.w);\r\n        const _A = new this.param.ECP();\r\n        _A.copy(proof._A);\r\n        const g2Dup = new this.param.ECP2();\r\n        g2Dup.copy(this.param.g2);\r\n\r\n        A_.affine();\r\n        w.affine();\r\n        _A.affine();\r\n        g2Dup.affine();\r\n\r\n        let left = this.param.PAIR.ate(w, A_);\r\n        let right = this.param.PAIR.ate(g2Dup, _A);\r\n\r\n        left = this.param.PAIR.fexp(left);\r\n        right = this.param.PAIR.fexp(right);\r\n\r\n        if (!left.equals(right)) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log('e(A\\', w) == e(_A, g2) return false, verify failed.');\r\n            return false;\r\n        }\r\n\r\n        _A.copy(proof._A);\r\n        // tslint:disable-next-line:variable-name\r\n        const _t1 = this.param.PAIR.G1mul(A_, proof.pi.s_e);\r\n        _t1.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_r2));\r\n        _A.sub(proof.B_);\r\n        _t1.add(this.param.PAIR.G1mul(_A, this.param.BIG.modneg(proof.pi.c, this.param.order)));\r\n\r\n        // ~t2 : (B')^s_r3 · HRand^s_s' · HSk^(-s_sk) · MulAll(hi^(-s_ai)) · (g1·MulAll(hi^ai))^(-c)\r\n        // tslint:disable-next-line:variable-name\r\n        const _t2 = this.param.PAIR.G1mul(proof.B_, proof.pi.s_r3);\r\n        _t2.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_s_));\r\n        _t2.add(\r\n            this.param.PAIR.G1mul(ipk.h_sk, this.param.BIG.modneg(proof.pi.s_sk, this.param.order))\r\n        );\r\n\r\n        const sum = new this.param.ECP();\r\n        sum.copy(this.param.g1);\r\n        for (let i = 0; i < D.length; i++) {\r\n            if (D[i] === 0) {\r\n                _t2.add(this.param.PAIR.G1mul(ipk.h[i], proof.pi.s_a[i]));\r\n            } else {\r\n                sum.add(this.param.PAIR.G1mul(ipk.h[i], attrs[i]));\r\n            }\r\n        }\r\n\r\n        _t2.add(this.param.PAIR.G1mul(sum, this.param.BIG.modneg(proof.pi.c, this.param.order)));\r\n\r\n        const c1 = this.param.hashToBN(\r\n            proof.A_,\r\n            proof._A,\r\n            proof.B_,\r\n            proof.Nym,\r\n            _t1,\r\n            _t2,\r\n            this.param.g1,\r\n            ipk.h0,\r\n            ipk.h,\r\n            ipk.w\r\n        );\r\n        const c2 = this.param.hashToBN(proof.pi.nonce, c1, D, attrs);\r\n\r\n        if (this.param.BIG.comp(c2, proof.pi.c) !== 0) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log(\r\n                // tslint:disable-next-line:max-line-length\r\n                'c == H(nonce, H(A\\', _A, B\\', Nym, ~t1, ~t2, g1, HRand, h1, ... , hL, w), (D, I)) return false, verify failed.'\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * CryptoSuite\r\n *  contains everything in Paring Based Cryptography\r\n */\r\nexport class CryptoSuite {\r\n    curve: string;\r\n    ctx: any;\r\n    order: any;\r\n    PAIR: any;\r\n    ECP: any;\r\n    ECP2: any;\r\n    BIG: any;\r\n    rng: any;\r\n    g1: any;\r\n    g2: any;\r\n\r\n    constructor(curve: string) {\r\n        this.curve = curve;\r\n        this.ctx = new CTX(curve);\r\n\r\n        this.PAIR = this.ctx.PAIR;          // Set pairing interface\r\n        this.ECP = this.ctx.ECP;            // Set G1 interface\r\n        this.ECP2 = this.ctx.ECP2;          // Set G2 interface\r\n        this.BIG = this.ctx.BIG;            // Set BN interface\r\n        this.rng = new this.ctx.RAND();     // new random number generator\r\n\r\n        this.g1 = this.getG1Generator();       // g1\r\n        this.g2 = this.getG2Generator();       // g2\r\n        this.order = this.getOrder(); // n\r\n    }\r\n\r\n    getG1Generator() {\r\n        const g1 = new this.ctx.ECP(0);    // new G1\r\n        const x = new this.ctx.BIG(0);\r\n        const y = new this.ctx.BIG(0);\r\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Gx);\r\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Gy);\r\n        g1.setxy(x, y);\r\n        return g1;\r\n    }\r\n\r\n    getG2Generator() {\r\n        const g2 = new this.ctx.ECP2(0);\r\n        const x = new this.ctx.BIG(0);\r\n        const y = new this.ctx.BIG(0);\r\n        const qx = new this.ctx.FP2(0);\r\n        const qy = new this.ctx.FP2(0);\r\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pxa);\r\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pxb);\r\n        qx.bset(x, y);\r\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pya);\r\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pyb);\r\n        qy.bset(x, y);\r\n        g2.setxy(qx, qy);\r\n        return g2;\r\n    }\r\n\r\n    getOrder() {\r\n        const r = new this.ctx.BIG(0);     // new BN\r\n        r.rcopy(this.ctx.ROM_CURVE.CURVE_Order);\r\n        return r;\r\n    }\r\n\r\n    getRandBN(): any {\r\n        const buf = utils.generateRandomArray(256);\r\n        this.rng.clean();\r\n        this.rng.seed(256, buf);\r\n        const r = this.BIG.randomnum(this.order, this.rng);\r\n        return r;\r\n    }\r\n\r\n    getRandG1(): any {\r\n        const r = this.getRandBN();\r\n        const g = this.PAIR.G1mul(this.g1, r);\r\n        return g;\r\n    }\r\n\r\n    getRandG2(): any {\r\n        const r = this.getRandBN();\r\n        const g = this.PAIR.G2mul(this.g2, r);\r\n        return g;\r\n    }\r\n\r\n    hashToBN(...points: any[]): any {\r\n        let all: any[] = [];\r\n        let tmp: ConcatArray<any> = [];\r\n        points.forEach((p) => {\r\n            if (Array.isArray(p)) {\r\n                if (typeof p[0] === 'number') {\r\n                    all = all.concat(p);\r\n                    tmp = [];\r\n                } else {\r\n                    p.forEach((pp) => {\r\n                        pp.toBytes(tmp);\r\n                        all = all.concat(tmp);\r\n                        tmp = [];\r\n                    });\r\n                }\r\n            } else {\r\n                p.toBytes(tmp);\r\n                all = all.concat(tmp);\r\n                tmp = [];\r\n            }\r\n        });\r\n        const H = new this.ctx.HASH256();\r\n        H.process_array(all);\r\n        const R = H.hash();\r\n        const C = this.BIG.fromBytes(R);\r\n        C.mod(this.order);\r\n        return C;\r\n    }\r\n\r\n    genAttrBN(attrs: any): any {\r\n        const HAttr = [];\r\n\r\n        for (let i = 0; i < attrs.length; i++) {\r\n            const t = this.getRandBN();\r\n            HAttr[i] = t;\r\n        }\r\n\r\n        return HAttr;\r\n    }\r\n\r\n    genAttrElement(attrs: any): any {\r\n        const HAttr = [];\r\n\r\n        for (let i = 0; i < attrs.length; i++) {\r\n            const t = this.getRandG1();\r\n            HAttr[i] = t;\r\n        }\r\n\r\n        return HAttr;\r\n    }\r\n}\r\n\r\n/**\r\n * CryptoBase\r\n *  contains a refrence to a CryptoSuite instance.\r\n */\r\nexport class CryptoBase {\r\n    param: CryptoSuite;\r\n    constructor(param: CryptoSuite) {\r\n        this.param = param;\r\n    }\r\n}\r\n\r\nexport class SecretKey extends CryptoBase {\r\n    /*\r\n     * GenerateSk():SecretKey\r\n     * Generate a random secret key.\r\n     */\r\n    static GenerateSk(param: CryptoSuite): SecretKey {\r\n        const x = param.getRandBN(); // isk\r\n        const sk = new SecretKey(param);\r\n        sk.setValue(x);\r\n        return sk;\r\n    }\r\n\r\n    value: any;\r\n\r\n    constructor(param: CryptoSuite) {\r\n        super(param);\r\n        this.value = new this.param.BIG(0);\r\n    }\r\n\r\n    setValue(v: any) {\r\n        this.value.copy(v);\r\n    }\r\n\r\n    GenerateIssuerPublicKey(): IssuerPublicKey {\r\n        const x = this.value;\r\n        const w = this.param.PAIR.G2mul(this.param.g2, x); // w\r\n        let r = this.param.getRandBN(); // random number\r\n        // tslint:disable-next-line:variable-name\r\n        const _g1 = this.param.PAIR.G1mul(this.param.g1, r);\r\n        // tslint:disable-next-line:variable-name\r\n        const _g2 = this.param.PAIR.G1mul(_g1, x);\r\n\r\n        // zkp - pi\r\n        r = this.param.getRandBN();\r\n        const t1 = this.param.PAIR.G2mul(this.param.g2, r);\r\n        const t2 = this.param.PAIR.G1mul(_g1, r);\r\n\r\n        const C = this.param.hashToBN(t1, t2, this.param.g2, _g1, w, _g2);\r\n\r\n        const S = this.param.BIG.modmul(C, x, this.param.order);\r\n        S.add(r);\r\n        S.mod(this.param.order);\r\n\r\n        const pi = {\r\n            C,\r\n            S\r\n        };\r\n\r\n        const pk = new IssuerPublicKey(this.param);\r\n        pk.SetBasicValue(w, _g1, _g2, pi);\r\n        return pk;\r\n    }\r\n\r\n    /*\r\n     * ToBytes()\r\n     *  convert secret key to string format.\r\n     *  TODO:: add serialize function.\r\n     */\r\n    ToBytes() {\r\n        if (this.value === undefined) {\r\n            return '';\r\n        }\r\n        return this.value.toBytes();\r\n    }\r\n\r\n    /*\r\n     * FromString(s: any)\r\n     *  convert string to a SecretKey.\r\n     *  TODO:: add unserialize function.\r\n     */\r\n    FromBytes(s: any) {\r\n        this.value = this.param.BIG.fromBytes(s);\r\n        return this.value.toString();\r\n    }\r\n\r\n    /*\r\n     * GenerateSk():SecretKey\r\n     * Generate a random secret key.\r\n     */\r\n    Rand() {\r\n        const x = this.param.getRandBN(); // isk\r\n        this.setValue(x);\r\n    }\r\n\r\n}\r\n\r\nexport class IssuerPublicKey extends CryptoBase {\r\n    /*\r\n     * COPY(target: IssuerPublicKey):IssuerPublicKey\r\n     *  copy and return a new public key\r\n     */\r\n    static COPY(target: IssuerPublicKey): IssuerPublicKey {\r\n        const pk = new IssuerPublicKey(target.param);\r\n        pk.SetBasicValue(target.w, target._g1, target._g2, target.pi);\r\n        pk.SetAttrValue(target.h0, target.h_sk, target.h, target.attr);\r\n        return pk;\r\n    }\r\n\r\n    w: any;\r\n    // tslint:disable-next-line:variable-name\r\n    _g1: any;\r\n    // tslint:disable-next-line:variable-name\r\n    _g2: any;\r\n    pi: {\r\n        C: any,\r\n        S: any\r\n    };\r\n    h0: any;\r\n    // tslint:disable-next-line:variable-name\r\n    h_sk: any;\r\n    h: any;\r\n    attr: any[];\r\n\r\n    constructor(param: CryptoSuite) {\r\n        super(param);\r\n\r\n        this.w = new this.param.ECP2();\r\n        this._g1 = new this.param.ECP();\r\n        this._g2 = new this.param.ECP();\r\n\r\n        const C = new this.param.BIG();\r\n        const S = new this.param.BIG();\r\n        this.pi = {C, S};\r\n\r\n        this.h0 = new this.param.ECP();\r\n        this.h_sk = new this.param.ECP();\r\n        this.attr = [];\r\n    }\r\n\r\n    /*\r\n     * SetBasicValue(w, _g1, _g2, pi)\r\n     *  set basic values of the public key\r\n     */\r\n    // tslint:disable-next-line:variable-name\r\n    SetBasicValue(w: any, _g1: any, _g2: any, pi: any) {\r\n        this.w.copy(w);\r\n        this._g1.copy(_g1);\r\n        this._g2.copy(_g2);\r\n        this.pi.C.copy(pi.C);\r\n        this.pi.S.copy(pi.S);\r\n    }\r\n\r\n    /*\r\n     * SetAttrValue(h0, h_sk, h, attr)\r\n     *  set basic values of the public key\r\n     */\r\n    // tslint:disable-next-line:variable-name\r\n    SetAttrValue(h0: any, h_sk: any, h: any[], attr: any[]) {\r\n        this.h0.copy(h0);\r\n        this.h_sk.copy(h_sk);\r\n        this.h = [];\r\n        this.attr = [];\r\n\r\n        for (let i = 0; i < h.length; i++) {\r\n            this.h[i] = new this.param.ECP();\r\n            this.h[i].copy(h[i]);\r\n        }\r\n        for (let i = 0; i < attr.length; i++) {\r\n            this.attr[i] = attr[i];\r\n        }\r\n    }\r\n\r\n    /*\r\n     * GenerateAttr(AttributeName)\r\n     *  generates\r\n     *    ipk.h0: rand G1\r\n     *    ipk.h_sk: rand G1\r\n     *    ipk.h[]: Rand G1 array, match to AttributeName\r\n     */\r\n    GenerateAttr(AttributeName: any) {\r\n        const HAttr = this.param.genAttrElement(AttributeName);\r\n        const h0 = this.param.getRandG1();\r\n        // tslint:disable-next-line:variable-name\r\n        const h_sk = this.param.getRandG1();\r\n        const h: any[] = [];\r\n\r\n        HAttr.forEach((a: any) => {\r\n            h.push(a);\r\n        });\r\n\r\n        this.h0 = h0;\r\n        this.h_sk = h_sk;\r\n        this.h = h;\r\n        this.attr = AttributeName;\r\n    }\r\n\r\n    /*\r\n     * VerifyCredentialRequest(Nym, pi, n)\r\n     *  verifies user's credential request\r\n     */\r\n    VerifyCredentialRequest(CR: any): boolean {\r\n        const C = new this.param.BIG(0);\r\n        C.copy(CR.pi.C);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const _t1 = this.param.PAIR.G1mul(this.h_sk, CR.pi.S);\r\n        _t1.add(this.param.PAIR.G1mul(CR.Nym, this.param.BIG.modneg(C, this.param.order)));\r\n\r\n        const _C = this.param.hashToBN(_t1, this.h_sk, CR.Nym, CR.nonce);\r\n\r\n        return this.param.BIG.comp(CR.pi.C, _C) === 0;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Credential\r\n *  The credential generated from issuer\r\n */\r\nexport class Credential extends CryptoBase {\r\n    sig: {\r\n        A: any,\r\n        B: any,\r\n        e: any,\r\n        s: any\r\n    };\r\n    attrs: any[];\r\n\r\n    constructor(param: CryptoSuite) {\r\n        super(param);\r\n        const A = new this.param.ECP();\r\n        const B = new this.param.ECP();\r\n        const e = new this.param.BIG();\r\n        const s = new this.param.BIG();\r\n        this.sig = {A, B, e, s};\r\n        this.attrs = [];\r\n    }\r\n\r\n    Set(A: any, B: any, e: any, s: any, attrs: any) {\r\n        this.sig.A.copy(A);\r\n        this.sig.B.copy(B);\r\n        this.sig.e.copy(e);\r\n        this.sig.s.copy(s);\r\n\r\n        for (let i = 0; i < attrs.length; i++) {\r\n            this.attrs[i] = new this.param.BIG();\r\n            this.attrs[i].copy(attrs[i]);\r\n        }\r\n    }\r\n\r\n    Copy(target: Credential) {\r\n        this.Set(target.sig.A, target.sig.B, target.sig.e, target.sig.s, target.attrs);\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as crypto from 'crypto';\r\nimport * as elliptic from 'elliptic';\r\nimport * as pkcs7 from 'pkcs7';\r\n\r\nexport class Ecies {\r\n    /**\r\n     * Algorithm used for encryption.\r\n     */\r\n    encAlg: string;\r\n    /**\r\n     * Hash Algorithm used for kdf.\r\n     */\r\n    hashAlg: string;\r\n    /**\r\n     * Hash digest byte size.\r\n     */\r\n    digestSize: number;\r\n    /**\r\n     * Key input and out put format.\r\n     */\r\n    keyFormat: string;\r\n    /**\r\n     * Initialized Vector\r\n     */\r\n    iv: Buffer;\r\n    /**\r\n     * Elliptic Curve instance\r\n     */\r\n    ec: any;\r\n    /**\r\n     * key pair from\r\n     * ec instance\r\n     */\r\n    keyPair: any;\r\n\r\n    /**\r\n     * if true, the pubkey will be\r\n     * in compressed format, begin with '02' or '03'.\r\n     * if false, begin with '04'\r\n     */\r\n    compact: boolean;\r\n\r\n    /**\r\n     * for curve name,\r\n     * go https://github.com/indutny/elliptic\r\n     * for reference\r\n     */\r\n    constructor(Curve?: string) {\r\n        // default setting\r\n        this.encAlg = 'aes-256-cbc';\r\n        this.hashAlg = 'sha256';\r\n        this.digestSize = 32;\r\n        this.keyFormat = 'hex';\r\n        this.compact = true;\r\n\r\n        // const curve = Curve || 'secp256r1';\r\n        const curve = Curve || 'p256';\r\n\r\n        this.ec = new elliptic.ec(curve);\r\n        this.keyPair = this.ec.genKeyPair();\r\n        this.iv = Buffer.alloc(0);\r\n    }\r\n    /**\r\n     * generate random key pair\r\n     */\r\n    generateKeyPair(): any {\r\n        this.keyPair = this.ec.genKeyPair();\r\n        return {\r\n            priv: this.keyPair.getPrivate('hex'),\r\n            pub: this.keyPair.getPublic(this.compact, 'hex')\r\n        };\r\n    }\r\n    /**\r\n     * set key pair with private key\r\n     * @param privHex private key in hex coding.\r\n     */\r\n    setKeyPair(privHex: string) {\r\n        this.keyPair = this.ec.keyFromPrivate(privHex, 'hex');\r\n    }\r\n    /**\r\n     * get key pair in use\r\n     * @return = {pri, pub}\r\n     * all in hex coding.\r\n     */\r\n    getKeyPair(): any {\r\n        return {\r\n            priv: this.keyPair.getPrivate('hex'),\r\n            pub: this.keyPair.getPublic(this.compact, 'hex')\r\n        };\r\n    }\r\n\r\n    /**\r\n     * encrypt a message with given\r\n     * public key and initialized vector\r\n     *\r\n     * @param pubkey hex string of public key\r\n     * @param msg byte buffer of message\r\n     * @param keylen byte length of kdf's output.\r\n     */\r\n    // tslint:disable-next-line:variable-name\r\n    enc(pubkey: string, msg: Buffer, keylen: number, _iv?: string): any {\r\n        const publicB = this.ec.keyFromPublic(pubkey, 'hex').getPublic();\r\n\r\n        // generate a random number\r\n        // r = (0, order)\r\n        const tmpKP = this.ec.genKeyPair();\r\n        const r = tmpKP.getPrivate();\r\n\r\n        const gTilde = tmpKP.getPublic();\r\n        const hTilde = publicB.mul(r);\r\n\r\n        const out = gTilde.encode('hex');\r\n        const PEH = hTilde.getX().toString('hex');\r\n        const seed = Buffer.from(out + PEH, 'hex');\r\n\r\n        const derivedKeyArray = this.kdf2(\r\n            seed,\r\n            keylen * 8,\r\n            this.digestSize,\r\n            this.hashAlg\r\n        );\r\n        if (!derivedKeyArray) {\r\n            return;\r\n        }\r\n        const derivedKey = Buffer.concat(derivedKeyArray);\r\n\r\n        let iv = Buffer.alloc(16);\r\n        if (!_iv) {\r\n            // generate a random iv, fixed size\r\n            crypto.randomFillSync(iv);\r\n        } else {\r\n            iv = Buffer.from(_iv, 'hex');\r\n        }\r\n\r\n        const algorithm = this.encAlg;\r\n\r\n        const cipher = crypto.createCipheriv(algorithm, derivedKey, iv);\r\n        cipher.setAutoPadding(false);\r\n\r\n        const msgCipher =\r\n            cipher.update(pkcs7.pad(msg), 'binary', 'hex') +\r\n            cipher.final('hex');\r\n\r\n        return {\r\n            iv: iv.toString('hex'),\r\n            out,\r\n            msgCipher\r\n        };\r\n    }\r\n    /**\r\n     * encrypt a message with given\r\n     * public key and initialized vector\r\n     *\r\n     * @param msgCipher\r\n     * @param out\r\n     * @param iv\r\n     * @param keylen\r\n     */\r\n    dec(msgCipher: string, out: string, iv: any, keylen: number): Buffer {\r\n        const gTilde = this.ec.keyFromPublic(out, 'hex').getPublic();\r\n\r\n        const hTilde = gTilde.mul(this.keyPair.getPrivate());\r\n        const PEH = hTilde.getX().toString('hex');\r\n        const seed = Buffer.from(out + PEH, 'hex');\r\n\r\n        const derivedKeyArray = this.kdf2(\r\n            seed,\r\n            keylen * 8,\r\n            this.digestSize,\r\n            this.hashAlg\r\n        );\r\n        if (!derivedKeyArray) {\r\n            return Buffer.alloc(0);\r\n        }\r\n        const derivedKey = Buffer.concat(derivedKeyArray);\r\n        const iv2 = Buffer.from(iv, 'hex');\r\n\r\n        const algorithm = this.encAlg;\r\n        const decipher = crypto.createDecipheriv(algorithm, derivedKey, iv2);\r\n        decipher.setAutoPadding(false);\r\n        const plain =\r\n            decipher.update(msgCipher, 'hex', 'binary') +\r\n            decipher.final('binary');\r\n\r\n        // un padding\r\n        const unpad = pkcs7.unpad(Buffer.from(plain, 'binary'));\r\n\r\n        return Buffer.from(unpad);\r\n    }\r\n\r\n    /* utils */\r\n    kdf2(\r\n        seed: Buffer,\r\n        len: number,\r\n        digestSize: number,\r\n        hashFunc: string\r\n    ): Buffer[] {\r\n        if (len < 0) {\r\n            return [];\r\n        }\r\n        const byteLen = Math.ceil(len / 8);\r\n        const b = Math.ceil(byteLen / digestSize);\r\n        const key = [];\r\n        const offset = byteLen - (b - 1) * digestSize; // byte offset\r\n\r\n        let counter = 1; // 1 for pbkdf2, 0 for pbkdf1\r\n\r\n        let hashIns;\r\n        while (counter < b) {\r\n            hashIns = crypto.createHash(hashFunc);\r\n            const h = hashIns\r\n                .update(Buffer.concat([seed, this.I2OSP(counter, 4)]))\r\n                .digest();\r\n            key[counter - 1] = Buffer.alloc(offset);\r\n            key[counter - 1] = h;\r\n            counter++;\r\n        }\r\n        hashIns = crypto.createHash(hashFunc);\r\n        const hEnd = hashIns\r\n            .update(Buffer.concat([seed, this.I2OSP(counter, 4)]))\r\n            .digest();\r\n        key[counter - 1] = Buffer.alloc(offset);\r\n        key[counter - 1] = hEnd;\r\n\r\n        return key;\r\n    }\r\n\r\n    I2OSP(num: number, len: number): Buffer {\r\n        const buf = Buffer.allocUnsafe(len);\r\n        buf.writeUIntBE(num, 0, len);\r\n        return buf;\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { reverseHex, StringReader } from '../utils';\r\n\r\nconst Fixed64Size = 8;\r\nexport default class Fixed64 {\r\n    static deserialize(sr: StringReader) {\r\n        const f = new Fixed64();\r\n        let v = sr.read(8);\r\n        // f.value = hexstr2str(v)\r\n        v = reverseHex(v);\r\n        while (v.substr(0, 2) === '00' ) {\r\n            v = v.substring(2);\r\n        }\r\n        f.value = new BigNumber(v, 16).toString();\r\n        return f;\r\n    }\r\n\r\n    // 8 bytes\r\n    value: string;\r\n    constructor(value?: string) {\r\n        if (value && value.length > 16 || value && !/^[0-9]\\d*$/.test(value)) {\r\n            throw new Error('Invalid value.' + value);\r\n        }\r\n        this.value = value || '0000000000000000';\r\n    }\r\n\r\n    serialize() {\r\n        // return str2hexstr(this.value)\r\n        let hexstring = new BigNumber(this.value).toString(16);\r\n        const size = Fixed64Size * 2;\r\n\r\n        hexstring = hexstring.length % size === 0\r\n            ? hexstring\r\n            : ('0'.repeat(size) + hexstring).substring(hexstring.length);\r\n\r\n        hexstring = reverseHex(hexstring);\r\n        return hexstring;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Parameter } from './parameter';\r\n\r\n/**\r\n * Describes the Abi function\r\n */\r\nexport default class AbiFunction {\r\n    name: string;\r\n    returntype: string;\r\n    parameters: Parameter[];\r\n\r\n    constructor(name: string, returntype: string, parameters: Parameter[]) {\r\n        this.name = name;\r\n        this.returntype = returntype;\r\n        this.parameters = parameters;\r\n    }\r\n\r\n    getParameter(name: string): any {\r\n        // const p = {} as Parameter;\r\n\r\n        for (const v of this.parameters) {\r\n            if (v.getName() === name) {\r\n                return v;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setParamsValue(...args: Parameter[]): void {\r\n        for (let i = 0, len = args.length; i < len; i++) {\r\n            // tslint:disable-next-line:prefer-for-of\r\n            for (let j = 0 ; j < this.parameters.length; j++) {\r\n                if (args[i].name === this.parameters[j].getName()) {\r\n                    this.parameters[j].setValue(args[i]);\r\n                }\r\n            }\r\n        }\r\n        // const parameters = [];\r\n        // for (let i = 0, len = args.length; i < len; i++) {\r\n        //     parameters.push(args[i]);\r\n        // }\r\n        // this.parameters = parameters;\r\n    }\r\n\r\n    toString(): string {\r\n        const json = {\r\n            name : this.name,\r\n            returntype : this.returntype,\r\n            parameters : this.parameters\r\n        };\r\n\r\n        return JSON.stringify(json);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport {\r\n    hex2VarBytes,\r\n    hexstr2str,\r\n    str2VarBytes,\r\n    StringReader\r\n} from '../../utils';\r\nimport { num2hexstring } from './../../utils';\r\nimport Payload from './payload';\r\n\r\nexport enum VmType  {\r\n    NEOVM_TYPE = 1,\r\n    WASMVM_TYPE = 3\r\n}\r\n\r\n/**\r\n * Describes the payload of deploy code\r\n */\r\nexport default class DeployCode extends Payload {\r\n    /**\r\n     * Hex encoded contract content\r\n     */\r\n    code: string;\r\n\r\n    /**\r\n     * Decides if the contract need storage(Deprecated)\r\n     * Change to VmType to support wasm vm\r\n     */\r\n    // needStorage: boolean;\r\n    vmType: VmType;\r\n    /**\r\n     * Name of the smart contract\r\n     */\r\n    name: string;\r\n    /**\r\n     * Version of the contract\r\n     */\r\n    version: string;\r\n    /**\r\n     * Author of the contract\r\n     */\r\n    author: string;\r\n    /**\r\n     * Email of the author\r\n     */\r\n    email: string;\r\n    /**\r\n     * Description of the contract\r\n     */\r\n    description: string;\r\n\r\n    /**\r\n     * Serialize deploy code to hex string\r\n     */\r\n    serialize(): string {\r\n        let result = '';\r\n\r\n        // result += this.code.serialize();\r\n        result += hex2VarBytes(this.code);\r\n\r\n        result += num2hexstring(this.vmType);\r\n\r\n        result += str2VarBytes(this.name);\r\n\r\n        result += str2VarBytes(this.version);\r\n\r\n        result += str2VarBytes(this.author);\r\n\r\n        result += str2VarBytes(this.email);\r\n\r\n        result += str2VarBytes(this.description);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Deserialize deploy code\r\n     * @param sr\r\n     */\r\n    deserialize(sr: StringReader): void {\r\n\r\n        // const code = VmCode.deserialize(sr);\r\n        const code = sr.readNextBytes();\r\n        this.code = code;\r\n\r\n        const type = sr.readUint8();\r\n        this.vmType = type;\r\n\r\n        const name = sr.readNextBytes();\r\n        this.name = hexstr2str(name);\r\n\r\n        const codeVersion = sr.readNextBytes();\r\n        this.version = hexstr2str(codeVersion);\r\n\r\n        const author = sr.readNextBytes();\r\n        this.author = hexstr2str(author);\r\n\r\n        const email = sr.readNextBytes();\r\n        this.email = hexstr2str(email);\r\n\r\n        const description = sr.readNextBytes();\r\n        this.description = hexstr2str(description);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { hex2VarBytes, StringReader } from '../../utils';\r\nimport Payload from './payload';\r\n\r\nexport default class InvokeCode extends Payload {\r\n    // the length is of bytes 20\r\n    /*\r\n    scriptHash : string\r\n    parameters : Array<Parameter> = []\r\n    functionName : string\r\n     */\r\n\r\n    /**\r\n     * Hex encoed string\r\n     */\r\n    code: string;\r\n\r\n    constructor() {\r\n        super();\r\n        // this.gasLimit = new Fixed64()\r\n    }\r\n\r\n/*     serialize() : string {\r\n        let payloadLength\r\n        let paramsLength = num2hexstring( 0x50 + this.parameters.length) //start from '0x50'\r\n        const paramsEnd = 'c1'\r\n        let funcNameHex = str2hexstr(this.functionName)\r\n        const funcNameLength = num2hexstring(funcNameHex.length/2)\r\n\r\n        let params = []\r\n        for(let i = this.parameters.length-1; i > -1; i--) {\r\n            let p = this.parameters[i]\r\n            let hexP = p.getValue()\r\n            let hexPLength = num2VarInt( hexP.length / 2)\r\n            let opcode = ''\r\n            if( hexP.length/2 < OPCODE.PUSHBYTES75) {\r\n\r\n            } else if (hexP.length / 2 < 0x100) {\r\n                opcode = num2VarInt( OPCODE.PUSHDATA1 )\r\n            } else if( hexP.length/2 < 0x1000 ) {\r\n                opcode = num2hexstring( OPCODE.PUSHDATA2, 2, true)\r\n            } else {\r\n                opcode = num2hexstring( OPCODE.PUSHDATA4, 4, true)\r\n            }\r\n            params.push ({\r\n                hexPLength,\r\n                hexP,\r\n                opcode\r\n            })\r\n        }\r\n\r\n        let result = ''\r\n        //scripthash\r\n        // result += this.scriptHash\r\n        //params\r\n        for(let v of params) {\r\n            if(v.opcode) {\r\n                result += v.opcode\r\n            }\r\n            result += v.hexPLength\r\n            result += v.hexP\r\n        }\r\n        result += paramsLength\r\n        //end\r\n        result += paramsEnd\r\n        //function\r\n        result += funcNameLength\r\n        result += funcNameHex\r\n        let totalParamsLength = num2VarInt(result.length / 2)\r\n        //result = this.scriptHash + totalParamsLength + result\r\n\r\n        console.log('invode serialze: '+ result)\r\n\r\n        return result\r\n    }  */\r\n\r\n    serialize() {\r\n        let result = '';\r\n        // if(this.gasLimit) {\r\n        //     result += this.gasLimit.serialize()\r\n        // }\r\n        // result += this.code.serialize();\r\n        result += hex2VarBytes(this.code);\r\n        return result;\r\n    }\r\n\r\n    /* deserialize(ss : StringReader) : void {\r\n        //scriptHash, fixed langth\r\n        this.scriptHash = ss.read(20)\r\n        //payload total lenght\r\n        const payloadLen = ss.readNextLen()\r\n\r\n        //read params start\r\n        let params = []\r\n        let nextByte = ss.readNextLen()\r\n        //params's length start from 0x50\r\n        while(nextByte < 0x50) {\r\n            let p = ss.read(nextByte)\r\n            params.push(p)\r\n            nextByte = ss.readNextLen()\r\n        }\r\n        //params end\r\n        let end = ss.read(1)\r\n        console.log('end :' + end)\r\n        if(end === 'c1') {\r\n            for(let i=0; i< params.length; i++) {\r\n                //TODO can only get value\r\n                this.parameters.push(new Parameter('','',params[i]))\r\n            }\r\n        }\r\n        //function name\r\n        let funNameLen = ss.readNextLen()\r\n        let func = ss.read(funNameLen)\r\n        func = hexstr2str(func)\r\n        //payload end\r\n        this.functionName = func\r\n\r\n    }  */\r\n\r\n    deserialize(sr: StringReader) {\r\n        // let gasLimit = Fixed64.deserialize(sr);\r\n        // const code = VmCode.deserialize(sr);\r\n        const code = sr.readNextBytes();\r\n        // this.gasLimit = gasLimit;\r\n        this.code = code;\r\n        return this;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { ab2hexstring, hexstring2ab, reverseHex, StringReader } from '../utils';\r\nimport BigInt from './bigInt';\r\n\r\nconst I128_SIZE = 16;\r\n\r\n// little endian i128\r\nexport class I128 {\r\n    static deserialize(sr: StringReader) {\r\n        const result = new I128();\r\n        const hex = sr.read(I128_SIZE);\r\n        const v = hexstring2ab(hex);\r\n        result.value = v;\r\n        return result;\r\n    }\r\n\r\n    value: number[] = new Array(I128_SIZE).fill(0);\r\n\r\n    constructor(value?: number[]) {\r\n        if (value && value.length !== I128_SIZE) {\r\n            throw new Error(`Invalid value: ${value} for I128.`);\r\n        }\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    // little endian\r\n    compareTo(o: I128) {\r\n        const x = this.value;\r\n        const y = o.value;\r\n        for (let i = I128_SIZE - 1; i >= 0; i--) {\r\n            if (x[i] > y[i]) {\r\n                return 1;\r\n            }\r\n            if (x[i] < y[i]) {\r\n                return -1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    serialize() {\r\n        const hex = ab2hexstring(this.value);\r\n        return hex;\r\n    }\r\n\r\n}\r\n\r\n// little endian u128\r\nexport class U128 {\r\n    static deserialize(sr: StringReader) {\r\n        const result = new U128();\r\n        const hex = sr.read(I128_SIZE);\r\n        const v = hexstring2ab(hex);\r\n\r\n        result.value = v;\r\n        return result;\r\n    }\r\n\r\n    value: number[] = new Array(I128_SIZE).fill(0);\r\n\r\n    constructor(value?: number[]) {\r\n        if (value && value.length !== I128_SIZE) {\r\n            throw new Error(`Invalid value: ${value} for U128.`);\r\n        }\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    // little endian\r\n    compareTo(o: U128) {\r\n        const x = this.value;\r\n        const y = o.value;\r\n        for (let i = I128_SIZE - 1; i >= 0; i--) {\r\n            if (x[i] > y[i]) {\r\n                return 1;\r\n            }\r\n            if (x[i] < y[i]) {\r\n                return -1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    serialize() {\r\n        const hex = ab2hexstring(this.value);\r\n        return hex;\r\n    }\r\n\r\n    toBigInt(): BigInt {\r\n        const hex = ab2hexstring(this.value);\r\n        const buf = reverseHex(hex);\r\n        return BigInt.fromHexstr(buf);\r\n    }\r\n\r\n    toI128(): I128 {\r\n        return new I128(this.value);\r\n    }\r\n\r\n}\r\n\r\nexport function oneBits128() {\r\n    const val = [];\r\n    for (let i = 0; i < I128_SIZE; i++) {\r\n        val[i] = 255;\r\n    }\r\n    const i128 = new I128(val);\r\n    return i128;\r\n}\r\n\r\nexport function bigPow(a: number, b: number): BigNumber {\r\n    return new BigNumber(a).pow(b);\r\n}\r\n\r\nexport const pow128 = bigPow(2, 128);\r\n\r\nexport const maxBigU128 = bigPow(2, 128).minus(1);\r\n\r\nexport const maxI128 = bigPow(2, 127).minus(1);\r\n\r\nexport const minI128 = bigPow(2, 127).negated();\r\n\r\nexport function I128FromInt(val: number) {\r\n    let i128 = new I128();\r\n    if (val < 0) {\r\n        i128 = oneBits128();\r\n    }\r\n    putUint64(i128.value, val);\r\n    return i128;\r\n}\r\n\r\nexport function I128FromBigInt(val: string) {\r\n    let valBN = new BigNumber(val);\r\n    if (valBN.isGreaterThan(maxI128) || valBN.isLessThan(minI128)) {\r\n        throw new Error('The value is out of I128 range');\r\n    }\r\n\r\n    if (valBN.isLessThan(0)) {\r\n        valBN = valBN.plus(pow128);\r\n    }\r\n    const size = I128_SIZE * 2;\r\n    let hexstring = valBN.toString(16);\r\n    hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\r\n    hexstring = reverseHex(hexstring);\r\n    const bufRArray = hexstring2ab(hexstring);\r\n\r\n    const i128 = new I128();\r\n    const value = new Array(I128_SIZE).fill(0);\r\n    for (let i = 0; i < bufRArray.length; i++) {\r\n        value[i] = bufRArray[i];\r\n    }\r\n    i128.value = value;\r\n    return i128;\r\n}\r\n\r\nexport function putUint64(value: number[], val: number) {\r\n    value[0] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[1] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[2] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[3] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[4] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[5] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[6] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[7] = val & 0xFF;\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/**\r\n * Struct is a special kind of parameter that used in smart contract.\r\n */\r\nexport default class Struct {\r\n    list: any[];\r\n\r\n    constructor() {\r\n        this.list = [];\r\n    }\r\n    /**\r\n     * Add arguments to struct.\r\n     * @param args Array of some kinds of value.\r\n     * Boolean, number, string, Address and Struct are supported.\r\n     */\r\n    add(...args: any[]) {\r\n        for (const a of args) {\r\n            this.list.push(a);\r\n        }\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport BigInt from '../common/bigInt';\r\nimport { I128, I128FromBigInt, I128FromInt } from '../common/int128';\r\nimport { Address } from '../crypto';\r\nimport { ERROR_CODE } from '../error';\r\nimport AbiFunction from '../smartcontract/abi/abiFunction';\r\nimport { Parameter, ParameterType, ParameterTypeVal } from '../smartcontract/abi/parameter';\r\nimport Struct from '../smartcontract/abi/struct';\r\nimport {\r\n    // tslint:disable-next-line:max-line-length\r\n    ab2hexstring, bigIntFromBytes, hexstr2str, isHexString, num2hexstring, num2VarInt, str2hexstr, StringReader\r\n} from '../utils';\r\nimport opcode from './opcode';\r\nimport { pushHexString } from './program';\r\n\r\nexport const pushBool = (param: boolean) => {\r\n    let result = '';\r\n    if (param) {\r\n        result += num2hexstring(opcode.PUSHT);\r\n    } else {\r\n        result += num2hexstring(opcode.PUSHF);\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const pushInt = (param: number, ledgerCompatible: boolean = true) => {\r\n    let result = '';\r\n    if (param === -1) {\r\n        result = num2hexstring(opcode.PUSHM1);\r\n    } else if (param === 0) {\r\n        result = num2hexstring(opcode.PUSH0);\r\n    } else if (param > 0 && param < 16) {\r\n        const num = opcode.PUSH1 - 1 + param;\r\n        result = num2hexstring(num);\r\n    } else {\r\n        const biHex = new BigInt(param.toString(), ledgerCompatible).toHexstr();\r\n        result = pushHexString(biHex);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const pushBigNum = (param: BigNumber, ledgerCompatible: boolean = true) => {\r\n    let result = '';\r\n    if (param.isEqualTo(-1)) {\r\n        result = num2hexstring(opcode.PUSHM1);\r\n    } else if (param.isEqualTo(0)) {\r\n        result = num2hexstring(opcode.PUSH0);\r\n    } else if (param.isGreaterThan(0) && param.isLessThan(16)) {\r\n        const num = opcode.PUSH1 - 1 + param.toNumber();\r\n        result = num2hexstring(num);\r\n    } else {\r\n        const biHex = new BigInt(param.toString(), ledgerCompatible).toHexstr();\r\n        result = pushHexString(biHex);\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const getStructBytes = (val: Struct) => {\r\n    let result = '';\r\n    result += num2hexstring(ParameterTypeVal.Struct);\r\n    result += num2hexstring(val.list.length); // val is array-like\r\n    for (const v of val.list) {\r\n        if (typeof v === 'string') {// consider as hex string\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(v);\r\n        } else if (typeof v === 'number') {\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(num2VarInt(v));\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const getMapBytes = (val: Map<string, Parameter>) => {\r\n    let result = '';\r\n    result += num2hexstring(ParameterTypeVal.Map);\r\n    result += num2hexstring(val.size);\r\n    for (const k of val.keys()) {\r\n        result += num2hexstring(ParameterTypeVal.ByteArray);\r\n        result += pushHexString(str2hexstr(k));\r\n        const p = val.get(k);\r\n        if (p && p.getType() === ParameterType.ByteArray) {\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(p.getValue());\r\n        } else if (p && p.getType() === ParameterType.String) {\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(str2hexstr(p.getValue()));\r\n        } else if (p && p.getType() === ParameterType.Integer) {\r\n            result += num2hexstring(ParameterTypeVal.Integer);\r\n            result += pushHexString(num2VarInt(p.getValue()));\r\n        } else if (p && p.getType() === ParameterType.Long) {\r\n            result += num2hexstring(ParameterTypeVal.Integer);\r\n            result += pushHexString(num2VarInt(p.getValue()));\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const pushMap = (val: Map<string, any>, ledgerCompatible: boolean) => {\r\n    let result = '';\r\n    result += num2hexstring(opcode.NEWMAP);\r\n    result += num2hexstring(opcode.TOALTSTACK);\r\n    for (const k of val.keys()) {\r\n        result += num2hexstring(opcode.DUPFROMALTSTACK);\r\n        result += pushHexString(str2hexstr(k));\r\n        result += pushParam(val.get(k), ledgerCompatible);\r\n        result += num2hexstring(opcode.SETITEM);\r\n    }\r\n    result += num2hexstring(opcode.FROMALTSTACK);\r\n    return result;\r\n};\r\n\r\nexport const pushParam = (p: any, ledgerCompatible: boolean) => {\r\n    if (!p) {\r\n        throw Error('Parameter can not be undefined');\r\n    }\r\n    let result = '';\r\n    if (p.type === ParameterType.ByteArray) {\r\n        result += pushHexString(p.value);\r\n    } else if (p.type === ParameterType.Address) {\r\n        result += pushHexString(p.value.serialize());\r\n    } else if (p.type === ParameterType.String) {\r\n        result += pushHexString(str2hexstr(p.value));\r\n    } else if (p.type === ParameterType.Boolean) {\r\n        result += pushBool(Boolean(p.value));\r\n        result += num2hexstring(opcode.PUSH0);\r\n        result += num2hexstring(opcode.BOOLOR);\r\n    } else if (p.type === ParameterType.Map) {\r\n        result += pushMap(convertMap(p), ledgerCompatible);\r\n    } else if (p instanceof Map) {\r\n        result += pushMap(p, ledgerCompatible);\r\n    } else if (p.type === ParameterType.Array) {\r\n        for (let i = p.value.length - 1; i > -1; i--) {\r\n            result += pushParam(p.value[i], ledgerCompatible);\r\n        }\r\n        result += pushInt(p.value.length, ledgerCompatible);\r\n        result += num2hexstring(opcode.PACK);\r\n    } else if (p.type === ParameterType.Integer) {\r\n        result += pushInt(p.value, ledgerCompatible);\r\n        result += num2hexstring(opcode.PUSH0);\r\n        result += num2hexstring(opcode.ADD);\r\n    } else if (p.type === ParameterType.Long) {\r\n        result += pushBigNum(new BigNumber(p.value), ledgerCompatible);\r\n        result += num2hexstring(opcode.PUSH0);\r\n        result += num2hexstring(opcode.ADD);\r\n    } else {\r\n        throw Error('Invalid parameter type: ' + JSON.stringify(p));\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const serializeAbiFunction = (abiFunction: AbiFunction, ledgerCompatible: boolean = true) => {\r\n    const list = [];\r\n    list.push(str2hexstr(abiFunction.name));\r\n    const tmp = [];\r\n    for (const p of abiFunction.parameters) {\r\n        if (p.getType() === ParameterType.String) {\r\n            tmp.push(str2hexstr(p.getValue()));\r\n        } else if (p.getType() === ParameterType.Long) {\r\n            tmp.push(new BigNumber(p.getValue()));\r\n        } else if (p.getType() === ParameterType.Map) {\r\n            tmp.push(convertMap(p));\r\n        } else if (p.getType() === ParameterType.Address) {\r\n            tmp.push(p.getValue().serialize());\r\n        } else {\r\n            tmp.push(p.getValue());\r\n        }\r\n    }\r\n    if (list.length > 0) {\r\n        list.push(tmp);\r\n    }\r\n    const result = createCodeParamsScript(list, ledgerCompatible);\r\n    return result;\r\n};\r\n\r\nexport function convertArray(list: Parameter[]): any {\r\n    const tmp = [];\r\n    for (const p of list) {\r\n        if (p.getType && p.getType() === ParameterType.String) {\r\n            tmp.push(str2hexstr(p.getValue()));\r\n        } else if (p.getType && p.getType() === ParameterType.Long) {\r\n            tmp.push(new BigNumber(p.getValue()));\r\n        } else if (p.getType && p.getType() === ParameterType.Array) {\r\n            tmp.push(convertArray(p.value));\r\n        } else if (p.getType && p.getType() === ParameterType.Map) {\r\n            tmp.push(convertMap(p));\r\n        } else if (p.getType && p.getType() === ParameterType.Address) {\r\n            tmp.push(p.getValue().serialize());\r\n        } else {\r\n            tmp.push(p.getValue ? p.getValue() : p);\r\n        }\r\n    }\r\n    return tmp;\r\n}\r\n\r\nexport function convertMap(p: Parameter): any {\r\n    const map = new Map();\r\n    for (const k of Object.keys(p.value)) {\r\n        const pVal = p.value[k];\r\n        // map.set(k, pVal);\r\n        if (pVal.type && pVal.type === ParameterType.Map) {\r\n            map.set(k, convertMap(pVal));\r\n        } else {\r\n            map.set(k, pVal);\r\n        }\r\n    }\r\n    return map;\r\n}\r\n\r\n/**\r\n * To deserialize the value return from smart contract invoke.\r\n * @param hexstr\r\n */\r\nexport function deserializeItem(sr: StringReader): any {\r\n    const t = parseInt(sr.read(1), 16);\r\n    if ( t === ParameterTypeVal.ByteArray) {\r\n        return sr.readNextBytes();\r\n    } else if (t === ParameterTypeVal.Boolean) {\r\n        return sr.readBoolean();\r\n    } else if (t === ParameterTypeVal.Integer) {\r\n        const v = bigIntFromBytes(sr.readNextBytes()).toNumber();\r\n        return v;\r\n    } else if (t === ParameterTypeVal.Array || t === ParameterTypeVal.Struct ) {\r\n        const length = sr.readNextLen();\r\n        const list = [];\r\n        for (let i = length; i > 0; i--) {\r\n            const ele = deserializeItem(sr);\r\n            list.push(ele);\r\n        }\r\n        return list;\r\n    } else if (t === ParameterTypeVal.Map ) {\r\n        const length = sr.readNextLen();\r\n        const map = new Map();\r\n        for (let i = length; i > 0; i--) {\r\n            const key = hexstr2str(deserializeItem(sr));\r\n            const value = deserializeItem(sr);\r\n            map.set(key, value);\r\n        }\r\n        return map;\r\n    } else {\r\n        throw Error('Invalid parameter type: ' + t);\r\n    }\r\n}\r\n\r\nexport const createCodeParamsScript = (list: any[], ledgerCompatible: boolean = true) => {\r\n    let result = '';\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n        const val = list[i];\r\n        if (typeof val === 'string') {\r\n            result += pushHexString(val);\r\n        } else if (typeof val === 'number') {\r\n            result += pushInt(val, ledgerCompatible);\r\n        } else if (typeof val === 'boolean') {\r\n            result += pushBool(val);\r\n        } else if (val instanceof BigNumber) {\r\n            result += pushBigNum(val, ledgerCompatible);\r\n        } else if (val instanceof Map) {\r\n            result += pushMap(val, ledgerCompatible);\r\n            // const mapBytes = getMapBytes(val);\r\n            // result += pushHexString(mapBytes);\r\n        } else if (val instanceof Struct) {\r\n            const structBytes = getStructBytes(val);\r\n            result += pushHexString(structBytes);\r\n        } else if (val instanceof Array) {\r\n            result += createCodeParamsScript(convertArray(val), ledgerCompatible);\r\n            result += pushInt(val.length, ledgerCompatible);\r\n            result += num2hexstring(opcode.PACK);\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\n// deprecated\r\nexport const buildSmartContractParam = (functionName: string, params: Parameter[]) => {\r\n    let result = '';\r\n    for (let i = params.length - 1; i > -1; i--) {\r\n        const type = params[i].getType();\r\n        switch (type) {\r\n        case ParameterType.Boolean:\r\n            result += pushBool(params[i].getValue());\r\n            break;\r\n\r\n        case ParameterType.Integer:\r\n            result += pushInt(params[i].getValue());\r\n            break;\r\n\r\n        case ParameterType.String:\r\n            const value = str2hexstr(params[i].getValue());\r\n            result += pushHexString(value);\r\n            break;\r\n\r\n        case ParameterType.ByteArray:\r\n            result += pushHexString(params[i].getValue());\r\n            break;\r\n\r\n        case ParameterType.Map:\r\n            const mapBytes = getMapBytes(params[i].getValue());\r\n            result += pushHexString(mapBytes);\r\n            break;\r\n\r\n        case ParameterType.Struct:\r\n            const structBytes = getStructBytes(params[i].getValue());\r\n            result += pushHexString(structBytes);\r\n            break;\r\n        // case ParameterType.Array:\r\n        //     result += buildSmartContractParam(params[i].getValue());\r\n        //     result += pushInt(params[i].getValue().length);\r\n        //     result += num2hexstring(opcode.PACK);\r\n        //     break;\r\n        default:\r\n            throw new Error('Unsupported param type: ' + JSON.stringify(params[i]));\r\n        }\r\n    }\r\n\r\n    result += pushInt(params.length);\r\n    result += num2hexstring(opcode.PACK);\r\n\r\n    result += pushHexString(str2hexstr(functionName));\r\n\r\n    return result;\r\n};\r\n\r\nexport function buildWasmContractParam(params: Parameter[]): string {\r\n    let result = '';\r\n\r\n    for (const p of params) {\r\n        const type = p.getType();\r\n\r\n        switch (type) {\r\n        case ParameterType.String:\r\n            result += writeString(p.value);\r\n            break;\r\n        case ParameterType.Int:\r\n            result += I128FromInt(p.value).serialize();\r\n            break;\r\n        case ParameterType.Long:\r\n            result += I128FromBigInt(p.value).serialize();\r\n            break;\r\n        case ParameterType.ByteArray:\r\n            result += writeVarBytes(p.value);\r\n            break;\r\n        case ParameterType.Address:\r\n            result += writeAddress(p.value);\r\n            break;\r\n        case ParameterType.Boolean:\r\n            result += writeBool(p.value);\r\n            break;\r\n        case ParameterType.Array:\r\n            result += writeVarUint(p.value.length);\r\n            result += buildWasmContractParam(p.value);\r\n            break;\r\n        default:\r\n            throw new Error(`Not a supported type: ${p.type}`);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function writeUint16(data: number): string {\r\n    return num2hexstring(data, 2, true);\r\n}\r\n\r\nexport function writeUint32(data: number): string {\r\n    return num2hexstring(data, 4, true);\r\n}\r\n\r\nexport function writeUint64(data: number): string {\r\n    return num2hexstring(data, 8, true);\r\n}\r\n\r\n// data is hexstring;\r\nexport function writeVarBytes(data: string): string {\r\n    if (!isHexString(data)) {\r\n        throw new Error('[writeVarBytes] The param is not hex string.');\r\n    }\r\n    let result = '';\r\n    result += num2VarInt(data.length / 2);\r\n    result += data;\r\n    return result;\r\n}\r\n\r\nexport function writeString(data: string): string {\r\n    return writeVarBytes(str2hexstr(data));\r\n}\r\n\r\nexport function writeAddress(data: Address): string {\r\n    return data.serialize();\r\n}\r\n\r\nexport function writeI128(data: I128): string {\r\n    return data.serialize();\r\n}\r\n\r\nexport function writeBool(data: boolean): string {\r\n    if (data) {\r\n        return '01';\r\n    } else {\r\n        return '00';\r\n    }\r\n}\r\n\r\nexport function writeVarUint(data: number): string {\r\n    const buf = [];\r\n    if (data < 0xFD) {\r\n        buf[0] = data;\r\n    } else if (data <= 0xFFFF) {\r\n        buf[0] = 0xFD;\r\n        putLittleEndianUint(buf, 1, 2, data);\r\n    } else if (data <= 0xFFFFFFFF) {\r\n        buf[0] = 0xFE;\r\n        putLittleEndianUint(buf, 1, 4, data);\r\n    } else {\r\n        buf[0] = 0xFF;\r\n        putLittleEndianUint(buf, 1, 8, data);\r\n    }\r\n    return ab2hexstring(buf);\r\n}\r\n\r\nfunction putLittleEndianUint(buf: number[], start: number, size: number, data: number) {\r\n    buf[start] = data;\r\n    for (let i = start + 1; i <= size; i++) {\r\n        data = data >> (8 * (i - 1));\r\n        buf[i] = data & 0xFF;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { ERROR_CODE } from '../error';\r\nimport { hex2VarBytes, num2hexstring, StringReader } from '../utils';\r\n\r\nexport enum TransactionAttributeUsage {\r\n    Nonce           = 0x00,\r\n    Script          = 0x20,\r\n    DescriptionUrl  = 0x81,\r\n    Description     = 0x90\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * TransactionAttribute\r\n * @property {number} usage - Identifying byte\r\n * @property {string} data - Data\r\n */\r\nexport class TransactionAttribute {\r\n    usage: TransactionAttributeUsage;\r\n    // hexstring\r\n    data: string;\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.usage);\r\n        if (this.usage === TransactionAttributeUsage.Script) {\r\n            result += this.data;\r\n        } else if (this.usage === TransactionAttributeUsage.DescriptionUrl\r\n                || this.usage === TransactionAttributeUsage.Description\r\n                || this.usage === TransactionAttributeUsage.Nonce) {\r\n            result += hex2VarBytes(this.data);\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    deserialize(ss: StringReader): void {\r\n        // usage\r\n        const usage = parseInt(ss.read(1), 16);\r\n        // nonce\r\n        // const nonce = ss.read(8);\r\n        // get hash with publicKey;\r\n        const dataLen = ss.readNextLen();\r\n        const data = ss.read(dataLen);\r\n        this.usage = usage;\r\n        // this.nonce = nonce;\r\n        this.data = data;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as cryptoJS from 'crypto-js';\r\nimport Fixed64 from '../common/fixed64';\r\nimport { Address } from '../crypto/address';\r\nimport { Signable } from '../crypto/signable';\r\nimport { ab2hexstring, generateRandomArray, num2hexstring, StringReader } from '../utils';\r\nimport DeployCode from './payload/deployCode';\r\nimport InvokeCode from './payload/invokeCode';\r\nimport Payload from './payload/payload';\r\nimport { TransactionAttribute } from './txAttribute';\r\nimport { TxSignature } from './txSignature';\r\n\r\nexport enum TxType  {\r\n    BookKeeper      = 0x02,\r\n    Claim           = 0x03,\r\n    Deploy          = 0xd0,\r\n    Invoke          = 0xd1,\r\n    Enrollment      = 0x04,\r\n    Vote            = 0x05,\r\n    InvokeWasm      = 0xd2\r\n}\r\n\r\nexport const TxName = {\r\n    BookKeeper: 'BookKeeper',\r\n    Claim: 'Claim',\r\n    Deploy: 'Deploy',\r\n    Invoke: 'Invoke',\r\n    Enrollment: 'Enrollment',\r\n    Vote: 'Vote'\r\n};\r\n\r\n/**\r\n * @deprecated. Transaction fee.\r\n */\r\nexport class Fee {\r\n    static deserialize(sr: StringReader): Fee {\r\n        const fee = new Fee();\r\n        const amount = Fixed64.deserialize(sr);\r\n        const payer = sr.read(20);\r\n        fee.amount = amount;\r\n        fee.payer = new Address(payer);\r\n        return fee;\r\n    }\r\n\r\n    amount: Fixed64;\r\n\r\n    // 20 bytes address\r\n    payer: Address;\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += this.amount.serialize();\r\n        result += this.payer.serialize();\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class Transaction implements Signable {\r\n    static deserialize(hexstring: string): Transaction {\r\n        const tx = new Transaction();\r\n\r\n        // console.log(' hexstring' + hexstring)\r\n        const ss = new StringReader(hexstring);\r\n\r\n        tx.version = parseInt(ss.read(1), 16);\r\n        tx.type = parseInt(ss.read(1), 16);\r\n        tx.nonce = ss.read(4);\r\n        tx.gasPrice = Fixed64.deserialize(ss);\r\n        tx.gasLimit = Fixed64.deserialize(ss);\r\n        tx.payer = new Address(ss.read(20));\r\n        let payload;\r\n\r\n        switch (tx.type) {\r\n        case TxType.Invoke :\r\n            payload = new InvokeCode();\r\n            break;\r\n        case TxType.Deploy:\r\n            payload = new DeployCode();\r\n            break;\r\n        default :\r\n            payload = new InvokeCode();\r\n        }\r\n        payload.deserialize(ss);\r\n        tx.payload = payload;\r\n        tx.txAttributes = [];\r\n        tx.sigs = [];\r\n\r\n        const attributeLength = ss.readNextLen();\r\n        for (let i = 0; i < attributeLength; i++) {\r\n            const txAttribute = new TransactionAttribute();\r\n            txAttribute.deserialize(ss);\r\n            tx.txAttributes.push(txAttribute);\r\n        }\r\n\r\n        const sigLength = ss.readNextLen();\r\n        for (let i = 0; i < sigLength; i++) {\r\n            tx.sigs.push(TxSignature.deserialize(ss));\r\n        }\r\n\r\n        return tx;\r\n    }\r\n\r\n    /**\r\n     * Transaction type\r\n     */\r\n    type: TxType = 0xd1;\r\n\r\n    /**\r\n     * Version of transaction\r\n     */\r\n    version: number = 0x00;\r\n\r\n    /**\r\n     * Payload of transaction\r\n     */\r\n    payload: Payload;\r\n\r\n    /**\r\n     * Random hex string. 4 bytes.\r\n     */\r\n    nonce: string;\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    txAttributes: TransactionAttribute[] = [];\r\n\r\n    /**\r\n     * Gas price\r\n     */\r\n    gasPrice: Fixed64;\r\n\r\n    /**\r\n     * Gas limit\r\n     */\r\n    gasLimit: Fixed64;\r\n\r\n    /**\r\n     * Address to pay for gas\r\n     */\r\n    payer: Address;\r\n\r\n    /**\r\n     * Array of signatures\r\n     */\r\n    sigs: TxSignature[] = [];\r\n\r\n    constructor() {\r\n        this.nonce = ab2hexstring(generateRandomArray(4));\r\n        this.gasPrice = new Fixed64();\r\n\r\n        // const limit = num2hexstring(DEFAULT_GAS_LIMIT, 8, true);\r\n\r\n        this.gasLimit = new Fixed64();\r\n        this.payer = new Address('0000000000000000000000000000000000000000');\r\n    }\r\n\r\n    /**\r\n     * Serialize transaction to hex string\r\n     * The result is used to send to blockchain.\r\n     */\r\n    serialize(): string {\r\n        const unsigned = this.serializeUnsignedData();\r\n        const signed = this.serializeSignedData();\r\n\r\n        return unsigned + signed;\r\n    }\r\n\r\n    /**\r\n     * Serialize transaction data exclueds signatures\r\n     */\r\n    serializeUnsignedData() {\r\n        let result = '';\r\n        result += num2hexstring(this.version);\r\n        result += num2hexstring(this.type);\r\n\r\n        // nonce 4bytes\r\n        result += this.nonce;\r\n        result += this.gasPrice.serialize();\r\n        result += this.gasLimit.serialize();\r\n        result += this.payer.serialize();\r\n        result += this.payload.serialize();\r\n\r\n        // serialize transaction attributes\r\n        result += num2hexstring(this.txAttributes.length);\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < this.txAttributes.length; i++) {\r\n            result += this.txAttributes[i].serialize();\r\n        }\r\n        // result += num2hexstring(this.fee.length)\r\n        // for (let i=0 ; i< this.fee.length; i++) {\r\n        //     result += this.fee[i].amount.serialize()\r\n        //     result += this.fee[i].payer.serialize()\r\n        // }\r\n\r\n        // if(this.networkFee) {\r\n        //     result += this.networkFee.serialize()\r\n        // }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Serialize signatures\r\n     */\r\n    serializeSignedData() {\r\n        let result = '';\r\n        // programs\r\n        result += num2hexstring(this.sigs.length);\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < this.sigs.length; i++) {\r\n            result += this.sigs[i].serialize();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the signable content\r\n     */\r\n    getSignContent() {\r\n        const data = this.serializeUnsignedData();\r\n\r\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\r\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\r\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\r\n\r\n        return ProgramSha2562;\r\n    }\r\n\r\n    /**\r\n     * Get the hash of transaction\r\n     * @deprecated Use getSignContent instead\r\n     */\r\n    getHash() {\r\n        return this.getSignContent();\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { PrivateKey, PublicKey, Signable, SignatureScheme } from '../crypto';\r\nimport { hex2VarBytes, StringReader } from '../utils';\r\nimport { getParamsFromProgram, getProgramInfo,\r\n    programFromMultiPubKey, programFromParams, programFromPubKey } from './program';\r\n\r\n/**\r\n * Signature generated by signing transaction hash with Private Keys.\r\n */\r\nexport class TxSignature {\r\n\r\n    /**\r\n     * Deserializes hex representation to Transaction Signature\r\n     *\r\n     * @param sr Hex string reader\r\n     */\r\n    static deserialize(sr: StringReader) {\r\n        const sig = new TxSignature();\r\n        // sig.pubKeys = [];\r\n        // const pubKeyLength = sr.readNextLen();\r\n\r\n        // for (let i = 0; i < pubKeyLength; i++) {\r\n        //     const serializedLength = sr.readNextLen();\r\n        //     const pk = PublicKey.deserializeHex(sr, serializedLength);\r\n        //     sig.pubKeys.push(pk);\r\n        // }\r\n\r\n        // sig.M = sr.readNextLen();\r\n        // sig.sigData = [];\r\n\r\n        // const dataLength = sr.readNextLen();\r\n        // for (let i = 0; i < dataLength; i++) {\r\n        //     const data = sr.readNextBytes();\r\n        //     sig.sigData.push(data);\r\n        // }\r\n        const invocationScript = sr.readNextBytes();\r\n        const verificationScript = sr.readNextBytes();\r\n        const sigData = getParamsFromProgram(invocationScript);\r\n        const info = getProgramInfo(verificationScript);\r\n        sig.M = info.M;\r\n        sig.pubKeys = info.pubKeys;\r\n        sig.sigData = sigData;\r\n        return sig;\r\n    }\r\n\r\n    /**\r\n     * Creates Transaction signature of hash with supplied private key and scheme.\r\n     *\r\n     * If the signature schemas is not provided, the default schemes for the key types are used.\r\n     *\r\n     * @param hash hash of the transaction or signable transaction\r\n     * @param privateKey Private key to use\r\n     * @param scheme Signature scheme to use\r\n     */\r\n    static create(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\r\n        const signature = new TxSignature();\r\n\r\n        signature.M = 1;\r\n        signature.pubKeys = [privateKey.getPublicKey()];\r\n        signature.sigData = [privateKey.sign(hash, scheme).serializeHex()];\r\n\r\n        return signature;\r\n    }\r\n\r\n    /**\r\n     * Creates Transaction signature of hash with supplied private key and scheme asynchroniously.\r\n     *\r\n     * If the signature schemas is not provided, the default schemes for the key types are used.\r\n     *\r\n     * @param hash hash of the transaction or signable transaction\r\n     * @param privateKey Private key to use\r\n     * @param scheme Signature scheme to use\r\n     */\r\n    static async createAsync(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\r\n        const signature = new TxSignature();\r\n\r\n        signature.M = 1;\r\n        signature.pubKeys = [privateKey.getPublicKey()];\r\n        signature.sigData = [(await privateKey.signAsync(hash, scheme)).serializeHex()];\r\n\r\n        return signature;\r\n    }\r\n\r\n    /**\r\n     * Public keys used to create this signature.\r\n     */\r\n    pubKeys: PublicKey[];\r\n\r\n    // Cardinality of the signature\r\n    M: number;\r\n\r\n    // Signature values\r\n    sigData: string[];\r\n\r\n    /**\r\n     * Serializes signature to Hex representation.\r\n     *\r\n     */\r\n    serialize(): string {\r\n        let result = '';\r\n        // result += num2hexstring(this.pubKeys.length);\r\n\r\n        // // tslint:disable-next-line:prefer-for-of\r\n        // for (let i = 0; i < this.pubKeys.length; i++) {\r\n        //     const serialized = this.pubKeys[i].serializeHex();\r\n        //     result += num2hexstring(serialized.length / 2);\r\n        //     result += serialized;\r\n        // }\r\n\r\n        // result += num2hexstring(this.M);\r\n\r\n        // result += num2hexstring(this.sigData.length);\r\n\r\n        // // tslint:disable-next-line:prefer-for-of\r\n        // for (let i = 0; i < this.sigData.length; i++) {\r\n        //     result += hex2VarBytes(this.sigData[i]);\r\n        // }\r\n        const invocationScript = programFromParams(this.sigData);\r\n        let verificationScript = '';\r\n        if (this.pubKeys.length === 0) {\r\n            throw new Error('No pubkeys in sig');\r\n        } else if (this.pubKeys.length === 1) {\r\n            verificationScript = programFromPubKey(this.pubKeys[0]);\r\n        } else {\r\n            verificationScript = programFromMultiPubKey(this.pubKeys, this.M);\r\n        }\r\n        result += hex2VarBytes(invocationScript);\r\n        result += hex2VarBytes(verificationScript);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { Address } from '../crypto/address';\r\nimport { Transaction } from './transaction';\r\n\r\nexport class Transfer extends Transaction {\r\n    amount: number | string;\r\n    tokenType: string;\r\n    from: Address;\r\n    to: Address;\r\n    method: string;\r\n}\r\n","\r\nimport Fixed64 from '../common/fixed64';\r\nimport { NATIVE_INVOKE_NAME } from '../consts';\r\nimport { Address } from '../crypto';\r\nimport { num2hexstring, str2hexstr } from '../utils';\r\nimport OPCODE from './opcode';\r\nimport InvokeCode from './payload/invokeCode';\r\nimport { pushHexString } from './program';\r\nimport { pushInt } from './scriptBuilder';\r\nimport { Transaction, TxType } from './transaction';\r\nimport { Transfer } from './transfer';\r\n\r\n/**\r\n * Creates transaction to invoke native contract\r\n * @param funcName Function name of contract to call\r\n * @param params Parameters serialized in hex string\r\n * @param contractAddr Adderss of contract\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for transaction gas\r\n */\r\nexport function makeNativeContractTx(\r\n    funcName: string,\r\n    params: string,\r\n    contractAddr: Address,\r\n    gasPrice?: string,\r\n    gasLimit?: string,\r\n    payer?: Address\r\n) {\r\n    let code = '';\r\n    code += params;\r\n    code += pushHexString(str2hexstr(funcName));\r\n    code += pushHexString(contractAddr.serialize());\r\n    code += pushInt(0);\r\n    code += num2hexstring(OPCODE.SYSCALL);\r\n    code += pushHexString(str2hexstr(NATIVE_INVOKE_NAME));\r\n    const payload = new InvokeCode();\r\n    payload.code = code;\r\n\r\n    let tx: Transaction;\r\n    if (funcName === 'transfer' || funcName === 'transferFrom') {\r\n        tx = new Transfer();\r\n    } else {\r\n        tx = new Transaction();\r\n    }\r\n\r\n    tx.type = TxType.Invoke;\r\n    tx.payload = payload;\r\n    if (gasLimit) {\r\n        tx.gasLimit = new Fixed64(gasLimit);\r\n    }\r\n    if (gasPrice) {\r\n        tx.gasPrice = new Fixed64(gasPrice);\r\n    }\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    }\r\n    return tx;\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { Address } from '../../crypto/address';\r\nimport opcode from '../../transaction/opcode';\r\nimport { hex2VarBytes, num2hexstring, str2VarBytes } from '../../utils';\r\nimport { pushHexString } from './../../transaction/program';\r\nimport { pushBigNum, pushBool, pushInt } from './../../transaction/scriptBuilder';\r\nimport { Parameter, ParameterType } from './parameter';\r\nimport Struct from './struct';\r\n\r\nexport function buildParams(params: Parameter[]): string {\r\n    let result = '';\r\n    for (const p of params) {\r\n        const type = p.getType();\r\n        switch (type) {\r\n        case ParameterType.ByteArray:\r\n            result += hex2VarBytes(p.value);\r\n            break;\r\n        case ParameterType.Int:\r\n            result += num2hexstring(p.value, 4, true);\r\n            break;\r\n        case ParameterType.String:\r\n            result += str2VarBytes(p.value);\r\n            break;\r\n        case ParameterType.Address:\r\n            result += p.value.serialize();\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function createCodeParamScript(obj: any): string {\r\n    let result = '';\r\n    // Consider string as hexstr\r\n    if (typeof obj === 'string') {\r\n        result += pushHexString(obj);\r\n    } else if (typeof obj === 'boolean') {\r\n        result += pushBool(obj);\r\n    } else if (typeof obj === 'number') {\r\n        result += pushInt(obj);\r\n    } else if (obj instanceof BigNumber) {\r\n        result += pushBigNum(obj);\r\n    } else if (obj instanceof Address) {\r\n        result += pushHexString(obj.serialize());\r\n    } else if (obj instanceof Struct) {\r\n        for (const v of obj.list) {\r\n            result += createCodeParamScript(v);\r\n            result += num2hexstring(opcode.DUPFROMALTSTACK);\r\n            result += num2hexstring(opcode.SWAP);\r\n            result += num2hexstring(opcode.APPEND);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function buildNativeCodeScript(list: any[]) {\r\n    let result = '';\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n        const val = list[i];\r\n        // Consider string as hexstr\r\n        if (typeof val === 'string') {\r\n            result += pushHexString(val);\r\n        } else if (typeof val === 'boolean') {\r\n            result += pushBool(val);\r\n        } else if (typeof val === 'number') {\r\n            result += pushInt(val);\r\n        } else if (val instanceof BigNumber) {\r\n            result += pushBigNum(val);\r\n        } else if (val instanceof Address) {\r\n            result += pushHexString(val.serialize());\r\n        } else if (val instanceof Struct) {\r\n            result += pushInt(0);\r\n            result += num2hexstring(opcode.NEWSTRUCT);\r\n            result += num2hexstring(opcode.TOALTSTACK);\r\n            for (const v of val.list) {\r\n                result += createCodeParamScript(v);\r\n                result += num2hexstring(opcode.DUPFROMALTSTACK);\r\n                result += num2hexstring(opcode.SWAP);\r\n                result += num2hexstring(opcode.APPEND);\r\n            }\r\n            result += num2hexstring(opcode.FROMALTSTACK);\r\n        // } else if (Array.isArray(val) && isTypedArray(val, Struct)) {\r\n        //     result += pushInt(0);\r\n        //     result += num2hexstring(opcode.NEWSTRUCT);\r\n        //     result += num2hexstring(opcode.TOALTSTACK);\r\n        //     for (const s of val) {\r\n        //         result += createCodeParamScript(s);\r\n        //     }\r\n        //     result += num2hexstring(opcode.FROMALTSTACK);\r\n        //     result += pushInt(val.length);\r\n        //     result += num2hexstring(opcode.PACK);\r\n        } else if (Array.isArray(val)) {\r\n            result += buildNativeCodeScript(val);\r\n            result += pushInt(val.length);\r\n            result += num2hexstring(opcode.PACK);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function isTypedArray(arr: any[], type: any) {\r\n    let result = true;\r\n    for (const a of arr) {\r\n        if (!(a instanceof type)) {\r\n            result = false;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { BigNumber } from 'bignumber.js';\r\nimport BigInt from '../../common/bigInt';\r\nimport { TOKEN_TYPE } from '../../consts';\r\nimport { Address } from '../../crypto';\r\nimport { ERROR_CODE } from '../../error';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { Transfer } from '../../transaction/transfer';\r\nimport { hex2VarBytes, hexstr2str, StringReader } from '../../utils';\r\nimport { makeNativeContractTx } from './../../transaction/transactionUtils';\r\nimport { buildNativeCodeScript } from './../abi/nativeVmParamsBuilder';\r\nimport Struct from './../abi/struct';\r\nimport { State } from './token';\r\n\r\nexport const TST_CONTRACT = '0000000000000000000000000000000000000001';\r\nexport const TSG_CONTRACT = '0000000000000000000000000000000000000002';\r\n\r\n/**\r\n * Get the address of native asset contract\r\n * @param tokenType Token type. Can only be TST or TSG\r\n */\r\nexport function getTokenContract(tokenType: string) {\r\n    if (tokenType === TOKEN_TYPE.TST) {\r\n        return new Address(TST_CONTRACT);\r\n    } else if (tokenType === TOKEN_TYPE.TSG) {\r\n        return new Address(TSG_CONTRACT);\r\n    } else {\r\n        throw new Error('Error token type.');\r\n    }\r\n}\r\n\r\n/**\r\n * Verify amount\r\n * @param amount Amount\r\n */\r\nexport function verifyAmount(amount: number | string) {\r\n    const value = new BigNumber(amount);\r\n\r\n    if (!value.isInteger() || value.lte(new BigNumber(0))) {\r\n        throw new Error('Amount is invalid.');\r\n    }\r\n}\r\n\r\n/**\r\n * Creates transaction to transfer native assets.\r\n * @param tokenType TST or TSG\r\n * @param from sender's address\r\n * @param to receiver's address\r\n * @param amount Amount of amount to transfer\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for transaction's gas.\r\n */\r\nexport function makeTransferTx(\r\n    tokenType: string,\r\n    from: Address,\r\n    to: Address,\r\n    amount: number | string,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transfer {\r\n    verifyAmount(amount);\r\n    const num = new BigNumber(amount);\r\n    const struct = new Struct();\r\n    struct.add(from, to, num);\r\n    const list = [];\r\n    list.push([struct]);\r\n    const contract = getTokenContract(tokenType);\r\n    const params = buildNativeCodeScript(list);\r\n    const tx: Transfer = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit) as any;\r\n    tx.tokenType = tokenType;\r\n    tx.from = from;\r\n    tx.to = to;\r\n    tx.amount = amount;\r\n    tx.method = 'transfer';\r\n\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    } else {\r\n        tx.payer = from;\r\n    }\r\n    return tx;\r\n}\r\n\r\n/**\r\n * transfer from multiple senders to one receiver\r\n * this tx needs multiple senders' signature.\r\n * @param tokenType\r\n * @param from array of senders' address\r\n * @param to receiver's address\r\n * @param amounts\r\n */\r\nexport function makeTransferStateTx(\r\n    tokenType: string,\r\n    states: State[],\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const structs = [];\r\n    for (const state of states) {\r\n        verifyAmount(state.value);\r\n        const s = new Struct();\r\n        s.add(state.from, state.to, new BigNumber(state.value));\r\n        structs.push(s);\r\n    }\r\n\r\n    const list = [];\r\n    list.push(structs);\r\n    const params = buildNativeCodeScript(list);\r\n    const contract = getTokenContract(tokenType);\r\n    const tx = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit);\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    }\r\n    return tx;\r\n}\r\n\r\n/**\r\n * transfer from one sender to multiple receivers\r\n * @param tokenType\r\n * @param from\r\n * @param to\r\n * @param amounts\r\n */\r\nexport function makeTransferToMany(\r\n    tokenType: string,\r\n    from: Address,\r\n    to: Address[],\r\n    amounts: string | number [],\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n\r\n    if (to.length !== amounts.length) {\r\n        throw new Error('Params error.');\r\n    }\r\n\r\n    const structs = [];\r\n    for (let i = 0; i < to.length; i++) {\r\n        verifyAmount(amounts[i]);\r\n        const s = new Struct();\r\n        s.add(from, to[i], new BigNumber(amounts[i]));\r\n        structs.push(s);\r\n    }\r\n\r\n    const list = [];\r\n    list.push(structs);\r\n\r\n    const contract = getTokenContract(tokenType);\r\n    const params = buildNativeCodeScript(list);\r\n    const tx: Transfer = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit) as any;\r\n    tx.payer = from;\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Withdraw tsg from sender's address and send to receiver's address\r\n * @param from Sender's address\r\n * @param to Receiver's address\r\n * @param amount Amount of TSG to withdraw.The value needs to multiply 1e9 to keep precision\r\n * @param payer Address to pay for transaction's gas\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeWithdrawTsgTx(from: Address, to: Address, amount: number | string, payer: Address,\r\n                                  gasPrice: string, gasLimit: string): Transfer {\r\n    verifyAmount(amount);\r\n    const num = new BigNumber(amount);\r\n\r\n    // const tf = new TransferFrom(from, new Address(TST_CONTRACT), to, amount);\r\n    // const params = tf.serialize();\r\n    const list = [];\r\n    const struct = new Struct();\r\n    struct.add(from, new Address(TST_CONTRACT), to, num);\r\n    list.push(struct);\r\n    const args = buildNativeCodeScript(list);\r\n    const tx: Transfer = makeNativeContractTx(\r\n        'transferFrom', args, new Address(TSG_CONTRACT) , gasPrice, gasLimit) as any;\r\n    tx.payer = payer;\r\n    tx.tokenType = 'TSG';\r\n    tx.from = from;\r\n    tx.to = to;\r\n    tx.amount = amount;\r\n    tx.method = 'transferFrom';\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Creates transaction to query allowance that can be sent from sender to receiver\r\n * @param asset Asset type. Only TST or TSG.\r\n * @param from Sender's address\r\n * @param to Receiver's address\r\n */\r\nexport function makeQueryAllowanceTx(asset: string, from: Address, to: Address): Transaction {\r\n    asset = asset.toLowerCase();\r\n    if (asset !== 'tst' && asset !== 'tsg') {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n\r\n    let contract = '';\r\n    if (asset === 'tsg') {\r\n        contract = TSG_CONTRACT;\r\n    } else {\r\n        contract = TST_CONTRACT;\r\n    }\r\n    const list = [];\r\n    const struct = new Struct();\r\n    struct.add(from, to);\r\n    list.push(struct);\r\n    const params = buildNativeCodeScript(list);\r\n    const tx = makeNativeContractTx('allowance', params, new Address(contract), '0', '0');\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Creates transaction to query balance.\r\n * @param asset Token type,tst or tsg\r\n * @param address Address to query balance\r\n */\r\nexport function makeQueryBalanceTx(asset: string,  address: Address): Transaction {\r\n    asset = asset.toLowerCase();\r\n    if (asset !== 'tst' && asset !== 'tsg') {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    let contract = '';\r\n    if (asset === 'tsg') {\r\n        contract = TSG_CONTRACT;\r\n    } else {\r\n        contract = TST_CONTRACT;\r\n    }\r\n    const params = hex2VarBytes(address.serialize());\r\n    const tx = makeNativeContractTx('balanceOf', params, new Address(contract), '0', '0');\r\n    return tx;\r\n}\r\n\r\nexport function deserializeTransferTx(str: string): Transfer {\r\n    const tx: Transfer = Transaction.deserialize(str) as any;\r\n    const code = tx.payload.serialize();\r\n    const contractIndex1 = code.lastIndexOf('14' + '000000000000000000000000000000000000000');\r\n    const contractIndex2 = code.lastIndexOf('14' + '0000000000000000000000000000000000000002');\r\n    if (contractIndex1 > 0 && code.substr(contractIndex1 + 41, 1) === '1') {\r\n        tx.tokenType = 'TST';\r\n    } else if (contractIndex1 > 0 && code.substr(contractIndex1 + 41, 1) === '2') {\r\n        tx.tokenType = 'TSG';\r\n    } else {\r\n        throw new Error('Not a transfer tx');\r\n    }\r\n    const contractIndex = Math.max(contractIndex1, contractIndex2);\r\n    const params = code.substring(0, contractIndex);\r\n    const paramsEnd = params.indexOf('6a7cc86c') + 8;\r\n    if (params.substr(paramsEnd, 4) === '51c1') { // transfer\r\n        const methodStr = params.substring(paramsEnd + 6);\r\n        tx.method = hexstr2str(methodStr);\r\n    } else {\r\n        const methodStr = params.substring(paramsEnd + 2);\r\n        tx.method = hexstr2str(methodStr);\r\n    }\r\n\r\n    if (tx.method === 'transfer') {\r\n        const sr = new StringReader(params);\r\n        // const codeLength = sr.readNextLen();\r\n        // const bytes = sr.read(4);\r\n        sr.pos += 10;\r\n        const from = new Address(sr.read(20));\r\n        tx.from = from;\r\n        // const bytes2 = sr.read(4);\r\n        sr.pos += 8;\r\n        const to = new Address(sr.read(20));\r\n        tx.to = to;\r\n        // const bytes3 = sr.read(3);\r\n        sr.pos += 6;\r\n        const numTmp = parseInt(sr.read(1), 16);\r\n        if (sr.str.substr(sr.pos, 6) === '6a7cc8') {\r\n            tx.amount = numTmp - 80;\r\n        } else {\r\n            const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\r\n            tx.amount = new BigNumber(amount).toString();\r\n        }\r\n    } else if (tx.method === 'transferFrom') {\r\n        const sr = new StringReader(params);\r\n        // const codeLength = sr.readNextLen();\r\n        // const bytes = sr.read(4);\r\n        sr.pos += 10;\r\n        const from = new Address(sr.read(20));\r\n        tx.from = from;\r\n        // const bytes1 = sr.read(4);\r\n        // const contract = new Address(sr.read(20));\r\n        // const bytes2 = sr.read(4);\r\n        sr.pos += 56;\r\n        const to = new Address(sr.read(20));\r\n        tx.to = to;\r\n        // const bytes3 = sr.read(3);\r\n        sr.pos += 6;\r\n        const numTmp = parseInt(sr.read(1), 16);\r\n        if (sr.str.substr(sr.pos, 6) === '6a7cc8') {\r\n            tx.amount = numTmp - 80;\r\n        } else {\r\n            const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\r\n            tx.amount = new BigNumber(amount).toString();\r\n        }\r\n    } else {\r\n        throw new Error('Not a transfer tx');\r\n    }\r\n\r\n    return tx;\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { Address, PublicKey } from '../../crypto';\r\nimport { DDOAttribute } from '../../transaction/ddo';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { makeNativeContractTx } from '../../transaction/transactionUtils';\r\nimport { num2hexstring, str2hexstr } from '../../utils';\r\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\r\nimport Struct from '../abi/struct';\r\n\r\n/**\r\n * Address of TST ID contract\r\n */\r\nexport const TSTID_CONTRACT = '0000000000000000000000000000000000000003';\r\n\r\n/**\r\n * Method names in TST ID contract\r\n */\r\nconst TSTID_METHOD  = {\r\n    regIDWithPublicKey: 'regIDWithPublicKey',\r\n    regIDWithAttributes: 'regIDWithAttributes',\r\n    addAttributes: 'addAttributes',\r\n    removeAttribute: 'removeAttribute',\r\n    getAttributes: 'getAttributes',\r\n    getDDO: 'getDDO',\r\n    addKey: 'addKey',\r\n    removeKey: 'removeKey',\r\n    getPublicKeys: 'getPublicKeys',\r\n    addRecovery: 'addRecovery',\r\n    changeRecovery: 'changeRecovery',\r\n    getKeyState: 'getKeyState'\r\n};\r\n\r\n/**\r\n * Registers Identity.\r\n *\r\n * GAS calculation: gasLimit * gasPrice is equal to the amount of gas consumed.\r\n *\r\n * @param tstId User's TST ID\r\n * @param publicKey Public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildRegisterTstidTx(\r\n    tstId: string,\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = TSTID_METHOD.regIDWithPublicKey;\r\n\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(tstId, publicKey.serializeHex());\r\n    const list = [struct];\r\n    const params = buildNativeCodeScript(list);\r\n\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(TSTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Registers Identity with initial attributes.\r\n *\r\n * @param tstId User's TST ID\r\n * @param attributes Array of DDOAttributes\r\n * @param publicKey User's public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildRegIdWithAttributes(\r\n    tstId: string,\r\n    attributes: DDOAttribute[],\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n) {\r\n    const method = TSTID_METHOD.regIDWithAttributes;\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n\r\n    // let attrs = '';\r\n    // for (const a of attributes) {\r\n    //     attrs += a.serialize();\r\n    // }\r\n\r\n    // const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, tstId);\r\n    // const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, publicKey.serializeHex());\r\n    // const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, attrs);\r\n    // f.setParamsValue(p1, p2, p3);\r\n    const attrLen = attributes.length;\r\n    const struct = new Struct();\r\n    struct.add(tstId, publicKey.serializeHex(), attrLen);\r\n    for (const a of attributes) {\r\n        const key = str2hexstr(a.key);\r\n        const type = str2hexstr(a.type);\r\n        const value = str2hexstr(a.value);\r\n        struct.add(key, type, value);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(TSTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Adds attributes to TST ID.\r\n *\r\n * @param tstId User's TST ID\r\n * @param attributes Array of DDOAttributes\r\n * @param publicKey User's public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildAddAttributeTx(\r\n    tstId: string,\r\n    attributes: DDOAttribute[],\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = TSTID_METHOD.addAttributes;\r\n\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(tstId, attributes.length);\r\n    for (const a of attributes) {\r\n        const key = str2hexstr(a.key);\r\n        const type = str2hexstr(a.type);\r\n        const value = str2hexstr(a.value);\r\n        struct.add(key, type, value);\r\n    }\r\n    struct.list.push(publicKey.serializeHex());\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(TSTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Removes attribute from TST ID.\r\n *\r\n * @param tstId User's TST ID\r\n * @param key Key of attribute to remove\r\n * @param publicKey User's public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n *\r\n */\r\nexport function buildRemoveAttributeTx(\r\n    tstId: string,\r\n    key: string,\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = TSTID_METHOD.removeAttribute;\r\n\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n\r\n    const struct = new Struct();\r\n    struct.add(tstId, str2hexstr(key), publicKey.serializeHex());\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(TSTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries attributes attached to TST ID.\r\n *\r\n * @param tstId User's TST ID\r\n */\r\nexport function buildGetAttributesTx(tstId: string) {\r\n    const method = TSTID_METHOD.getAttributes;\r\n\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n\r\n    const struct = new Struct();\r\n    struct.add(tstId);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(TSTID_CONTRACT));\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries Description Object of TST ID(DDO).\r\n *\r\n * @param tstId User's TST ID\r\n */\r\nexport function buildGetDDOTx(tstId: string) {\r\n    const method = TSTID_METHOD.getDDO;\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n\r\n    const struct = new Struct();\r\n    struct.add(tstId);\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(method, params, new Address(TSTID_CONTRACT));\r\n    return tx;\r\n}\r\n/**\r\n * Adds a new public key to TST ID.\r\n *\r\n * @param tstId User's TST ID\r\n * @param newPk New public key to be added\r\n * @param userKey User's public key or address\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildAddControlKeyTx(\r\n    tstId: string,\r\n    newPk: PublicKey,\r\n    userKey: PublicKey | Address,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = TSTID_METHOD.addKey;\r\n\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n\r\n    const p1 = tstId;\r\n    const p2 = newPk.serializeHex();\r\n    let p3;\r\n    if (userKey instanceof PublicKey) {\r\n        p3 = userKey.serializeHex();\r\n    } else if (userKey instanceof Address) {\r\n        p3 = userKey.serialize();\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(TSTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Revokes a public key from TST ID.\r\n *\r\n * @param tstId User's TST ID\r\n * @param pk2Remove Public key to be removed\r\n * @param sender User's public key or address\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildRemoveControlKeyTx(\r\n    tstId: string,\r\n    pk2Remove: PublicKey,\r\n    sender: PublicKey | Address,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = TSTID_METHOD.removeKey;\r\n\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n\r\n    const p1 = tstId;\r\n    const p2 = pk2Remove.serializeHex();\r\n    let p3;\r\n    if (sender instanceof PublicKey) {\r\n        p3 = sender.serializeHex();\r\n    } else if (sender instanceof Address) {\r\n        p3 = sender.serialize();\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(TSTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries public keys attached to TST ID.\r\n *\r\n * @param tstId User's TST ID\r\n */\r\nexport function buildGetPublicKeysTx(tstId: string) {\r\n    const method = TSTID_METHOD.getPublicKeys;\r\n\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(tstId);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(TSTID_CONTRACT));\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Adds recovery address to TST ID.\r\n *\r\n * @param tstId User's TST ID\r\n * @param recovery Recovery address, must have not be set\r\n * @param publicKey User's public key, must be user's existing public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildAddRecoveryTx(\r\n    tstId: string,\r\n    recovery: Address,\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = TSTID_METHOD.addRecovery;\r\n\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n\r\n    const p1 = tstId;\r\n    const p2 = recovery;\r\n    const p3 = publicKey.serializeHex();\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(method, params, new Address(TSTID_CONTRACT), gasPrice, gasLimit, payer);\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Changes recovery address of TST ID.\r\n *\r\n * This contract call must be initiated by the original recovery address.\r\n *\r\n * @param tstId user's TST ID\r\n * @param newrecovery New recovery address\r\n * @param oldrecovery Original recoevery address\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildChangeRecoveryTx(\r\n    tstId: string,\r\n    newrecovery: Address,\r\n    oldrecovery: Address,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = TSTID_METHOD.changeRecovery;\r\n\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n\r\n    const p1 = tstId;\r\n    const p2 = newrecovery;\r\n    const p3 = oldrecovery;\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(TSTID_CONTRACT),\r\n    gasPrice, gasLimit);\r\n    tx.payer = payer || oldrecovery;\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries the state of the public key associated with TST ID.\r\n *\r\n * @param tstId user's TST ID\r\n * @param pkId User's public key Id\r\n */\r\nexport function buildGetPublicKeyStateTx(tstId: string, pkId: number) {\r\n    const method = TSTID_METHOD.getKeyState;\r\n\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log('did: ' + tstId);\r\n\r\n    const index = num2hexstring(pkId, 4, true);\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log('index: ' + index);\r\n\r\n    const struct = new Struct();\r\n    struct.add(tstId, pkId);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(TSTID_CONTRACT));\r\n    return tx;\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport Fixed64 from '../common/fixed64';\r\nimport { REST_API, TX_MAX_SIG_SIZE } from '../consts';\r\nimport { Address, PrivateKey, SignatureScheme } from '../crypto';\r\nimport { PublicKey } from '../crypto/PublicKey';\r\nimport { ERROR_CODE } from '../error';\r\nimport AbiFunction from '../smartcontract/abi/abiFunction';\r\nimport { Parameter } from '../smartcontract/abi/parameter';\r\n\r\nimport {\r\n    num2hexstring,\r\n    reverseHex,\r\n    str2hexstr\r\n} from '../utils';\r\nimport { ParameterType } from './../smartcontract/abi/parameter';\r\nimport opcode from './opcode';\r\nimport DeployCode from './payload/deployCode';\r\nimport InvokeCode from './payload/invokeCode';\r\nimport { comparePublicKeys } from './program';\r\nimport { buildWasmContractParam, createCodeParamsScript, serializeAbiFunction, writeVarBytes } from './scriptBuilder';\r\nimport { Transaction, TxType } from './transaction';\r\n\r\nimport { makeTransferTx } from '../smartcontract/nativevm/tstAssetTxBuilder';\r\nimport { buildGetDDOTx, buildRegisterTstidTx } from '../smartcontract/nativevm/tstidContractTxBuilder';\r\nimport { VmType } from './payload/deployCode';\r\nimport { TxSignature } from './txSignature';\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const Default_params = {\r\n    Action: 'sendrawtransaction',\r\n    Version: '1.0.0',\r\n    Type: '',\r\n    Op: 'test'\r\n};\r\n\r\n/**\r\n * Signs the transaction object.\r\n *\r\n * If there is already a signature, the new one will replace existing.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param privateKey Private key to sign with\r\n * @param schema Signature Schema to use\r\n */\r\nexport const signTransaction = (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\r\n    const signature = TxSignature.create(tx, privateKey, schema);\r\n\r\n    tx.sigs = [signature];\r\n};\r\n\r\n/**\r\n * Signs the transaction object asynchroniously.\r\n *\r\n * If there is already a signature, the new one will replace existing.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param privateKey Private key to sign with\r\n * @param schema Signature Schema to use\r\n */\r\nexport const signTransactionAsync = async (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\r\n    const signature = await TxSignature.createAsync(tx, privateKey, schema);\r\n\r\n    tx.sigs = [signature];\r\n};\r\n\r\n/**\r\n * Signs the transaction object.\r\n *\r\n * If there is already a signature, the new one will be added to the end.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param privateKey Private key to sign with\r\n * @param schema Signature Schema to use\r\n */\r\nexport const addSign = (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\r\n    const signature = TxSignature.create(tx, privateKey, schema);\r\n\r\n    tx.sigs.push(signature);\r\n};\r\n\r\nconst equalPks = (pks1: PublicKey[], pks2: PublicKey[]): boolean => {\r\n    if (pks1 === pks2) {\r\n        return true;\r\n    }\r\n    pks1.sort(comparePublicKeys);\r\n    pks2.sort(comparePublicKeys);\r\n    if (pks1.length !== pks2.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < pks1.length ; i++) {\r\n        if (pks1[i].key !== pks2[i].key) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\n/**\r\n * Signs the transaction with multiple signatures with multi-sign keys.\r\n *\r\n * If there is already a signature, the new ones will be added to the end.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param M m of the (m ,n) multi sign address threshold\r\n * @param pubKeys Array of Public keys of (m,n) multi sign address, the number is n\r\n * @param privateKey Private key to sign the tx.\r\n * @param scheme Signature scheme to use\r\n */\r\nexport const signTx = (tx: Transaction, M: number, pubKeys: PublicKey[],\r\n                       privateKey: PrivateKey, scheme?: SignatureScheme) => {\r\n\r\n    if (tx.sigs.length === 0) {\r\n        tx.sigs = [];\r\n    } else {\r\n        if (tx.sigs.length > TX_MAX_SIG_SIZE || M > pubKeys.length || M <= 0 || pubKeys.length === 0) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < tx.sigs.length; i++) {\r\n            if (equalPks(tx.sigs[i].pubKeys, pubKeys)) {\r\n                if (tx.sigs[i].sigData.length + 1 > pubKeys.length) {\r\n                    throw new Error('Too many sigData');\r\n                }\r\n                const signData = privateKey.sign(tx, scheme).serializeHex();\r\n                tx.sigs[i].sigData.push(signData);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    const sig = new TxSignature();\r\n    sig.M = M;\r\n    sig.pubKeys = pubKeys;\r\n    sig.sigData = [privateKey.sign(tx, scheme).serializeHex()];\r\n    tx.sigs.push(sig);\r\n};\r\n\r\n/**\r\n * Creates transaction to inovke smart contract\r\n * @param funcName Function name of smart contract\r\n * @param params Array of Parameters or serialized parameters\r\n * @param contractAddr Address of contract\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for gas\r\n */\r\nexport const makeInvokeTransaction = (\r\n    funcName: string,\r\n    params: Parameter[] | string,\r\n    contractAddr: Address,\r\n    gasPrice?: string,\r\n    gasLimit?: string,\r\n    payer?: Address,\r\n    ledgerCompatible: boolean = true\r\n) => {\r\n    const tx = new Transaction();\r\n    tx.type = TxType.Invoke;\r\n\r\n    let args = '';\r\n    if (typeof params === 'string') {\r\n        args = params;\r\n    } else {\r\n        const abiFunc = new AbiFunction(funcName, '', params);\r\n        args = serializeAbiFunction(abiFunc, ledgerCompatible);\r\n    }\r\n\r\n    let code = args + num2hexstring(opcode.APPCALL);\r\n    code += contractAddr.serialize();\r\n\r\n    const payload = new InvokeCode();\r\n    payload.code = code;\r\n    tx.payload = payload;\r\n\r\n    if (gasLimit) {\r\n        tx.gasLimit = new Fixed64(gasLimit);\r\n    }\r\n    if (gasPrice) {\r\n        tx.gasPrice = new Fixed64(gasPrice);\r\n    }\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    }\r\n    return tx;\r\n};\r\n\r\nexport function buildWasmVmInvokeCode(contractaddress: Address, params: Parameter[]): string {\r\n    let result = '';\r\n    result += contractaddress.serialize();\r\n    const args = buildWasmContractParam(params);\r\n    result += writeVarBytes(args);\r\n    return result;\r\n}\r\n\r\n/**\r\n * Creates transaction to inovke wasm vm smart contract\r\n * @param funcName Function name of smart contract\r\n * @param params Array of Parameters or serialized parameters\r\n * @param contractAddress Address of contract\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for gas\r\n */\r\nexport function makeWasmVmInvokeTransaction(\r\n    funcName: string,\r\n    params: Parameter[],\r\n    contractAddress: Address,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const tx = new Transaction();\r\n    tx.type = TxType.InvokeWasm;\r\n\r\n    const paramFunc = new Parameter('method', ParameterType.String, funcName);\r\n    const paramsAll = [paramFunc, ...params];\r\n    const code = buildWasmVmInvokeCode(contractAddress, paramsAll);\r\n    const payload = new InvokeCode();\r\n    payload.code = code;\r\n    tx.payload = payload;\r\n\r\n    if (gasLimit) {\r\n        tx.gasLimit = new Fixed64(gasLimit);\r\n    }\r\n    if (gasPrice) {\r\n        tx.gasPrice = new Fixed64(gasPrice);\r\n    }\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    }\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Creates transaction to deploy smart contract\r\n * @param code Avm code of contract to deploy\r\n * @param name Name of contract\r\n * @param codeVersion version of contract\r\n * @param author Author of contract\r\n * @param email Email of author\r\n * @param desp Description of contract\r\n * @param vmType Decides the vm type\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for gas\r\n */\r\nexport function makeDeployCodeTransaction(\r\n    code: string,\r\n    name: string= '',\r\n    codeVersion: string= '1.0',\r\n    author: string= '',\r\n    email: string= '',\r\n    desp: string= '', vmType: VmType | boolean, gasPrice: string, gasLimit: string, payer?: Address) {\r\n    const dc = new DeployCode();\r\n    dc.author = author;\r\n    // const vmCode = new VmCode();\r\n    // vmCode.code = code;\r\n    // vmCode.vmType = vmType;\r\n    // dc.code = vmCode;\r\n    dc.code = code;\r\n    dc.version = codeVersion;\r\n    dc.description = desp;\r\n    dc.email = email;\r\n    dc.name = name;\r\n    if (typeof vmType === 'boolean') { // to be compatible with old api\r\n        dc.vmType = VmType.NEOVM_TYPE;\r\n    } else {\r\n        dc.vmType = vmType;\r\n    }\r\n\r\n    const tx = new Transaction();\r\n    tx.version = 0x00;\r\n\r\n    tx.payload = dc;\r\n\r\n    tx.type = TxType.Deploy;\r\n    // gas\r\n    // if (DEFAULT_GAS_LIMIT === Number(0)) {\r\n    //     tx.gasPrice = new Fixed64();\r\n    // } else {\r\n    //     const price = new BigNumber(gas).multipliedBy(1e9).dividedBy(new BigNumber(DEFAULT_GAS_LIMIT)).toString();\r\n    //     tx.gasPrice = new Fixed64(price);\r\n    // }\r\n    tx.gasLimit = new Fixed64(gasLimit);\r\n    tx.gasPrice = new Fixed64(gasPrice);\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    }\r\n\r\n    return tx;\r\n\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Creates params from transaction to send with websocket\r\n * @param tx Transactio to send\r\n * @param isPreExec Decides if it is pre-execute transaction\r\n */\r\nexport function buildTxParam(tx: Transaction, isPreExec: boolean = false) {\r\n    const op = isPreExec ? { PreExec: '1'} : {};\r\n    const serialized = tx.serialize();\r\n\r\n    return JSON.stringify(Object.assign({}, Default_params, { Data: serialized }, op));\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Creates params from transaction to send with rpc\r\n * @param tx Transaction\r\n * @param method Method name\r\n */\r\nexport function buildRpcParam(tx: Transaction, method?: string) {\r\n    const param = tx.serialize();\r\n    const result = {\r\n        jsonrpc: '2.0',\r\n        method: method || 'sendrawtransaction',\r\n        params: [param],\r\n        id: 10\r\n    };\r\n    return result;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Creates params from transaction to send with restful\r\n * @param tx Transaction\r\n */\r\nexport function buildRestfulParam(tx: Transaction) {\r\n    const param = tx.serialize();\r\n    return {\r\n        Action : 'sendrawtransaction',\r\n        Version : '1.0.0',\r\n        Data : param\r\n    };\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * @param url Url of blochchain node\r\n * @param preExec Decides if is a pre-execute request\r\n */\r\nexport function sendRawTxRestfulUrl(url: string, preExec: boolean = false) {\r\n    if (url.charAt(url.length - 1) === '/') {\r\n        url = url.substring(0, url.length - 1);\r\n    }\r\n\r\n    let restUrl = url + REST_API.sendRawTx;\r\n    if (preExec) {\r\n        restUrl += '?preExec=1';\r\n    }\r\n\r\n    return restUrl;\r\n}\r\n\r\nexport function transferStringParameter(value: string): Parameter {\r\n    const strs = value.split(':');\r\n    if (strs.length < 2) {\r\n        throw new Error('Invalid parameter. ' + value);\r\n    }\r\n    const pType = value.substring(0, value.indexOf(':'));\r\n    const pVal = value.substring(value.indexOf(':') + 1);\r\n    const p = new Parameter('', pType as ParameterType, pVal);\r\n    if (p.type === ParameterType.Address) {\r\n        p.type = ParameterType.ByteArray;\r\n        p.value = new Address(p.value).serialize();\r\n    }\r\n    return p;\r\n}\r\n\r\nexport function transformMapParameter(value: any) {\r\n    const map: any = {};\r\n    for (const k of Object.keys(value)) {\r\n        const v = value[k];\r\n        if (typeof v === 'number') {\r\n            map[k] = new Parameter('', ParameterType.Integer, v);\r\n        } else if (typeof v === 'boolean') {\r\n            map[k] = new Parameter('', ParameterType.Boolean, v);\r\n        } else if (Array.isArray(v)) {\r\n            map[k] = new Parameter('', ParameterType.Array, transformArrayParameter(v));\r\n        } else if (typeof v === 'object') {\r\n            map[k] = new Parameter('', ParameterType.Map, transformMapParameter(v));\r\n        } else if (typeof v === 'string') {\r\n            map[k] = transferStringParameter(v);\r\n        }\r\n    }\r\n    return map;\r\n}\r\n\r\nexport function transformArrayParameter(val: any) {\r\n    const list = [];\r\n    for (const v of val) {\r\n        let p = new Parameter('', ParameterType.ByteArray, v);\r\n        if (typeof v === 'number') {\r\n            p.type = ParameterType.Integer;\r\n        } else if (typeof v === 'boolean') {\r\n            p.type = ParameterType.Boolean;\r\n        } else if (Array.isArray(v)) {\r\n            p.type = ParameterType.Array;\r\n            p.value = transformArrayParameter(v);\r\n        } else if (typeof v === 'object') {\r\n            p.type = ParameterType.Map;\r\n            p.value = transformMapParameter(v);\r\n        } else if (typeof v === 'string') {\r\n            p = transferStringParameter(v);\r\n        }\r\n        list.push(p);\r\n    }\r\n    return list;\r\n}\r\n\r\nexport function transformParameter(arg: any) {\r\n    const name = arg.name;\r\n    const value = arg.value;\r\n    let p = new Parameter(name, ParameterType.ByteArray, value);\r\n    if (typeof value === 'number') {\r\n        p.type = ParameterType.Integer;\r\n        p.value = Number(value);\r\n    } else if (typeof value === 'boolean') {\r\n        p.type = ParameterType.Boolean;\r\n        p.value = Boolean(value);\r\n    } else if (Array.isArray(value)) {\r\n        p.type = ParameterType.Array;\r\n        p.value = transformArrayParameter(value);\r\n    } else if (typeof value === 'object') {\r\n        p.type = ParameterType.Map;\r\n        p.value = transformMapParameter(value);\r\n    } else if (typeof value === 'string') {\r\n        p = transferStringParameter(value);\r\n    }\r\n    return p;\r\n}\r\n\r\nexport function buildParamsByJson(json: any) {\r\n    const paramsList = [];\r\n    const functions = json.functions;\r\n    for (const obj of functions) {\r\n        const { operation, args } = obj;\r\n        const list = [];\r\n        list.push(str2hexstr(operation));\r\n        const temp = [];\r\n        for (const arg of args) {\r\n            temp.push(transformParameter(arg));\r\n        }\r\n        list.push(temp);\r\n        paramsList.push(list);\r\n    }\r\n    return paramsList;\r\n}\r\n\r\nexport function makeTransactionsByJson(json: any, ledgerCompatible: boolean = true) {\r\n    if (!json) {\r\n        throw new Error('Invalid parameter. Expect JSON object');\r\n    }\r\n    if (!json.action ||\r\n        (json.action !== 'invoke' &&\r\n        json.action !== 'invokeRead' &&\r\n        json.action !== 'invokePasswordFree')) {\r\n        throw new Error('Invalid parameter. The action type must be \"invoke or invokeRead\"');\r\n    }\r\n    if (!json.params || !json.params.invokeConfig) {\r\n        throw new Error('Invalid parameter. The params can not be empty.');\r\n    }\r\n    const invokeConfig = json.params.invokeConfig;\r\n    // tslint:disable-next-line:prefer-const\r\n    let { payer, gasPrice, gasLimit, contractHash } = invokeConfig;\r\n    if (!contractHash) {\r\n        throw new Error('Invalid parameter. The contractHash can not be empty.');\r\n    }\r\n    const contractAddr = new Address(reverseHex(contractHash));\r\n    payer = payer ? new Address(payer) : null;\r\n    gasPrice = gasPrice + '' || '500';\r\n    gasLimit = gasLimit + '' || '200000';\r\n    const txList = [];\r\n    if (contractHash.indexOf('00000000000000000000000000000000000000') > -1) { // native contract\r\n        const tx = buildNativeTxFromJson(invokeConfig);\r\n        txList.push(tx);\r\n    } else {\r\n        const parameters = buildParamsByJson(invokeConfig);\r\n        for (const list of parameters) {\r\n            const params = createCodeParamsScript(list, ledgerCompatible);\r\n            const tx = makeInvokeTransaction('', params, contractAddr, gasPrice, gasLimit, payer, ledgerCompatible);\r\n            txList.push(tx);\r\n        }\r\n    }\r\n\r\n    return txList;\r\n}\r\n\r\nexport function buildNativeTxFromJson(json: any) {\r\n    const funcArgs = json.functions[0];\r\n    const args = funcArgs.args;\r\n    if (json.contractHash.indexOf('02') > -1 || json.contractHash.indexOf('01') > -1) { // TST TSG contract\r\n        const tokenType = json.contractHash.indexOf('02') > -1 ? 'TSG' : 'TST';\r\n        if (funcArgs.operation === 'transfer') {\r\n            const from = new Address(args[0].value.split(':')[1]);\r\n            const to = new Address(args[1].value.split(':')[1]);\r\n            const amount = args[2].value.split(':')[1] + ''; // convert to string\r\n            const payer = new Address(json.payer);\r\n            const tx = makeTransferTx(tokenType, from, to, amount, json.gasPrice, json.gasLimit, payer);\r\n            return tx;\r\n        }\r\n    } else if (json.contractHash.indexOf('03') > -1) { // TST ID contract\r\n        if (funcArgs.operation === 'regIDWithPublicKey') {\r\n            const tstId = args[0].value.substr(args[0].value.indexOf(':') + 1);\r\n            const pk = new PublicKey(args[1].value.split(':')[1]);\r\n            const payer = new Address(json.payer);\r\n            const tx = buildRegisterTstidTx(tstId, pk, json.gasPrice, json.gasLimit, payer);\r\n            return tx;\r\n        } else if (funcArgs.operation === 'getDDO') {\r\n            const tstId = args[0].value.substr(args[0].value.indexOf(':') + 1);\r\n            const tx = buildGetDDOTx(tstId);\r\n            return tx;\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as bip39 from 'bip39';\r\nimport { TST_BIP44_PATH } from './consts';\r\nimport { Address, PrivateKey } from './crypto';\r\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\r\nimport { ERROR_CODE } from './error';\r\nimport { ScryptParams } from './scrypt';\r\nimport { Transaction } from './transaction/transaction';\r\nimport { signTransaction } from './transaction/transactionBuilder';\r\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst HDKey = require('./hdkey-secp256r1/hdkey.js');\r\n\r\nexport class Account {\r\n    /**\r\n     * Import account\r\n     * @param label Account's label\r\n     * @param encryptedPrivateKey Encrypted private key\r\n     * @param password User's password to decrypt private key\r\n     * @param address Account's address\r\n     * @param saltBase64 Salt to decrypt\r\n     * @param params Params used to decrypt\r\n     */\r\n    static importAccount(\r\n        label: string ,\r\n        encryptedPrivateKey: PrivateKey,\r\n        password: string,\r\n        address: Address,\r\n        saltBase64: string,\r\n        params?: ScryptParams\r\n    ): Account {\r\n        const account = new Account();\r\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\r\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\r\n\r\n        if (!label) {\r\n            label = ab2hexstring(generateRandomArray(4));\r\n        }\r\n        account.label = label;\r\n        account.lock = false;\r\n        account.isDefault = false;\r\n        account.salt = saltBase64;\r\n\r\n        account.encryptedKey = encryptedPrivateKey;\r\n\r\n        const publicKey = privateKey.getPublicKey();\r\n        account.publicKey = publicKey.key;\r\n\r\n        account.address = Address.fromPubKey(publicKey);\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * Import account with mnemonic\r\n     * @param label Account's label\r\n     * @param mnemonic User's mnemonic\r\n     * @param password user's password to encrypt the private key\r\n     * @param params Params used to encrypt the private key.\r\n     */\r\n    static importWithMnemonic(\r\n        label: string,\r\n        mnemonic: string,\r\n        password: string,\r\n        params?: ScryptParams\r\n    ): Account {\r\n        mnemonic = mnemonic.trim();\r\n        if (!bip39.validateMnemonic(mnemonic)) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\r\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\r\n        const pri = hdkey.derive(TST_BIP44_PATH);\r\n        const key = Buffer.from(pri.privateKey).toString('hex');\r\n        const privateKey = new PrivateKey(key);\r\n        const account = Account.create(privateKey, password, label, params);\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * Creates Account object encrypting specified private key.\r\n     *\r\n     * The account does not need to be registered on blockchain.\r\n     *\r\n     * @param privateKey Private key associated with the account\r\n     * @param password Password use to encrypt the private key\r\n     * @param label Custom label\r\n     * @param params Optional scrypt params\r\n     */\r\n    static create(\r\n        privateKey: PrivateKey,\r\n        password: string,\r\n        label?: string,\r\n        params?: ScryptParams\r\n    ): Account {\r\n        const account = new Account();\r\n        if (!label) {\r\n            label = ab2hexstring(generateRandomArray(4));\r\n        }\r\n        account.label = label;\r\n        account.lock = false;\r\n        account.isDefault = false;\r\n\r\n        const salt = randomBytes(16);\r\n        const publicKey = privateKey.getPublicKey();\r\n        const address = Address.fromPubKey(publicKey);\r\n        account.publicKey = publicKey.serializeHex();\r\n        account.address = address;\r\n        account.encryptedKey = privateKey.encrypt(password, address, salt, params);\r\n        account.salt = Buffer.from(salt, 'hex').toString('base64');\r\n        return account;\r\n    }\r\n\r\n    static parseJson(json: string): Account {\r\n        return Account.parseJsonObj(JSON.parse(json));\r\n    }\r\n\r\n    /**\r\n     * Deserializes JSON object.\r\n     *\r\n     * Object should be real object, not stringified.\r\n     *\r\n     * @param obj JSON object\r\n     */\r\n    static parseJsonObj(obj: any): Account {\r\n        const account = new Account();\r\n        account.address = new Address(obj.address);\r\n        account.label = obj.label;\r\n        account.lock = obj.lock;\r\n        account.isDefault = obj.isDefault;\r\n        account.publicKey = obj.publicKey;\r\n        account.hash = obj.hash;\r\n        account.salt = obj.salt;\r\n        account.encryptedKey = deserializeFromJson({\r\n            algorithm: obj.algorithm,\r\n            parameters: obj.parameters,\r\n            key: obj.key,\r\n            external: obj.external\r\n        });\r\n        // account.contract = obj.contract\r\n        account.extra = obj.extra;\r\n        return account;\r\n    }\r\n\r\n    address: Address;\r\n    label: string;\r\n    lock: boolean;\r\n    encryptedKey: PrivateKey;\r\n    extra: null;\r\n\r\n    // to compatible with cli twallet\r\n    'enc-alg': string = 'aes-256-gcm';\r\n    hash: string = 'sha256';\r\n    salt: string;\r\n\r\n    publicKey: string;\r\n    isDefault: boolean;\r\n\r\n    toJson(): string {\r\n        return JSON.stringify(this.toJsonObj());\r\n    }\r\n\r\n    /**\r\n     * Serializes to JSON object.\r\n     *\r\n     * Returned object will not be stringified.\r\n     *\r\n     */\r\n    toJsonObj(): any {\r\n        const obj = {\r\n            'address': this.address.toBase58(),\r\n            'label': this.label,\r\n            'lock': this.lock,\r\n            ...this.encryptedKey.serializeJson(),\r\n            'enc-alg': this['enc-alg'],\r\n            'hash': this.hash,\r\n            'salt': this.salt,\r\n            'isDefault': this.isDefault,\r\n            'publicKey': this.publicKey,\r\n            'signatureScheme': this.encryptedKey.algorithm.defaultSchema.label\r\n        };\r\n        return obj;\r\n    }\r\n\r\n    exportPrivateKey(password: string, params?: ScryptParams) {\r\n        return this.encryptedKey.decrypt(password, this.address, this.salt, params);\r\n    }\r\n\r\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\r\n        const pri = this.exportPrivateKey(password, params);\r\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\r\n        return tx;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Restful api\r\n */\r\nexport default {\r\n    Url_send_transaction : '/api/v1/transaction',\r\n    Url_get_transaction : '/api/v1/transaction/',\r\n    Url_get_generate_block_time : '/api/v1/node/generateblocktime',\r\n    Url_get_node_count : '/api/v1/node/connectioncount',\r\n    Url_get_block_height : '/api/v1/block/height',\r\n    Url_get_block_by_height : '/api/v1/block/details/height/',\r\n    Url_get_block_by_hash : '/api/v1/block/details/hash/',\r\n    Url_get_account_balance : '/api/v1/balance/',\r\n    Url_get_contract_state : '/api/v1/contract/',\r\n    Url_get_smartcodeevent_txs_by_height : '/api/v1/smartcode/event/transactions/',\r\n    Url_get_smartcodeevent_by_txhash : '/api/v1/smartcode/event/txhash/',\r\n    Url_get_block_height_by_txhash : '/api/v1/block/height/txhash/',\r\n    Url_get_storage : '/api/v1/storage/',\r\n    Url_get_merkleproof : '/api/v1/merkleproof/',\r\n    Url_get_allowance: '/api/v1/allowance/',\r\n    Url_get_block_txs_by_height: '/api/v1/block/transactions/height/',\r\n    Url_get_unbound_tsg: '/api/v1/unboundtsg/',\r\n    Url_get_grant_tsg: '/api/v1/granttsg/',\r\n    Url_get_mempool_txcount: '/api/v1/mempool/txcount',\r\n    Url_get_mempool_txstate: '/api/v1/mempool/txstate/',\r\n    Url_get_version: '/api/v1/version',\r\n    Url_get_networkid: '/api/v1/networkid',\r\n    Url_get_gasprice: '/api/v1/gasprice'\r\n};\r\n","import { ERROR_CODE } from './../../error';\r\n/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport axios from 'axios';\r\nimport { TEST_TST_URL } from '../../consts';\r\nimport { Address } from '../../crypto/address';\r\nimport UrlConsts from './urlConsts';\r\n\r\n/**\r\n * Wrapper class for restful api.\r\n */\r\nexport default class RestClient {\r\n    /**\r\n     * Url of the blockchain node\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Version of restful api\r\n     */\r\n    version: string = 'v1.0.0';\r\n\r\n    /**\r\n     * Action name of the request\r\n     */\r\n    action: string = 'sendrawtransaction';\r\n\r\n    constructor(url ?: string) {\r\n        this.url = url || TEST_TST_URL.REST_URL;\r\n        if (this.url[this.url.length - 1] === '/') {\r\n            this.url = this.url.substring(0, this.url.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Concat params as the query part\r\n     * @param params\r\n     */\r\n    concatParams(params: Map<string, string>) {\r\n        let result = '';\r\n        if (params.size === 0) {\r\n            return '';\r\n        }\r\n\r\n        for (const key of params.keys()) {\r\n            let value = params.get(key);\r\n            if (value) {\r\n                value = encodeURIComponent(value);\r\n            }\r\n            result += `&${key}=${value}`;\r\n        }\r\n\r\n        return '?' + result.substr(1);\r\n    }\r\n\r\n    /**\r\n     * Get the current blockchain node url\r\n     */\r\n    getUrl() {\r\n        return this.url;\r\n    }\r\n\r\n    /**\r\n     * To send raw transaction to blockchian\r\n     * @param hexData Hex encoded data\r\n     * @param preExec Decides if it is a pre-execute transaction\r\n     * @param userId User's id\r\n     */\r\n    sendRawTransaction(hexData: string, preExec: boolean = false, userId ?: string): Promise<any> {\r\n        const param = new Map<string, string>();\r\n\r\n        if (userId) {\r\n            param.set('userid', userId);\r\n        }\r\n\r\n        if (preExec) {\r\n            param.set('preExec', '1');\r\n        }\r\n\r\n        let url = this.url + UrlConsts.Url_send_transaction;\r\n        url += this.concatParams(param);\r\n\r\n        const body = {\r\n            Action  : this.action,\r\n            Version : this.version,\r\n            Data    : hexData\r\n        };\r\n\r\n        return axios.post(url, body).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get raw transaction by transaction hash.\r\n     * The result is hex encoded transaction.\r\n     * @param txHash Transactin hash.Always use the reversed value of transaction hash to query.\r\n     *\r\n     * @example\r\n     *\r\n     * ```typescript\r\n     * import { utils, Transaction } from 'tesrasdk-ts';\r\n     * const txHash = tx.getHash(); // tx is an instance of Transaction\r\n     * restClient.getRawTransaction(utils.reverseHex(txHash)).then(res => {\r\n     *   const tx = Transaction.deserialize(res.Result)\r\n     * })\r\n     *\r\n     * ````\r\n     */\r\n    getRawTransaction(txHash: string): Promise<any> {\r\n        const param = new Map<string, string>();\r\n\r\n        param.set('raw', '1');\r\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\r\n        url += this.concatParams(param);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get transaction by transaction hash.\r\n     * The result is transaction in json.\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    getRawTransactionJson(txHash: string): Promise<any> {\r\n        const param = new Map<string, string>();\r\n        param.set('raw', '0');\r\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\r\n        url += this.concatParams(param);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /** Deprecated\r\n     * Get the generation time for each block.\r\n     * If the blockchain node runs in vbft, the result is null.\r\n     */\r\n    // getGenerateBlockTime(): Promise<any> {\r\n    //     const url = this.url + UrlConsts.Url_get_generate_block_time;\r\n    //     return axios.get(url).then((res) => {\r\n    //         return res.data;\r\n    //     });\r\n    // }\r\n\r\n    /**\r\n     * Get the nodes count of the blockchain.\r\n     */\r\n    getNodeCount(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_node_count;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the current height of the blockchain.\r\n     */\r\n    getBlockHeight(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_block_height;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get block by block's height or hash\r\n     * @param value Block height or block hash\r\n     */\r\n    getBlock(value: number | string): Promise<any> {\r\n        const params = new Map<string, string>();\r\n        params.set('raw', '1');\r\n\r\n        let url = '';\r\n        if (typeof value === 'number') {\r\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\r\n        } else if (typeof value === 'string') {\r\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\r\n        }\r\n        url += this.concatParams(params);\r\n\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get contract info by code hash.The result is hex encoded string.\r\n     * @param codeHash Code hash of contract.The value is reversed contract address.\r\n     */\r\n    getContract(codeHash: string): Promise<any> {\r\n        const params = new Map<string, string>();\r\n        params.set('raw', '1');\r\n\r\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\r\n        url += this.concatParams(params);\r\n\r\n            // console.log('url: '+url);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get contract info by code hash. The result is json.\r\n     * @param codeHash Code hash of contract.\r\n     */\r\n    getContractJson(codeHash: string): Promise<any> {\r\n        const params = new Map<string, string>();\r\n        params.set('raw', '0');\r\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\r\n        url += this.concatParams(params);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get smart contract event by Block height or reversed transaction hash.\r\n     * If the parameter is block height, the result includes all the transaction event of that block;\r\n     * If the parameter is transaction hash, the result is the event of that transaction.\r\n     * @param value Block height or reversed transaction hash\r\n     */\r\n    getSmartCodeEvent(value: string | number): Promise<any> {\r\n        let url = '';\r\n        if (typeof value === 'string') {\r\n            url = this.url + UrlConsts.Url_get_smartcodeevent_by_txhash + value;\r\n        } else if (typeof value === 'number') {\r\n            url = this.url + UrlConsts.Url_get_smartcodeevent_txs_by_height + value;\r\n        }\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the block height by reversed transaction hash.\r\n     * @param hash Reversed transaction hash.\r\n     */\r\n    getBlockHeightByTxHash(hash: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_block_height_by_txhash + hash;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the stored value in smart contract by the code hash and key.\r\n     * @param codeHash Code hash of the smart contract\r\n     * @param key Key of the stored value\r\n     */\r\n    getStorage(codeHash: string, key: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_storage + codeHash + '/' + key;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the merkle proof by transaction hash\r\n     * @param hash Reversed transaction hash\r\n     */\r\n    getMerkleProof(hash: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_merkleproof + hash;\r\n\r\n            // tslint:disable-next-line:no-console\r\n        console.log('url: ' + url);\r\n\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get balance of some address\r\n     * The result contains balance of TST and TSG\r\n     * @param address Address\r\n     */\r\n    getBalance(address: Address): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_account_balance + address.toBase58();\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get block info by block's height or hash.\r\n     * @param value Block's height or hash\r\n     */\r\n    getBlockJson(value: number | string): Promise<any> {\r\n        let url = '';\r\n        if (typeof value === 'number') {\r\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\r\n        } else if (typeof value === 'string') {\r\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\r\n        }\r\n\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get allowance by address\r\n     * @param asset Asset type. Only TST or TSG.\r\n     * @param from Address of allowance sender.\r\n     * @param to Address of allowance receiver.\r\n     */\r\n    getAllowance(asset: string, from: Address, to: Address): Promise<any> {\r\n        asset = asset.toLowerCase();\r\n        if (asset !== 'tst' && asset !== 'tsg') {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        const url = this.url + UrlConsts.Url_get_allowance +\r\n                    asset.toLowerCase() + '/' + from.toBase58() + '/' + to.toBase58();\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getUnboundTsg(address: Address): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_unbound_tsg + address.toBase58();\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getBlockTxsByHeight(height: number): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_block_txs_by_height + height;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getGasPrice(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_gasprice ;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getGrantTsg(address: Address): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_grant_tsg + address.toBase58();\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getMempoolTxCount(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_mempool_txcount;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getMempoolTxState(hash: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_mempool_txstate + hash;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getVersion(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_version;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n// tslint:disable:variable-name\r\nexport class Deferred<T> {\r\n    private _promise: Promise<T>;\r\n    private _resolve: (value?: T | PromiseLike<T>) => void;\r\n    private _reject: (reason?: any) => void;\r\n\r\n    constructor() {\r\n        this._promise = new Promise<T>((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n        });\r\n    }\r\n\r\n    get promise(): Promise<T> {\r\n        return this._promise;\r\n    }\r\n\r\n    public resolve = (value?: T | PromiseLike<T>): void => {\r\n        this._resolve(value);\r\n    }\r\n\r\n    public reject = (reason?: any): void => {\r\n        this._reject(reason);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Address } from '../../crypto/address';\r\n\r\n// const generateReqId = () => {\r\n//     return Math.floor(Math.random() * 10e8);\r\n// };\r\n\r\nexport function sendHeartBeat() {\r\n    const param = {\r\n        Action : 'heartbeat',\r\n        Version : 'V1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function sendSubscribe(\r\n    subscribeEvent: boolean = false,\r\n    subscribeJsonBlock: boolean = false,\r\n    subscribeRawBlock: boolean = false,\r\n    subscribeBlockTxHashes: boolean = false\r\n) {\r\n    const param = {\r\n        Action: 'subscribe',\r\n        Version: '1.0.0',\r\n        SubscribeEvent: subscribeEvent, // optional\r\n        SubscribeJsonBlock: subscribeJsonBlock, // optional\r\n        SubscribeRawBlock: subscribeRawBlock, // optional\r\n        SubscribeBlockTxHashs: subscribeBlockTxHashes // optional\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function sendRawTransaction(hexData: string, preExec: boolean = false) {\r\n    let param = {\r\n        Action: 'sendrawtransaction',\r\n        Version: '1.0.0',\r\n        Data: hexData\r\n    };\r\n    if (preExec) {\r\n        param = Object.assign(param, { PreExec : '1' });\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getRawTransaction(txHash: string) {\r\n    const param = {\r\n        Action: 'gettransaction',\r\n        Version: '1.0.0',\r\n        Hash: txHash,\r\n        Raw : '1'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getRawTransactionJson(txHash: string) {\r\n    const param = {\r\n        Action: 'gettransaction',\r\n        Version: '1.0.0',\r\n        Hash: txHash,\r\n        Raw: '0'\r\n    };\r\n    return param;\r\n}\r\n\r\n// export function getGenerateBlockTime() {\r\n//     const param = {\r\n//         Action: 'getgenerateblocktime',\r\n//         Version: '1.0.0'\r\n//     };\r\n//     return param;\r\n// }\r\n\r\nexport function getNodeCount() {\r\n    const param = {\r\n        Action: 'getconnectioncount',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlockHeight() {\r\n    const param = {\r\n        Action: 'getblockheight',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlock(value: number | string) {\r\n    let param = {};\r\n    if (typeof value === 'number') {\r\n        param = {\r\n            Action: 'getblockbyheight',\r\n            Version: '1.0.0',\r\n            Height: value,\r\n            Raw: '1'\r\n        };\r\n    } else if (typeof value === 'string') {\r\n        param = {\r\n            Action: 'getblockbyhash',\r\n            Version: '1.0.0',\r\n            Hash: value,\r\n            Raw: '1'\r\n        };\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getBlockJson(value: number | string) {\r\n    let param = {};\r\n    if (typeof value === 'number') {\r\n        param = {\r\n            Action: 'getblockbyheight',\r\n            Version: '1.0.0',\r\n            Height: value\r\n        };\r\n    } else if (typeof value === 'string') {\r\n        param = {\r\n            Action: 'getblockbyhash',\r\n            Version: '1.0.0',\r\n            Hash: value\r\n        };\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getBalance(address: Address) {\r\n    const param = {\r\n        Action: 'getbalance',\r\n        Version: '1.0.0',\r\n        Addr: address.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getUnboundTsg(address: Address) {\r\n    const param = {\r\n        Action: 'getunboundtsg',\r\n        Version: '1.0.0',\r\n        Addr: address.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getContract(hash: string) {\r\n    const param = {\r\n        Action: 'getcontract',\r\n        Version: '1.0.0',\r\n        Hash: hash,\r\n        Raw: '1'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getContractJson(hash: string) {\r\n    const param = {\r\n        Action: 'getcontract',\r\n        Version: '1.0.0',\r\n        Hash: hash,\r\n        Raw: '0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getSmartCodeEvent(value: number | string) {\r\n    let param = {};\r\n    if (typeof value === 'number') {\r\n        param = {\r\n            Action: 'getsmartcodeeventbyheight',\r\n            Version: '1.0.0',\r\n            Height: value\r\n        };\r\n    } else if (typeof value === 'string') {\r\n        param = {\r\n            Action: 'getsmartcodeeventbyhash',\r\n            Version: '1.0.0',\r\n            Hash: value\r\n        };\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getBlockHeightByTxHash(hash: string) {\r\n    const param = {\r\n        Action: 'getblockheightbytxhash',\r\n        Version: '1.0.0',\r\n        Hash: hash\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getStorage(codeHash: string, key: string) {\r\n    const param = {\r\n        Action: 'getstorage',\r\n        Version: '1.0.0',\r\n        Hash: codeHash,\r\n        Key : key\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getMerkleProof(hash: string) {\r\n    const param = {\r\n        Action: 'getmerkleproof',\r\n        Version: '1.0.0',\r\n        Hash: hash\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getAllowance(asset: string, from: Address, to: Address) {\r\n    const param = {\r\n        Action: 'getallowance',\r\n        Version: '1.0.0',\r\n        Asset: asset,\r\n        From: from.toBase58(),\r\n        To: to.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlockHash(value: number) {\r\n    const param = {\r\n        Action: 'getblockhash',\r\n        Version: '1.0.0',\r\n        Height: value\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlockTxsByHeight(value: number) {\r\n    const param = {\r\n        Action: 'getblocktxsbyheight',\r\n        Version: '1.0.0',\r\n        Height: value\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getGasPrice() {\r\n    const param = {\r\n        Action: 'getgasprice',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getGrantTsg(address: Address) {\r\n    const param = {\r\n        Action: 'getgranttsg',\r\n        Version: '1.0.0',\r\n        Addr: address.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getMempoolTxCount() {\r\n    const param = {\r\n        Action: 'getmempooltxcount',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getMempoolTxState(txHash: string) {\r\n    const param = {\r\n        Action: 'getmempooltxstate',\r\n        Version: '1.0.0',\r\n        Hash: txHash\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getVersion() {\r\n    const param = {\r\n        Action: 'getversion',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getNetworkId() {\r\n    const param = {\r\n        Action: 'getnetworkid',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as WebSocketAsPromised from 'websocket-as-promised';\r\nimport { TEST_TST_URL } from '../../consts';\r\nimport * as Html5WebSocket from '../../html5-websocket';\r\n\r\n/**\r\n * We can import html5-websocket directly, because webpack will use html5-websocket/browser.js\r\n * in browser environment, which does not require 'ws'.\r\n */\r\n\r\n /**\r\n  * Websocket sender for send messages and handle notify.\r\n  */\r\nexport class WebsocketSender {\r\n    private static generateReqId() {\r\n        return Math.floor(Math.random() * 10e8);\r\n    }\r\n\r\n    debug: boolean;\r\n\r\n    private wsp: any;    // WebSocketAsPromised\r\n\r\n    constructor(url = TEST_TST_URL.SOCKET_URL, debug = false) {\r\n        this.debug = debug;\r\n        this.wsp = new WebSocketAsPromised(url, {\r\n            createWebSocket: (socketUrl: string) => new Html5WebSocket(socketUrl),\r\n            attachRequestId: (data: any, id: number) => ({ Id: id, ...data }),\r\n            extractRequestId: (data: any) => data && data.Id,\r\n            packMessage: (data: any) => JSON.stringify(data),\r\n            unpackMessage: (message: string) => JSON.parse(message)\r\n        });\r\n\r\n        this.wsp.onOpen.addListener(() => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('connected');\r\n            }\r\n        });\r\n\r\n        this.wsp.onClose.addListener(() => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('disconnected');\r\n            }\r\n        });\r\n\r\n        this.wsp.onSend.addListener((message: any) => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('sent: ', message);\r\n            }\r\n        });\r\n\r\n        this.wsp.onMessage.addListener((message: any) => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('received: ', message);\r\n            }\r\n        });\r\n\r\n        this.wsp.onError.addListener((event: any) => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('error: ', event);\r\n            }\r\n        });\r\n    }\r\n\r\n    async send<T extends object>(param: T, close: boolean = true) {\r\n        try {\r\n            if (!param) {\r\n                return;\r\n            }\r\n\r\n            await this.wsp.open();\r\n            const response = await this.wsp.sendRequest(param, { requestId: WebsocketSender.generateReqId() });\r\n\r\n            return response;\r\n        } finally {\r\n            if (close) {\r\n                await this.wsp.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    addListener(listener: (result: any) => void) {\r\n        this.wsp.onUnpackedMessage.addListener(listener);\r\n    }\r\n\r\n    close() {\r\n        this.wsp.close();\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { TEST_TST_URL } from '../../consts';\r\nimport { Address } from '../../crypto/address';\r\nimport { Deferred } from './deferred';\r\nimport * as Builder from './websocketBuilder';\r\nimport { WebsocketSender } from './websocketSender';\r\n\r\n/**\r\n * Websocket client.\r\n *\r\n * TODO: correlate request and response with id, so socket can be reused.\r\n */\r\nexport class WebsocketClient {\r\n    sender: WebsocketSender;\r\n\r\n    autoClose: boolean;\r\n\r\n    promises: Map<string, Deferred<any>>;\r\n\r\n    constructor(url = TEST_TST_URL.SOCKET_URL, debug = false, autoClose = true) {\r\n        this.autoClose = autoClose;\r\n        this.promises = new Map();\r\n        this.sender = new WebsocketSender(url, debug);\r\n        this.sender.addListener(this.notifyListener.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Send heart beat request\r\n     */\r\n    async sendHeartBeat(): Promise<any> {\r\n        const raw = Builder.sendHeartBeat();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Send subscribe request\r\n     * @param subscribeEvent\r\n     * @param subscribeJsonBlock\r\n     * @param subscribeRawBlock\r\n     * @param subscribeBlockTxHashes\r\n     */\r\n    async sendSubscribe(\r\n            subscribeEvent = false,\r\n            subscribeJsonBlock = false,\r\n            subscribeRawBlock = false,\r\n            subscribeBlockTxHashes = false\r\n        ): Promise<any> {\r\n        const raw = Builder.sendSubscribe(\r\n                subscribeEvent,\r\n                subscribeJsonBlock,\r\n                subscribeRawBlock,\r\n                subscribeBlockTxHashes\r\n            );\r\n\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Send raw transaction\r\n     * @param hexData Hex encoded data\r\n     * @param preExec Decides if it is a pre-executed transaction\r\n     * @param waitNotify Decides if client waits for notify from blockchain before closing\r\n     */\r\n    async sendRawTransaction(hexData: string, preExec = false, waitNotify = false) {\r\n        const raw = Builder.sendRawTransaction(hexData, preExec);\r\n        const sendResult = await this.send(raw, this.autoClose && !waitNotify);\r\n\r\n        if (sendResult.Error !== 0) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log(sendResult);\r\n            throw new Error(JSON.stringify(sendResult));\r\n        }\r\n\r\n        if (waitNotify) {\r\n            const txHash: string = sendResult.Result;\r\n\r\n            const deferred = new Deferred<any>();\r\n            this.promises.set(txHash, deferred);\r\n            return deferred.promise;\r\n        } else {\r\n            return sendResult;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get raw transaction by transaction hash.\r\n     * The result is hex encoded transaction.\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    async getRawTransaction(txHash: string): Promise<any> {\r\n        const raw = Builder.getRawTransaction(txHash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get transaction info by transaction hash.\r\n     * The result is json.\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    async getRawTransactionJson(txHash: string): Promise<any> {\r\n        const raw = Builder.getRawTransactionJson(txHash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /** Deprecated\r\n     * Get the generation time for each block.\r\n     * If the blockchain node runs in vbft, the result is null.\r\n     */\r\n    // async getGenerateBlockTime(): Promise<any> {\r\n    //     const raw = Builder.getGenerateBlockTime();\r\n    //     return this.send(raw);\r\n    // }\r\n\r\n    /**\r\n     * Get Nodes count\r\n     */\r\n    async getNodeCount(): Promise<any> {\r\n        const raw = Builder.getNodeCount();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get current block height\r\n     */\r\n    async getBlockHeight(): Promise<any> {\r\n        const raw = Builder.getBlockHeight();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block's info by block's height or hash.\r\n     * The result is hex encoded string.\r\n     * @param value Block's height or hash\r\n     */\r\n    async getBlock(value: number | string): Promise<any> {\r\n        const raw = Builder.getBlock(value);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block's info by block's height or hash.\r\n     * The result is json.\r\n     * @param value Block's height or hash\r\n     */\r\n    async getBlockJson(value: number | string): Promise<any> {\r\n        const raw = Builder.getBlockJson(value);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get the balance of some address.\r\n     * The result contains TST and TSG.\r\n     * @param address Address\r\n     */\r\n    async getBalance(address: Address): Promise<any> {\r\n        const raw = Builder.getBalance(address);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get unbound tsg of this address\r\n     * The result contains TSG.\r\n     * @param address Address\r\n     */\r\n    async getUnboundtsg(address: Address): Promise<any> {\r\n        const raw = Builder.getUnboundTsg(address);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get contract info by code hash.\r\n     * The result is hex encoded string.\r\n     * @param hash Contract's code hash.\r\n     */\r\n    async getContract(hash: string): Promise<any> {\r\n        const raw = Builder.getContract(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get contract's info by code hash\r\n     * The result is json.\r\n     * @param hash Contract's code hash\r\n     */\r\n    async getContractJson(hash: string): Promise<any> {\r\n        const raw = Builder.getContractJson(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get smart conde event by transaction hash or block's height.\r\n     * If parameter is transaction hash, the result is the event of that transaction.\r\n     * If parameter is block's height, the result is all the events of that block.\r\n     * @param value Reversed transaction hash or block's height\r\n     */\r\n    async getSmartCodeEvent(value: number | string): Promise<any> {\r\n        const raw = Builder.getSmartCodeEvent(value);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block's height by transaction hash\r\n     * @param hash Reversed transaction hash\r\n     */\r\n    async getBlockHeightByTxHash(hash: string): Promise<any> {\r\n        const raw = Builder.getBlockHeightByTxHash(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get stored value in smart contract by contract's code hash and the key.\r\n     * @param codeHash Contract's code hash\r\n     * @param key Key of stored value\r\n     */\r\n    async getStorage(codeHash: string, key: string): Promise<any> {\r\n        const raw = Builder.getStorage(codeHash, key);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get merkle proof by transaction hash.\r\n     * @param hash Reversed transaction hash\r\n     */\r\n    async getMerkleProof(hash: string): Promise<any> {\r\n        const raw = Builder.getMerkleProof(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get allowanece\r\n     * @param asset Asset's type.Only TST and TSG supported.\r\n     * @param from Address of allowance's sender.\r\n     * @param to Address of allowance's receiver.\r\n     */\r\n    async getAllowance(asset: string, from: Address, to: Address) {\r\n        const raw = Builder.getAllowance(asset, from, to);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block hash by block height\r\n     * @param height Height of the block\r\n     */\r\n    async getBlockHash(height: number): Promise<any> {\r\n        const raw = Builder.getBlockHash(height);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Return all transaction hash contained in the block corresponding to this height\r\n     * @param height Height of the block\r\n     */\r\n    async getBlockTxsByHeight(height: number): Promise<any> {\r\n        const raw = Builder.getBlockTxsByHeight(height);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Return the state of transaction locate in memory\r\n     */\r\n    async getGasPrice(): Promise<any> {\r\n        const raw = Builder.getGasPrice();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get grant tsg\r\n     * @param address Address\r\n     */\r\n    async getGrantTsg(address: Address): Promise<any> {\r\n        const raw = Builder.getGrantTsg(address);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Query the transaction count in the memory pool\r\n     */\r\n    async getMempoolTxCount(): Promise<any> {\r\n        const raw = Builder.getMempoolTxCount();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Query the transaction state in the memory pool\r\n     */\r\n    async getMempoolTxState(txHash: string): Promise<any> {\r\n        const raw = Builder.getMempoolTxState(txHash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get the version information of the node\r\n     */\r\n    async getVersion(): Promise<any> {\r\n        const raw = Builder.getVersion();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get the network id\r\n     */\r\n    async getNetworkId(): Promise<any> {\r\n        const raw = Builder.getNetworkId();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Adds listener for Notify messages.\r\n     *\r\n     * Be careful to not set autoClose = true and close the websocket on your own.\r\n     * @param listener Listener\r\n     */\r\n    addNotifyListener(listener: (result: any) => void) {\r\n        this.sender.addListener((result: any) => {\r\n            if (result.Action === 'Notify') {\r\n                listener(result);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Close the websocket manually.\r\n     */\r\n    close() {\r\n        this.sender.close();\r\n    }\r\n\r\n    /**\r\n     * Send msg to blockchain\r\n     * @param raw Message to send\r\n     * @param close Automaticly close connection if also autoClose is specified\r\n     */\r\n    private async send<T extends object>(raw: T, close: boolean = this.autoClose): Promise<any> {\r\n        return this.sender.send(raw, close);\r\n    }\r\n\r\n    private notifyListener(result: any) {\r\n         // Fixme: Log message cause Notify message to disappear\r\n        if (result.Action === 'Notify' || result.Action === 'Log') {\r\n            const txHash: string | undefined = result.Result.TxHash;\r\n\r\n            if (txHash !== undefined) {\r\n                const promise = this.promises.get(txHash);\r\n\r\n                if (promise !== undefined) {\r\n                    this.promises.delete(txHash);\r\n                    promise.resolve(result);\r\n                } else {\r\n                    // tslint:disable-next-line:no-console\r\n                    console.warn('Received Notify event for unknown transaction');\r\n                }\r\n\r\n                if (this.autoClose) {\r\n                    this.sender.close();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","\r\n/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport AbiFunction from './abiFunction';\r\nimport { Parameter } from './parameter';\r\n\r\n/**\r\n * Decribes the Abi info.\r\n */\r\nexport default class AbiInfo {\r\n    static parseJson(json: string): AbiInfo {\r\n        const a = new AbiInfo();\r\n        const obj = JSON.parse(json);\r\n        a.hash = obj.hash;\r\n        a.entrypoint = obj.entrypoint;\r\n        a.functions = obj.functions;\r\n\r\n        return a;\r\n    }\r\n\r\n    hash: string;\r\n    entrypoint: string;\r\n    functions: AbiFunction[] = [];\r\n\r\n    getHash(): string {\r\n        return this.hash;\r\n    }\r\n\r\n    getEntryPoint(): string {\r\n        return this.entrypoint;\r\n    }\r\n\r\n    getFunction(name: string): AbiFunction {\r\n        for (const v of this.functions) {\r\n            if (v.name === name) {\r\n                const parameters = v.parameters.map((p: any) => new Parameter(p.name, p.type, ''));\r\n                return new AbiFunction(v.name, v.returntype, parameters);\r\n            }\r\n        }\r\n        throw Error('not found');\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { Address  } from '../../crypto';\r\nimport AbiInfo from '../../smartcontract/abi/abiInfo';\r\nimport { Parameter, ParameterType } from '../../smartcontract/abi/parameter';\r\n\r\nimport { makeInvokeTransaction } from '../../transaction/transactionBuilder';\r\nimport { reverseHex, str2hexstr } from '../../utils';\r\nimport { Transaction } from './../../transaction/transaction';\r\n\r\nimport abiJson from '../data/attestClaim';\r\nconst abiInfo = AbiInfo.parseJson(JSON.stringify(abiJson));\r\nconst contractHash = abiInfo.getHash().replace('0x', '');\r\nconst contractAddress = new Address(reverseHex(contractHash));\r\n/* TODO : Test */\r\n\r\n/**\r\n * Attests the claim.\r\n *\r\n * @param claimId Unique id of the claim\r\n * @param issuer Issuer's TST ID\r\n * @param subject Subject's TST ID\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer's address\r\n */\r\nexport function buildCommitRecordTx(claimId: string, issuer: string, subject: string,\r\n                                    gasPrice: string, gasLimit: string, payer: Address)  {\r\n    const f = abiInfo.getFunction('Commit');\r\n    if (issuer.substr(0, 3) === 'did') {\r\n        issuer = str2hexstr(issuer);\r\n    }\r\n    if (subject.substr(0, 3) === 'did') {\r\n        subject = str2hexstr(issuer);\r\n    }\r\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\r\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, issuer);\r\n    const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, subject);\r\n\r\n    let tx = new Transaction();\r\n    tx = makeInvokeTransaction(f.name, [p1, p2, p3], contractAddress, gasPrice, gasLimit, payer);\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Revokes the claim.\r\n *\r\n * @param claimId Unique id of the claim\r\n * @param revokerTstid Revoker's TST ID\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer's address\r\n */\r\nexport function buildRevokeRecordTx(claimId: string, revokerTstid: string,\r\n                                    gasPrice: string, gasLimit: string, payer: Address) {\r\n    const f = abiInfo.getFunction('Revoke');\r\n\r\n    const name1 = f.parameters[0].getName();\r\n    const type1 = ParameterType.ByteArray;\r\n\r\n    if (revokerTstid.substr(0, 3) === 'did') {\r\n        revokerTstid = str2hexstr(revokerTstid);\r\n    }\r\n\r\n    const p1 = new Parameter(name1, type1, str2hexstr(claimId));\r\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, revokerTstid);\r\n\r\n    return makeInvokeTransaction(f.name, [p1, p2], contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Queries the state of attest.\r\n *\r\n * @param claimId Unique id of the claim\r\n */\r\nexport function buildGetRecordStatusTx(claimId: string) {\r\n    const f = abiInfo.getFunction('GetStatus');\r\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\r\n    const tx = makeInvokeTransaction(f.name, [p1], contractAddress);\r\n    return tx;\r\n}\r\n","export default {\r\n    hash: '36bb5c053b6b839c8f6b923fe852f91239b9fccc',\r\n    entrypoint: 'Main',\r\n    functions: [{\r\n        name: 'Main',\r\n        parameters: [{\r\n            name: 'operation',\r\n            type: 'String'\r\n        }, {\r\n            name: 'args',\r\n            type: 'Array'\r\n        }],\r\n        returntype: 'Any'\r\n    }, {\r\n        name: 'Commit',\r\n        parameters: [{\r\n            name: 'claimId',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'commiterId',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'ownerId',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'Boolean'\r\n    }, {\r\n        name: 'Revoke',\r\n        parameters: [{\r\n            name: 'claimId',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'tstId',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'Boolean'\r\n    }, {\r\n        name: 'GetStatus',\r\n        parameters: [{\r\n            name: 'claimId',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'ByteArray'\r\n    }],\r\n    events: [{\r\n        name: 'ErrorMsg',\r\n        parameters: [{\r\n            name: 'arg1',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'arg2',\r\n            type: 'String'\r\n        }],\r\n        returntype: 'Void'\r\n    }, {\r\n        name: 'Push',\r\n        parameters: [{\r\n            name: 'arg1',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'arg2',\r\n            type: 'String'\r\n        }, {\r\n            name: 'arg3',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'Void'\r\n    }]\r\n};\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { hexstr2str } from '../utils';\r\n\r\n/**\r\n * Represents Notify event of attest creation of revocation.\r\n */\r\nexport class AttestNotifyEvent {\r\n    /**\r\n     * Deserializes Notify event.\r\n     *\r\n     * States in events are hex encoded.\r\n     *\r\n     * @param e encoded event\r\n     */\r\n    static deserialize(e: any): AttestNotifyEvent {\r\n        const event = new AttestNotifyEvent();\r\n\r\n        event.Action = e.Action;\r\n        event.Error = e.Error;\r\n        event.Desc = e.Desc;\r\n        event.Result = Result.deserialize(e.Result);\r\n\r\n        return event;\r\n    }\r\n\r\n    Action: string = 'Notify';\r\n    Desc: string;\r\n    Error: number;\r\n    Result: Result;\r\n}\r\n\r\n/**\r\n * Result of Notify event.\r\n */\r\nexport class Result {\r\n    /**\r\n     * Deserializes result from event.\r\n     *\r\n     * States are hex encoded.\r\n     *\r\n     * @param r encoded result\r\n     */\r\n    static deserialize(r: any): Result {\r\n        const result = new Result();\r\n\r\n        result.TxHash = r.TxHash;\r\n        result.State = r.State;\r\n        result.GasConsumed = r.GasConsumed;\r\n        result.Notify = r.Notify.map((n: any) => {\r\n            return {\r\n                ContractAddress: n.ContractAddress,\r\n                States: n.States.map( (s: any) => typeof s === 'string' ? hexstr2str(s) : s)\r\n            };\r\n        });\r\n        result.Version = r.Version;\r\n        return result;\r\n    }\r\n\r\n    TxHash: string;\r\n    /**\r\n     * State = 1 : smartcontract executation success\r\n     * State = 0 : smartcontract executation failure\r\n     */\r\n    State: number;\r\n    GasConsumed: number;\r\n    Notify: [{\r\n        ContractAddress: string;\r\n        /**\r\n         * The value of States are usually hex string\r\n         */\r\n        States: any[];\r\n    }];\r\n    Version: string;\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport * as b64 from 'base64-url';\r\nimport { Address, PrivateKey, Signature, SignatureScheme } from '../crypto';\r\nimport RestClient from '../network/rest/restClient';\r\nimport { WebsocketClient } from '../network/websocket/websocketClient';\r\nimport {\r\n    buildCommitRecordTx,\r\n    buildGetRecordStatusTx,\r\n    buildRevokeRecordTx\r\n} from '../smartcontract/neovm/attestClaimTxBuilder';\r\nimport { signTransactionAsync } from '../transaction/transactionBuilder';\r\nimport { hexstr2str, StringReader } from '../utils';\r\nimport { AttestNotifyEvent } from './attestNotifyEvent';\r\nimport { ClaimProof } from './claimProof';\r\nimport { Message, Metadata } from './message';\r\n\r\n/**\r\n * Type of revocation.\r\n */\r\nexport enum RevocationType {\r\n    AttestContract = 'AttestContract',\r\n    RevocationList = 'RevocationList'\r\n}\r\n\r\n/**\r\n * Revocation definition.\r\n */\r\nexport interface Revocation {\r\n    /**\r\n     * Type of revocation.\r\n     */\r\n    type: RevocationType;\r\n\r\n    /**\r\n     * Url of revocation list if type is RevocationList\r\n     */\r\n    url?: string;\r\n\r\n    /**\r\n     * Address of attest contract if type is AttestContract\r\n     */\r\n    addr?: string;\r\n}\r\n\r\n/**\r\n * Verifiable claim.\r\n *\r\n * TODO: override verify to add claim proof verification.\r\n */\r\nexport class Claim extends Message {\r\n    static deserialize(jwt: string): Claim {\r\n        return super.deserializeInternal(jwt, (m: any, s: any) => new Claim(m, s));\r\n    }\r\n\r\n    version: string;\r\n    context: string;\r\n    content: any;\r\n    revocation?: Revocation;\r\n\r\n    useProof: boolean;\r\n    proof?: ClaimProof;\r\n\r\n    constructor(metadata: Metadata, signature?: Signature | undefined, useProof?: boolean) {\r\n        super(metadata, signature);\r\n        this.useProof = useProof === true;\r\n    }\r\n\r\n    /**\r\n     * Overrides default message verification with added attest verification.\r\n     *\r\n     * TODO: return more than boolean\r\n     *\r\n     * const VerifyTstidClaimResult = {\r\n     *   CLAIM_NOT_ONCHAIN : 'CLAIM_NOT_ONCHAIN',\r\n     *   INVALID_SIGNATURE : 'INVALID_SIGNATURE',\r\n     *   PK_IN_REVOKED     : 'PK_IN_REVOKED',\r\n     *   NO_ISSUER_PK      : 'NO_ISSUER_PK',\r\n     *   EXPIRED_CLAIM     : 'EXPIRED_CLAIM',\r\n     *   REVOKED_CLAIM     : 'REVOKED_CLAIM',\r\n     *   VALID_CLAIM       : 'VALID_CLAIM'\r\n     * };\r\n     *\r\n     * @param url Restful endpoint of Tesra node\r\n     * @param checkAttest Should be the attest tested\r\n     */\r\n    async verify(url: string, checkAttest = true): Promise<boolean> {\r\n        const result = await super.verify(url);\r\n\r\n        if (result && checkAttest) {\r\n            return this.getStatus(url);\r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the claim into JWT/JWT-X format.\r\n     *\r\n     * Override default implementation by adding proof if available.\r\n     */\r\n    serialize(): string {\r\n        if (this.useProof) {\r\n            const jwt = super.serialize();\r\n            const proof = this.serializeProof();\r\n\r\n            return jwt + '.' + proof;\r\n        } else {\r\n            return super.serialize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attests the claim onto blockchain.\r\n     *\r\n     * @param url Websocket endpoint of Tesra node\r\n     * @param privateKey Private key to sign the transaction\r\n     * @param gasPrice gasPrice\r\n     * @param gasLimit gasLimit\r\n     * @param payer payer\r\n     */\r\n    async attest(url: string, gasPrice: string, gasLimit: string,\r\n                 payer: Address, privateKey: PrivateKey): Promise<boolean> {\r\n        const attesterId = this.metadata.issuer;\r\n        const subjectId = this.metadata.subject;\r\n        const claimId = this.metadata.messageId;\r\n        if (claimId === undefined) {\r\n            throw new Error('Claim id not specified.');\r\n        }\r\n\r\n        const client = new WebsocketClient(url);\r\n        const tx = buildCommitRecordTx(claimId, attesterId, subjectId, gasPrice, gasLimit, payer);\r\n        await signTransactionAsync(tx, privateKey);\r\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\r\n\r\n        const event = AttestNotifyEvent.deserialize(response);\r\n        // tslint:disable-next-line:no-console\r\n        console.log(JSON.stringify(event));\r\n        return event.Result.Notify[0].States[0] === 'Push';\r\n    }\r\n\r\n    /**\r\n     * Revokes claim attest from blockchain.\r\n     *\r\n     * @param gas the cost of the transactoin\r\n     * @param payer the payer of the cost\r\n     * @param privateKey Private key to sign the transaction\r\n     * @param url Websocket endpoint of Tesra node\r\n     * @param gasPrice gasPrice\r\n     * @param gasLimit gasLimit\r\n     * @param payer payer\r\n     */\r\n    async revoke(url: string, gasPrice: string,\r\n                 gasLimit: string, payer: Address, privateKey: PrivateKey): Promise<boolean> {\r\n        const attesterId = this.metadata.issuer;\r\n        const claimId = this.metadata.messageId;\r\n        if (claimId === undefined) {\r\n            throw new Error('Claim id not specified.');\r\n        }\r\n        const client = new WebsocketClient(url);\r\n        const tx = buildRevokeRecordTx(claimId, attesterId, gasPrice, gasLimit, payer);\r\n        await signTransactionAsync(tx, privateKey);\r\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\r\n\r\n        const event = AttestNotifyEvent.deserialize(response);\r\n\r\n        return event.Result.Notify[0].States[0] === 'Push';\r\n    }\r\n\r\n    /**\r\n     * Gets status of the claim attest.\r\n     *\r\n     * @param url Restful endpoint of Tesra node\r\n     */\r\n    async getStatus(url: string): Promise<boolean> {\r\n        const attesterId = this.metadata.issuer;\r\n        const claimId = this.metadata.messageId;\r\n        if (claimId === undefined) {\r\n            throw new Error('Claim id not specified.');\r\n        }\r\n\r\n        const client = new RestClient(url);\r\n        const tx = buildGetRecordStatusTx(claimId);\r\n\r\n        const response = await client.sendRawTransaction(tx.serialize(), true);\r\n\r\n        const result = GetStatusResponse.deserialize(response);\r\n        // tslint:disable-next-line:no-console\r\n        console.log(result);\r\n\r\n        return result.status === Status.ATTESTED && result.issuerId === attesterId;\r\n    }\r\n\r\n    protected payloadToJSON(): any {\r\n        return {\r\n            'ver': this.version,\r\n            '@context': this.context,\r\n            'clm': this.content,\r\n            'clm-rev': this.revocation\r\n        };\r\n    }\r\n\r\n    protected payloadFromJSON(json: any): void {\r\n        this.version = json.ver;\r\n        this.context = json['@context'];\r\n        this.content = json.clm;\r\n        this.revocation = json['clm-rev'];\r\n    }\r\n\r\n    /**\r\n     * Serializes the header into JWT/JWT-X encoded header.\r\n     *\r\n     * Override default implementation by adding proof if available.\r\n     *\r\n     * @param algorithm Signature algorithm used\r\n     * @param publicKeyId The ID of a signature public key\r\n     */\r\n    protected serializeHeader(algorithm: SignatureScheme | undefined, publicKeyId: string | undefined): string {\r\n        if (this.useProof) {\r\n            if (algorithm === undefined || publicKeyId === undefined) {\r\n                throw new Error('Signature is needed fow JWT-X.');\r\n            } else {\r\n                const header = {\r\n                    alg: algorithm.labelJWS,\r\n                    typ: 'JWT-X',\r\n                    kid: publicKeyId\r\n                };\r\n\r\n                const stringified = JSON.stringify(header);\r\n                return b64.encode(stringified, 'utf-8');\r\n            }\r\n        } else {\r\n            return super.serializeHeader(algorithm, publicKeyId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the proof into JWT-X.\r\n     */\r\n    protected serializeProof(): string {\r\n        const stringified = JSON.stringify(this.proof);\r\n        return b64.encode(stringified, 'utf-8');\r\n    }\r\n}\r\n\r\n/**\r\n * Helper class for deserializing GetStatus response.\r\n * fixme: Tesra node changed the response\r\n */\r\nexport class GetStatusResponse {\r\n    static deserialize(r: any): GetStatusResponse {\r\n        const response = new GetStatusResponse();\r\n\r\n        if (r.Result !== undefined && r.Result.Result === '') {\r\n            response.status = Status.NOTFOUND;\r\n            return response;\r\n        }\r\n        const sr = new StringReader(r.Result.Result);\r\n        sr.read(1); // data type\r\n        sr.readNextLen(); // data length\r\n        sr.read(1); // data type\r\n        const claimId = hexstr2str(sr.readNextBytes());\r\n        sr.read(1); // data type\r\n        const issuerId = hexstr2str(sr.readNextBytes());\r\n        sr.read(1); // data type\r\n        const subjectId = hexstr2str(sr.readNextBytes());\r\n        sr.read(1); // data type\r\n        let status = sr.readNextBytes();\r\n        response.claimId = claimId;\r\n        response.issuerId = issuerId;\r\n        response.subjectId = subjectId;\r\n        if (!status) {// status is revoked\r\n            status = '00';\r\n        }\r\n        response.status =  status as Status;\r\n        return response;\r\n    }\r\n\r\n    claimId: string;\r\n    issuerId: string;\r\n    subjectId: string;\r\n    status: Status;\r\n    // status: Status;\r\n    // attesterId: string;\r\n    // time: string;\r\n}\r\n\r\nexport enum Status {\r\n    REVOKED = '00',\r\n    ATTESTED = '01',\r\n    NOTFOUND = '-1'\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { PublicKey } from '../crypto';\r\nimport { hexstr2str, str2VarBytes, StringReader } from '../utils';\r\n\r\n/**\r\n * Public key representation with recorded id from blockchain.\r\n *\r\n */\r\nexport class PublicKeyWithId {\r\n    /**\r\n     * Deserialize from hex string to PublicKeyWithId\r\n     * @param hexstr\r\n     */\r\n    static deserialize(hexstr: string): PublicKeyWithId[] {\r\n        const sr = new StringReader(hexstr);\r\n\r\n        const result: PublicKeyWithId[] = [];\r\n        while (!sr.isEmpty()) {\r\n            const index = sr.readUint32();\r\n            const data = sr.readNextBytes();\r\n            const p = new PublicKeyWithId();\r\n            p.id = index;\r\n            p.pk = PublicKey.deserializeHex(new StringReader(data));\r\n            result.push(p);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Id of the public key.\r\n     *\r\n     * Only numeric part is recorded. Full PublicKeyId will be constucted as follows:\r\n     * <TSTID>#keys-<id>\r\n     */\r\n    id: number;\r\n    pk: PublicKey;\r\n}\r\n\r\n/**\r\n * Description attribute of TST ID\r\n */\r\nexport class DDOAttribute {\r\n    static deserialize(hexstr: string) {\r\n        const sr = new StringReader(hexstr);\r\n\r\n        const result: DDOAttribute[] = [];\r\n        while (!sr.isEmpty()) {\r\n            const key = hexstr2str(sr.readNextBytes());\r\n            const type = hexstr2str(sr.readNextBytes());\r\n            const value = hexstr2str(sr.readNextBytes());\r\n            const d = new DDOAttribute();\r\n            d.key = key;\r\n            d.type = type;\r\n            d.value = value;\r\n            result.push(d);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Key of the attribute\r\n     */\r\n    key: string;\r\n    /**\r\n     * Type of the attribute\r\n     */\r\n    type: string;\r\n    /**\r\n     * Value of the attribute\r\n     */\r\n    value: string;\r\n\r\n    /**\r\n     * Serialize DDO to hex string\r\n     */\r\n    serialize(): string {\r\n        let result = '';\r\n        result += str2VarBytes(this.key);\r\n        result += str2VarBytes(this.type);\r\n        result += str2VarBytes(this.value);\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Description object of TST ID\r\n */\r\nexport class DDO {\r\n    /**\r\n     * Deserialize from hex string to DDO\r\n     * @param hexstr Hex encoded string\r\n     */\r\n    static deserialize(hexstr: string): DDO {\r\n        const ss = new StringReader(hexstr);\r\n\r\n        const ddo = new DDO();\r\n        const pkLen = ss.readNextLen();\r\n\r\n        if (pkLen > 0) {\r\n            ddo.publicKeys = PublicKeyWithId.deserialize(ss.read(pkLen));\r\n        }\r\n\r\n        const attrLen = ss.readNextLen();\r\n        if (attrLen > 0) {\r\n            ddo.attributes = DDOAttribute.deserialize(ss.read(attrLen));\r\n        }\r\n\r\n        const recoveryLen = ss.readNextLen();\r\n        if (recoveryLen > 0) {\r\n            ddo.recovery = ss.read(recoveryLen);\r\n        }\r\n        return ddo;\r\n    }\r\n\r\n    /**\r\n     * Array of public keys\r\n     */\r\n    publicKeys: PublicKeyWithId[] = [];\r\n    /**\r\n     * Array of attributes\r\n     */\r\n    attributes: DDOAttribute[] = [];\r\n    /**\r\n     * Recovery of DDO\r\n     */\r\n    recovery: string = '';\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as b64 from 'base64-url';\r\nimport * as uuid from 'uuid';\r\nimport { PrivateKey, PublicKey, PublicKeyStatus, Signature, SignatureScheme } from '../crypto';\r\nimport RestClient from '../network/rest/restClient';\r\nimport { buildGetDDOTx, buildGetPublicKeyStateTx } from '../smartcontract/nativevm/tstidContractTxBuilder';\r\nimport { DDO } from '../transaction/ddo';\r\nimport { now } from '../utils';\r\n\r\n/**\r\n * Factory method type used for creating concrete instances of Message.\r\n */\r\nexport type MessageFactory<T extends Message> = (\r\n    metadata: Metadata,\r\n    signature: Signature | undefined\r\n) => T;\r\n\r\n/**\r\n * Metadata about the message.\r\n */\r\nexport interface Metadata {\r\n    /**\r\n     * Message id.\r\n     *\r\n     * Will be assigned if not provided.\r\n     */\r\n    messageId?: string;\r\n\r\n    /**\r\n     * Issuer.\r\n     */\r\n    issuer: string;\r\n\r\n    /**\r\n     * Recipient.\r\n     */\r\n    subject: string;\r\n\r\n    /**\r\n     * Creation time.\r\n     */\r\n    issuedAt: number;\r\n\r\n    /**\r\n     * Expiration time.\r\n     */\r\n    expireAt?: number;\r\n}\r\n\r\n/**\r\n * Common representation of Message in JWT form.\r\n */\r\nexport abstract class Message {\r\n\r\n    /**\r\n     * Deserializes the message from JWT format.\r\n     *\r\n     * A concrete instance will be creater through the message factory method. This method\r\n     * is called from concrete class.\r\n     *\r\n     * @param jwt Encoded message\r\n     * @param creator Factory method\r\n     */\r\n    protected static deserializeInternal<T extends Message>(jwt: string, creator: MessageFactory<T>): T {\r\n        const parts = jwt.split('.', 3);\r\n\r\n        if (parts.length < 2) {\r\n            throw new Error('Invalid message.');\r\n        }\r\n\r\n        const header = Message.deserializeHeader(parts[0]);\r\n        const payload = Message.deserializePayload(parts[1]);\r\n        let signature: Signature | undefined;\r\n\r\n        if (parts.length > 2) {\r\n            if (header.algorithm !== undefined && header.publicKeyId !== undefined) {\r\n                signature = Signature.deserializeJWT(parts[2], header.algorithm, header.publicKeyId);\r\n            } else {\r\n                throw new Error('Signature scheme was not specified.');\r\n            }\r\n        }\r\n\r\n        const msg = creator(payload.metadata, signature);\r\n        msg.payloadFromJSON(payload.rest);\r\n        return msg;\r\n    }\r\n\r\n    /**\r\n     * Deserializes payload part of JWT message.\r\n     *\r\n     * @param encoded JWT encoded payload\r\n     */\r\n    private static deserializePayload(encoded: string) {\r\n        const stringified = b64.decode(encoded);\r\n        const { jti, iss, sub, iat, exp, ...rest } = JSON.parse(stringified);\r\n\r\n        return {\r\n            metadata: {\r\n                messageId: jti,\r\n                issuer: iss,\r\n                subject: sub,\r\n                issuedAt: iat,\r\n                expireAt: exp\r\n            } as Metadata,\r\n            rest\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Deserializes the header from JWT encoded header.\r\n     *\r\n     * @param encoded JWT encoded header\r\n     */\r\n    private static deserializeHeader(encoded: string) {\r\n        const stringified = b64.decode(encoded);\r\n        const header = JSON.parse(stringified);\r\n\r\n        return {\r\n            algorithm: header.alg !== undefined ? SignatureScheme.fromLabelJWS(header.alg) : undefined,\r\n            publicKeyId: header.kid\r\n        };\r\n    }\r\n\r\n    metadata: Metadata;\r\n    signature?: Signature;\r\n\r\n    constructor(metadata: Metadata, signature: Signature | undefined) {\r\n        this.metadata = metadata;\r\n        this.signature = signature;\r\n\r\n        if (this.metadata.messageId === undefined) {\r\n            this.metadata.messageId = uuid();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Signs the message and store the signature inside the request.\r\n     *\r\n     * If the algorithm is not specified, then default algorithm for Private key type is used.\r\n     *\r\n     * @param url Restful endpoint of Tesra node\r\n     * @param publicKeyId The ID of a signature public key\r\n     * @param privateKey Private key to sign the request with\r\n     * @param algorithm Signature algorithm used\r\n     */\r\n    async sign(\r\n        url: string,\r\n        publicKeyId: string,\r\n        privateKey: PrivateKey,\r\n        algorithm?: SignatureScheme\r\n    ): Promise<void> {\r\n        await retrievePublicKey(publicKeyId, url);\r\n\r\n        if (algorithm === undefined) {\r\n            algorithm = privateKey.algorithm.defaultSchema;\r\n        }\r\n\r\n        const msg = this.serializeUnsigned(algorithm, publicKeyId);\r\n        this.signature = await privateKey.signAsync(msg, algorithm, publicKeyId);\r\n    }\r\n\r\n    /**\r\n     * Verifies the signature and check ownership of specified TST ID through smart contract call.\r\n     *\r\n     * @param url Restful endpoint of Tesra node\r\n     * @returns Boolean if the ownership is confirmed\r\n     */\r\n    async verify(url: string): Promise<boolean> {\r\n        const signature = this.signature;\r\n\r\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\r\n            try {\r\n                if (!this.verifyKeyOwnership()) {\r\n                    return false;\r\n                }\r\n\r\n                if (!this.verifyExpiration()) {\r\n                    return false;\r\n                }\r\n\r\n                const state = await retrievePublicKeyState(signature.publicKeyId, url);\r\n                if (state === PublicKeyStatus.REVOKED) {\r\n                    return false;\r\n                }\r\n\r\n                const publicKey = await retrievePublicKey(signature.publicKeyId, url);\r\n\r\n                const msg = this.serializeUnsigned(signature.algorithm, signature.publicKeyId);\r\n                return publicKey.verify(msg, signature);\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the message without signature into JWT format.\r\n     *\r\n     * Header might contain algorithm and public key id.\r\n     *\r\n     * @param algorithm Signature algorithm used\r\n     * @param publicKeyId The ID of a signature public key\r\n     */\r\n    serializeUnsigned(algorithm?: SignatureScheme, publicKeyId?: string): string {\r\n        const headerEncoded = this.serializeHeader(algorithm, publicKeyId);\r\n        const payloadEncoded = this.serializePayload();\r\n\r\n        return headerEncoded + '.' + payloadEncoded;\r\n    }\r\n\r\n    /**\r\n     * Serializes the message into JWT format.\r\n     *\r\n     */\r\n    serialize(): string {\r\n        const signature = this.signature;\r\n\r\n        if (signature !== undefined) {\r\n            const signatureEncoded = signature.serializeJWT();\r\n            return this.serializeUnsigned(signature.algorithm, signature.publicKeyId) + '.' + signatureEncoded;\r\n        } else {\r\n            return this.serializeUnsigned();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the header into JWT encoded header.\r\n     *\r\n     * @param algorithm Signature algorithm used\r\n     * @param publicKeyId The ID of a signature public key\r\n     */\r\n    protected serializeHeader(\r\n        algorithm: SignatureScheme | undefined,\r\n        publicKeyId: string | undefined\r\n    ): string {\r\n        let header;\r\n        if (algorithm !== undefined) {\r\n            header = {\r\n                alg: algorithm.labelJWS,\r\n                typ: 'JWT',\r\n                kid: publicKeyId\r\n            };\r\n        } else {\r\n            header = {\r\n                typ: 'JWT'\r\n            };\r\n        }\r\n\r\n        const stringified = JSON.stringify(header);\r\n        return b64.encode(stringified, 'utf-8');\r\n    }\r\n\r\n    /**\r\n     * Converts claim data to JSON for serialization.\r\n     */\r\n    protected abstract payloadToJSON(): any;\r\n\r\n    /**\r\n     * Retrieves data from JSON.\r\n     *\r\n     * @param json JSON object with data\r\n     */\r\n    protected abstract payloadFromJSON(json: any): void;\r\n\r\n    /**\r\n     * Verifies if the expiration date has passed\r\n     */\r\n    private verifyExpiration(): boolean {\r\n        if (this.metadata.expireAt !== undefined) {\r\n            return now() < this.metadata.expireAt;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies if the declared public key id belongs to issuer.\r\n     */\r\n    private verifyKeyOwnership(): boolean {\r\n        const signature = this.signature;\r\n\r\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\r\n            const tstId = extractTstId(signature.publicKeyId);\r\n\r\n            return tstId === this.metadata.issuer;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes payload part of JWT message.\r\n     */\r\n    private serializePayload(): string {\r\n        const metadata = {\r\n            jti: this.metadata.messageId,\r\n            iss: this.metadata.issuer,\r\n            sub: this.metadata.subject,\r\n            iat: this.metadata.issuedAt,\r\n            exp: this.metadata.expireAt\r\n        };\r\n        const rest = this.payloadToJSON();\r\n\r\n        const stringified = JSON.stringify({...metadata, ...rest});\r\n        return b64.encode(stringified, 'utf-8');\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the public key associated with TST ID from blockchain.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n * @param url Restful endpoint of Tesra node\r\n */\r\nexport async function retrievePublicKey(publicKeyId: string, url: string): Promise<PublicKey> {\r\n    const tstId = extractTstId(publicKeyId);\r\n    const keyId = extractKeyId(publicKeyId);\r\n\r\n    const client = new RestClient(url);\r\n    const tx = buildGetDDOTx(tstId);\r\n    const response = await client.sendRawTransaction(tx.serialize(), true);\r\n\r\n    if (response.Result && response.Result.Result) {\r\n        const ddo = DDO.deserialize(response.Result.Result);\r\n\r\n        const publicKey = ddo.publicKeys.find((pk) => pk.id === keyId);\r\n\r\n        if (publicKey === undefined) {\r\n            throw new Error('Not found');\r\n        }\r\n\r\n        return publicKey.pk;\r\n    } else {\r\n        throw new Error('Not found');\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the state of public key associated with TST ID from blockchain.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n * @param url Restful endpoint of Tesra node\r\n */\r\nexport async function retrievePublicKeyState(publicKeyId: string, url: string): Promise<PublicKeyStatus> {\r\n    const tstId = extractTstId(publicKeyId);\r\n    const keyId = extractKeyId(publicKeyId);\r\n\r\n    const client = new RestClient(url);\r\n    const tx = buildGetPublicKeyStateTx(tstId, keyId);\r\n    const response = await client.sendRawTransaction(tx.serialize(), true);\r\n\r\n    if (response.Result && response.Result.Result) {\r\n        return PublicKeyStatus.fromHexLabel(response.Result.Result);\r\n    } else {\r\n        throw new Error('Not found');\r\n    }\r\n}\r\n\r\n/**\r\n * Extracts TST ID from public key Id.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n */\r\nexport function extractTstId(publicKeyId: string): string {\r\n    const index = publicKeyId.indexOf('#keys-');\r\n\r\n    if (index === -1) {\r\n        throw new Error('Is not a publicKeId.');\r\n    }\r\n\r\n    return publicKeyId.substr(0, index);\r\n}\r\n\r\n/**\r\n * Extracts key id from public key Id.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n */\r\nexport function extractKeyId(publicKeyId: string): number {\r\n    const index = publicKeyId.indexOf('#keys-');\r\n\r\n    if (index === -1) {\r\n        throw new Error('Is not a publicKeId.');\r\n    }\r\n\r\n    // return num2hexstring(\r\n    //     Number(publicKeyId.substr(index + '#keys-'.length))\r\n    // );\r\n    return Number(publicKeyId.substr(index + '#keys-'.length));\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { Address, JsonKey, PrivateKey } from './crypto';\r\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\r\nimport { ScryptParams } from './scrypt';\r\nimport { Transaction } from './transaction/transaction';\r\nimport { signTransaction } from './transaction/transactionBuilder';\r\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\r\n\r\n/**\r\n * Control data of identity\r\n */\r\nexport class ControlData {\r\n    static fromJson(json: any): ControlData {\r\n        const privateKey = deserializeFromJson(json as JsonKey);\r\n        const cd = new ControlData(json.id, privateKey, new Address(json.address), json.salt);\r\n        cd.publicKey = json.publicKey;\r\n        cd.hash = json.hash;\r\n        return cd;\r\n    }\r\n\r\n    /**\r\n     * Id of control data\r\n     */\r\n    id: string;\r\n    /**\r\n     * Encrypted private key\r\n     */\r\n    encryptedKey: PrivateKey;\r\n    /**\r\n     * Address of control data\r\n     */\r\n    address: Address;\r\n    /**\r\n     * Salt of control data\r\n     */\r\n    salt: string;\r\n    /**\r\n     * hash type\r\n     */\r\n    hash: string = 'sha256';\r\n    /**\r\n     * The public key\r\n     */\r\n    publicKey: string;\r\n\r\n    constructor(id: string, encryptedKey: PrivateKey, address: Address, salt: string) {\r\n        this.id = id;\r\n        this.encryptedKey = encryptedKey;\r\n        this.address = address;\r\n        this.salt = salt;\r\n    }\r\n\r\n    toJson(): object {\r\n        return {\r\n            id: this.id,\r\n            ...this.encryptedKey.serializeJson(),\r\n            address: this.address.toBase58(),\r\n            salt: this.salt,\r\n            ['enc-alg']: 'aes-256-gcm',\r\n            hash: this.hash,\r\n            publicKey: this.publicKey\r\n        };\r\n    }\r\n}\r\n\r\nexport class Identity {\r\n    /**\r\n     * Import identity\r\n     * @param label Name of identity\r\n     * @param encryptedPrivateKey Encrypted private key\r\n     * @param password User's password to decrypt\r\n     * @param address Address to decrypt\r\n     * @param saltBase64 Salt to decrypt\r\n     * @param params Optional params to decrypt\r\n     */\r\n    static importIdentity(\r\n        label: string,\r\n        encryptedPrivateKey: PrivateKey,\r\n        password: string,\r\n        address: Address,\r\n        saltBase64: string,\r\n        params?: ScryptParams\r\n    ): Identity {\r\n        // create identity\r\n        const identity = new Identity();\r\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\r\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\r\n        if (!label) {\r\n            label = ab2hexstring (generateRandomArray(4));\r\n        }\r\n\r\n        // generate tstId from p\r\n        const publicKey = privateKey.getPublicKey();\r\n        identity.tstId = Address.generateTstid(publicKey);\r\n        identity.label = label;\r\n        identity.lock = false;\r\n        identity.isDefault = false;\r\n\r\n        // control\r\n        const control = new ControlData('1', encryptedPrivateKey, Address.fromTstid(identity.tstId), saltBase64);\r\n        control.publicKey = publicKey.serializeHex();\r\n        identity.controls.push(control);\r\n\r\n        return identity;\r\n    }\r\n\r\n    /**\r\n     * Creates Identity object encrypting specified private key.\r\n     *\r\n     * The identity is not registered on the blockchain. Caller needs to register it.\r\n     *\r\n     * @param privateKey Private key associated with the identity\r\n     * @param keyphrase Password use to encrypt the private key\r\n     * @param label Custom label\r\n     * @param params Optional scrypt params\r\n     */\r\n    static create(privateKey: PrivateKey, keyphrase: string, label: string, params?: ScryptParams) {\r\n        const identity = new Identity();\r\n        identity.tstId = '';\r\n        identity.label = label;\r\n        identity.lock = false;\r\n        identity.isDefault = false;\r\n\r\n        // tstId\r\n        const publicKey = privateKey.getPublicKey();\r\n        identity.tstId = Address.generateTstid(publicKey);\r\n        const address = Address.fromTstid(identity.tstId);\r\n        const salt = randomBytes(16);\r\n        const encryptedPrivateKey = privateKey.encrypt(keyphrase, address, salt, params);\r\n        // start from 1\r\n        const saltBase64 = Buffer.from(salt, 'hex').toString('base64');\r\n        const control = new ControlData('1', encryptedPrivateKey, address, saltBase64);\r\n        control.publicKey = publicKey.serializeHex();\r\n        identity.controls.push(control);\r\n\r\n        return identity;\r\n    }\r\n\r\n    static parseJson(json: string): Identity {\r\n        return Identity.parseJsonObj(JSON.parse(json));\r\n    }\r\n\r\n    /**\r\n     * Deserializes JSON object.\r\n     *\r\n     * Object should be real object, not stringified.\r\n     *\r\n     * @param obj JSON object\r\n     */\r\n    static parseJsonObj(obj: any): Identity {\r\n        const id = new Identity();\r\n        id.tstId = obj.tstId;\r\n        id.label = obj.label;\r\n        id.lock = obj.lock;\r\n        id.isDefault = obj.isDefault;\r\n        id.controls = (obj.controls as any[]).map((c) => ControlData.fromJson(c));\r\n        id.extra = obj.extra;\r\n        return id;\r\n    }\r\n\r\n    tstId: string;\r\n    label: string;\r\n    lock: boolean;\r\n    isDefault: boolean;\r\n    controls: ControlData[] = [];\r\n    extra: null;\r\n\r\n    addControl(control: ControlData) {\r\n        for (const c of this.controls) {\r\n            if (c.address.toBase58() === control.address.toBase58()) {\r\n                return;\r\n            }\r\n        }\r\n        control.id = (this.controls.length + 1).toString();\r\n        this.controls.push(control);\r\n    }\r\n\r\n    toJson(): string {\r\n        return JSON.stringify(this.toJsonObj());\r\n    }\r\n\r\n    /**\r\n     * Serializes to JSON object.\r\n     *\r\n     * Returned object will not be stringified.\r\n     *\r\n     */\r\n    toJsonObj(): any {\r\n        const obj = {\r\n            tstId: this.tstId,\r\n            label: this.label,\r\n            lock: this.lock,\r\n            isDefault: this.isDefault,\r\n            controls: this.controls.map((c) => c.toJson()),\r\n            extra: this.extra\r\n        };\r\n        return obj;\r\n    }\r\n\r\n    exportPrivateKey(password: string, params?: ScryptParams) {\r\n        const encryptedKey = this.controls[0].encryptedKey;\r\n        const address = this.controls[0].address;\r\n        const salt = this.controls[0].salt;\r\n        return encryptedKey.decrypt(password, address, salt, params);\r\n    }\r\n\r\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\r\n        const pri = this.exportPrivateKey(password, params);\r\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\r\n        return tx;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as cryptoJS from 'crypto-js';\r\nimport { Signable } from '../crypto/index';\r\nimport { PrivateKey } from '../crypto/PrivateKey';\r\nimport { TxType } from '../transaction/transaction';\r\nimport { SignatureScheme } from './../crypto/SignatureScheme';\r\nimport { TransactionAttribute } from './../transaction/txAttribute';\r\nimport { num2hexstring, num2VarInt } from './../utils';\r\nimport { Program } from './Program';\r\nimport { TransactionInput } from './TransactionInput';\r\nimport { TransactionOutput } from './TransactionOutput';\r\n\r\n/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nexport class TransactionNeo implements Signable {\r\n    /**\r\n     * Transaction type\r\n     */\r\n    type: TxType;\r\n\r\n    version: number = 0;\r\n\r\n    nonce: string;\r\n\r\n    attributes: TransactionAttribute[];\r\n\r\n    inputs: TransactionInput[];\r\n\r\n    outputs: TransactionOutput[];\r\n\r\n    scripts: Program[];\r\n\r\n    serialize() {\r\n        let result = this.serializeUnsigned();\r\n        result += num2VarInt(this.scripts.length);\r\n        for (const s of this.scripts) {\r\n            result += s.serialize();\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    serializeUnsigned() {\r\n        let result = '';\r\n        result += num2hexstring(this.type);\r\n        result += num2hexstring(this.version);\r\n\r\n        result += this.serializeExclusiveData();\r\n        result += num2VarInt(this.attributes.length);\r\n        for (const a of this.attributes) {\r\n            result += a.serialize();\r\n        }\r\n\r\n        result += num2VarInt(this.inputs.length);\r\n        for (const i of this.inputs) {\r\n            result += i.serialize();\r\n        }\r\n\r\n        result += num2VarInt(this.outputs.length);\r\n        for (const o of this.outputs) {\r\n            result += o.serialize();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getHash() {\r\n        const data = this.serializeUnsigned();\r\n\r\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\r\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\r\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\r\n\r\n        return ProgramSha2562;\r\n    }\r\n\r\n    getSignContent() {\r\n        return this.getHashData();\r\n    }\r\n\r\n    serializeUnsignedData() {\r\n        return this.getHashData();\r\n    }\r\n\r\n    getHashData() {\r\n        return this.serializeUnsigned();\r\n    }\r\n\r\n    sign(privateKey: PrivateKey, scheme: SignatureScheme = SignatureScheme.ECDSAwithSHA256) {\r\n        const sig = privateKey.sign(this.getHashData(), scheme).serializeHex();\r\n        const signature = sig.substring(2);\r\n        return signature;\r\n    }\r\n\r\n    protected serializeExclusiveData() {\r\n        return '';\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { hex2VarBytes } from '../utils';\r\nimport { TxType } from './../transaction/transaction';\r\nimport { num2hexstring } from './../utils';\r\nimport { TransactionNeo } from './TransactionNeo';\r\n\r\nexport class InvocationTransaction extends TransactionNeo {\r\n    script: string;\r\n    gas: number;\r\n    constructor() {\r\n        super();\r\n        this.type = TxType.Invoke;\r\n    }\r\n\r\n    serializeExclusiveData() {\r\n        let result = '';\r\n        result += hex2VarBytes(this.script);\r\n        result += num2hexstring(this.gas, 8, true);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport axios from 'axios';\r\nimport { Address } from './../crypto/address';\r\n\r\nexport class NeoRpc {\r\n\r\n    static sendRawTransaction(url: string, data: string) {\r\n        const req = this.makeRequest('sendrawtransaction', data);\r\n        return axios.post(url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    static makeRequest(method: string, ...params: any[]) {\r\n        const request = {\r\n            jsonrpc: '2.0',\r\n            method,\r\n            params,\r\n            id: 1\r\n        };\r\n\r\n        return request;\r\n    }\r\n\r\n    static getBalance(url: string, contractAddr: Address, address: Address) {\r\n        const req = this.makeRequest('getstorage', contractAddr.toHexString(), address.serialize());\r\n        return axios.post(url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { PublicKey } from '../crypto/PublicKey';\r\nimport { programFromMultiPubKey, programFromParams, programFromPubKey } from '../transaction/program';\r\nimport { hex2VarBytes, StringReader } from '../utils';\r\n\r\nexport class Program {\r\n    static deserialize(hexstring: string) {\r\n        const sr = new StringReader();\r\n        const program = new Program();\r\n        program.parameter = sr.readNextBytes();\r\n        program.code = sr.readNextBytes();\r\n        return program;\r\n    }\r\n\r\n    static programFromParams(sigData: string[]) {\r\n        return programFromParams(sigData);\r\n    }\r\n\r\n    static programFromPubKey(publicKey: PublicKey) {\r\n        return programFromPubKey(publicKey);\r\n    }\r\n\r\n    static programFromMultiPubKey(m: number, pks: PublicKey[]) {\r\n        return programFromMultiPubKey(pks, m);\r\n    }\r\n\r\n    parameter: string;\r\n\r\n    code: string;\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += hex2VarBytes(this.parameter);\r\n        result += hex2VarBytes(this.code);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport AbiFunction from '../smartcontract/abi/abiFunction';\r\nimport { serializeAbiFunction } from '../transaction/scriptBuilder';\r\nimport { num2hexstring, randomBytes } from '../utils';\r\nimport { Address } from './../crypto/address';\r\nimport { TransactionAttribute, TransactionAttributeUsage } from './../transaction/txAttribute';\r\nimport { InvocationTransaction } from './InvocationTransaction';\r\nexport class SmartContract {\r\n    static makeInvokeTransaction(contractAddr: Address, addr: Address, abiFunction: AbiFunction) {\r\n        let params = serializeAbiFunction(abiFunction);\r\n        params += num2hexstring(0x67);\r\n        params += contractAddr.serialize();\r\n        const tx = this.makeInvocationTransaction(params, addr);\r\n        return tx;\r\n    }\r\n\r\n    static makeInvocationTransaction(params: string, addr: Address) {\r\n        const tx = new InvocationTransaction();\r\n        tx.version = 1;\r\n        tx.attributes = [];\r\n        const attr1 = new TransactionAttribute();\r\n        attr1.usage = TransactionAttributeUsage.Script;\r\n        attr1.data = addr.serialize();\r\n        tx.attributes[0] = attr1;\r\n        const attr2 = new TransactionAttribute();\r\n        attr2.usage = TransactionAttributeUsage.DescriptionUrl;\r\n        attr2.data = randomBytes(16);\r\n        tx.attributes[1] = attr2;\r\n        tx.inputs = [];\r\n        tx.outputs = [];\r\n        tx.script = params;\r\n        tx.gas = 0;\r\n        return tx;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { reverseHex } from '../utils';\r\nimport { num2hexstring, StringReader } from './../utils';\r\n\r\nexport class TransactionInput {\r\n\r\n    static deserialize(hexstr: string) {\r\n        const sr = new StringReader(hexstr);\r\n        const input = new TransactionInput();\r\n        input.prevHash = sr.read(20);\r\n        input.prevIndex = parseInt(reverseHex(sr.read(2)), 16);\r\n        return input;\r\n    }\r\n    /**\r\n     * 32 bytes\r\n     */\r\n    prevHash: string;\r\n\r\n    prevIndex: number;\r\n\r\n    equals(o: any) {\r\n        if (o === this) {\r\n            return true;\r\n        }\r\n        if (null === o) {\r\n            return false;\r\n        }\r\n        if (!(o instanceof TransactionInput)) {\r\n            return false;\r\n        }\r\n        return this.prevHash === o.prevHash && this.prevIndex === o.prevIndex;\r\n    }\r\n\r\n    hashCode() {\r\n        return parseInt(reverseHex(this.prevHash) , 16) + this.prevIndex;\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.prevHash;\r\n        result += num2hexstring(this.prevIndex, 2, true);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Address } from './../crypto/address';\r\nimport { num2hexstring, StringReader } from './../utils';\r\nexport class TransactionOutput {\r\n\r\n    static deserialize(hexstring: string) {\r\n        const sr = new StringReader(hexstring);\r\n        const output = new TransactionOutput();\r\n        output.assetId = sr.read(32);\r\n        output.value = sr.readLong();\r\n        output.scriptHash = new Address(sr.read(20));\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * 32 bytes\r\n     */\r\n    assetId: string;\r\n\r\n    // long\r\n    value: number;\r\n\r\n    scriptHash: Address;\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.assetId;\r\n        result += num2hexstring(this.value, 8, true);\r\n        result += this.scriptHash.serialize();\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport axios from 'axios';\r\nimport { TEST_TST_URL } from '../../consts';\r\nimport { Address } from '../../crypto/address';\r\nimport { ERROR_CODE } from '../../error';\r\n\r\n/**\r\n * Wrapper class for RPC apis.\r\n */\r\nexport default class RpcClient {\r\n    /**\r\n     * Url of the blockchain node\r\n     */\r\n    url: string;\r\n\r\n    constructor( url ?: string ) {\r\n        this.url = url || TEST_TST_URL.RPC_URL;\r\n    }\r\n\r\n    /**\r\n     * Get the current blockchain node url.\r\n     */\r\n    getUrl() {\r\n        return this.url;\r\n    }\r\n\r\n    /**\r\n     * Make request base on method and parameters\r\n     * @param method Method's name\r\n     * @param params Parameters\r\n     */\r\n    makeRequest(method: string, ...params: any[]) {\r\n        const request = {\r\n            jsonrpc: '2.0',\r\n            method,\r\n            params,\r\n            id: 1\r\n        };\r\n\r\n        return request;\r\n    }\r\n\r\n    /**\r\n     * Get the balance of some address.\r\n     * The result contains TST and TSG.\r\n     * @param address Address\r\n     */\r\n    getBalance(address: Address): Promise<any> {\r\n        const req = this.makeRequest('getbalance', address.toBase58());\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send ran transaction to blockchain.\r\n     * @param data Hex encoded data.\r\n     * @param preExec Decides if it is a pre-execute transaction.\r\n     */\r\n    sendRawTransaction(data: string, preExec: boolean = false): Promise<any> {\r\n        let req;\r\n\r\n        if (preExec) {\r\n            req = this.makeRequest('sendrawtransaction', data, 1);\r\n        } else {\r\n            req = this.makeRequest('sendrawtransaction', data);\r\n        }\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get raw transaction by transaction hash.\r\n     * The result is hex encoded string.\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    getRawTransaction(txHash: string): Promise<any> {\r\n        const req = this.makeRequest('getrawtransaction', txHash);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get transaction info by transaction hash.\r\n     * The result is json.\r\n     * @param txHash Reversed transaction hash.\r\n     */\r\n    getRawTransactionJson(txHash: string): Promise<any> {\r\n        const req = this.makeRequest('getrawtransaction', txHash, 1);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /** Deprecated\r\n     * Get the generation time for each block.\r\n     * If the blockchain node runs in vbft, the result is null cause the time is not fixed.\r\n     */\r\n    // getGenerateBlockTime(): Promise<any> {\r\n    //     const req = this.makeRequest('getgenerateblocktime');\r\n\r\n    //     return axios.post(this.url, req).then((res) => {\r\n    //         return res.data;\r\n    //     });\r\n    // }\r\n\r\n    /**\r\n     * Get the nodes count.\r\n     */\r\n    getNodeCount(): Promise<any> {\r\n        const req = this.makeRequest('getconnectioncount');\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the current block height.\r\n     */\r\n    getBlockHeight(): Promise<any> {\r\n        const req = this.makeRequest('getblockcount');\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            if (res.data && res.data.result) {\r\n                return res.data.result - 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the all blocks count.\r\n     */\r\n    getBlockCount(): Promise<any> {\r\n        const req = this.makeRequest('getblockcount');\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get block info by block's height or hash.\r\n     * The result is json.\r\n     * @param value Block's hash or height\r\n     */\r\n    getBlockJson(value: string | number): Promise<any> {\r\n        const req = this.makeRequest('getblock', value, 1);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get contract info by contract' code hash.\r\n     * The result is hex encoded string.\r\n     * @param hash Contract's code hash.\r\n     */\r\n    getContract(hash: string): Promise<any> {\r\n        const req = this.makeRequest('getcontractstate', hash);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get contract info by contract's code hash.\r\n     * The result is json.\r\n     * @param codeHash Contract's code hash.\r\n     */\r\n    getContractJson(codeHash: string): Promise<any> {\r\n        const req = this.makeRequest('getcontractstate', codeHash, 1);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get block info by block's height or hash.\r\n     * The result is hex encoded string.\r\n     *\r\n     * @param value Block's height or hash\r\n     */\r\n    getBlock(value: string | number): Promise<any> {\r\n        const req = this.makeRequest('getblock', value);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get smart contract event.\r\n     * If parameter is transaction's hash, the result is the event of that transaction.\r\n     * If parameter is block's height, the result is all the events of that block.\r\n     *\r\n     * @param value Transaction's hash or block's height\r\n     */\r\n    getSmartCodeEvent(value: string | number): Promise<any> {\r\n        const req = this.makeRequest('getsmartcodeevent', value);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get block height by transaction hash\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    getBlockHeightByTxHash(txHash: string): Promise<any> {\r\n        const req = this.makeRequest('getblockheightbytxhash', txHash);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get stored value in smart contract by contract's code hash and the key.\r\n     * @param codeHash Contract's code hash\r\n     * @param key Key of stored value\r\n     */\r\n    getStorage(codeHash: string, key: string): Promise<any> {\r\n        const req = this.makeRequest('getstorage', codeHash, key);\r\n\r\n        // tslint:disable-next-line:no-console\r\n        console.log(req);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get merkle proof by transaction hash.\r\n     * @param hash Reversed transaction hash\r\n     */\r\n    getMerkleProof(hash: string): Promise<any> {\r\n        const req = this.makeRequest('getmerkleproof', hash);\r\n\r\n        // tslint:disable-next-line:no-console\r\n        console.log(this.url);\r\n        // tslint:disable-next-line:no-console\r\n        console.log(req);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get allowanece\r\n     * @param asset Asset's type.Only TST and TSG supported.\r\n     * @param from Address of allowance's sender.\r\n     * @param to Address of allowance's receiver.\r\n     */\r\n    getAllowance(asset: string, from: Address, to: Address): Promise<any> {\r\n        if (asset !== 'tst' && asset !== 'tsg') {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        const req = this.makeRequest('getallowance', asset, from.toBase58(), to.toBase58());\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getUnboundTsg(address: Address): Promise<any> {\r\n        const req = this.makeRequest('getunboundtsg', 'tsg', address.toBase58(), address.toBase58());\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getBlockTxsByHeight(height: number): Promise<any> {\r\n        const req = this.makeRequest('getblocktxsbyheight', height);\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getGasPrice(): Promise<any> {\r\n        const req = this.makeRequest('getgasprice');\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getGrantTsg(address: Address): Promise<any> {\r\n        const req = this.makeRequest('getgranttsg', address.toBase58());\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getMempoolTxCount(): Promise<any> {\r\n        const req = this.makeRequest('getmempooltxcount');\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getMempoolTxState(txHash: string): Promise<any> {\r\n        const req = this.makeRequest('getmempooltxstate', txHash);\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getVersion(): Promise<any> {\r\n        const req = this.makeRequest('getversion');\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { str2hexstr } from '../../utils';\r\nimport { Address } from './../../crypto/address';\r\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\r\nimport { num2hexstring } from './../../utils';\r\nimport { Parameter, ParameterType } from './../abi/parameter';\r\n\r\nexport class Oep8State {\r\n    public from: string;\r\n    public to: string;\r\n    public tokenId: string;\r\n    public value: BigNumber;\r\n\r\n    public constructor(from: Address, to: Address, tokenId: number, value: string) {\r\n        this.from = from.serialize();\r\n        this.to = to.serialize();\r\n        this.tokenId = num2hexstring(tokenId);\r\n        this.value = new BigNumber(value);\r\n    }\r\n}\r\n\r\nexport class TransferFrom {\r\n    spender: string;\r\n    from: string;\r\n    to: string;\r\n    tokenId: string;\r\n    value: BigNumber;\r\n    constructor(spender: Address, from: Address, to: Address, tokenId: number, value: string) {\r\n        this.spender = spender.serialize();\r\n        this.from = from.serialize();\r\n        this.to = to.serialize();\r\n        this.tokenId = num2hexstring(tokenId);\r\n        this.value = new BigNumber(value);\r\n    }\r\n}\r\n\r\nconst FunctionNames = {\r\n    Name: 'name',\r\n    Symbol: 'symbol',\r\n    TotalSupply: 'totalSupply',\r\n    BalanceOf: 'balanceOf',\r\n    Transfer: 'transfer',\r\n    TransferMulti: 'transferMulti',\r\n    Approve: 'approve',\r\n    ApproveMulti: 'approveMulti',\r\n    Allowance: 'allowance',\r\n    TransferFrom: 'transferFrom',\r\n    TransferFromMulti: 'transferFromMulti',\r\n    Compound: 'compound',\r\n    Concatkey: 'concatkey',\r\n    Init: 'init',\r\n    CreateMultiKindsPumpkin: 'createMultiKindsPumpkin',\r\n    CheckTokenPrefix: 'checkTokenPrefix',\r\n    BalancesOf: 'balancesOf',\r\n    TotalBalanceOf: 'totalBalanceOf',\r\n    CheckTokenId: 'checkTokenId'\r\n};\r\n\r\nexport class Oep8TxBuilder {\r\n    contractAddr: Address;\r\n\r\n    constructor(contractAddr: Address) {\r\n        this.contractAddr = contractAddr;\r\n    }\r\n\r\n    makeInitTx(\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Init;\r\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferTx(\r\n        sendAddr: Address,\r\n        recvAddr: Address,\r\n        tokenId: number,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Transfer;\r\n        const params = [\r\n            new Parameter('sender', ParameterType.ByteArray, sendAddr.serialize()),\r\n            new Parameter('recv', ParameterType.ByteArray, recvAddr.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId),\r\n            new Parameter('amount', ParameterType.Long, amount)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferMultiTx(\r\n        states: Oep8State[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const list = [];\r\n        list.push(str2hexstr(FunctionNames.TransferMulti));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.from,\r\n                state.to,\r\n                state.tokenId,\r\n                state.value\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeApproveTx(\r\n        owner: Address,\r\n        spender: Address,\r\n        tokenId: number,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Approve;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\r\n            new Parameter('amount', ParameterType.Long, amount)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeApproveMulti(\r\n        states: Oep8State[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.ApproveMulti;\r\n        const list = [];\r\n        list.push(str2hexstr(func));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.from,\r\n                state.to,\r\n                state.tokenId,\r\n                state.value\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferFromMulti(\r\n        states: TransferFrom[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TransferFromMulti;\r\n        const list = [];\r\n        list.push(str2hexstr(func));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.spender,\r\n                state.from,\r\n                state.to,\r\n                state.tokenId,\r\n                state.value\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferFromTx(\r\n        sender: Address,\r\n        from: Address,\r\n        to: Address,\r\n        tokenId: number,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TransferFrom;\r\n        const params = [\r\n            new Parameter('sender', ParameterType.ByteArray, sender.serialize()),\r\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\r\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\r\n            new Parameter('amount', ParameterType.Long, amount)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Compound tokens\r\n     * @param account User's address\r\n     * @param compoundNum 0 - compound all tokens that can be compounded; 1 - compound 1 token of each type.\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer to pay for gas\r\n     */\r\n    makeCompoundTx(\r\n        account: Address,\r\n        compoundNum: number,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Compound;\r\n        const params = [\r\n            new Parameter('account', ParameterType.ByteArray, account.serialize()),\r\n            new Parameter('compoundNum', ParameterType.Integer, compoundNum)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeQueryAllowanceTx(\r\n        owner: Address,\r\n        spender: Address,\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.Allowance;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryBalanceOfTx(\r\n        addr: Address,\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.BalanceOf;\r\n        const params = [\r\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTotalSupplyTx(\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.TotalSupply;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryNameTx(\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.Name;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryDecimalsTx(): Transaction {\r\n        const func = FunctionNames.Symbol;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n    makeQuerySymbolTx(\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.Symbol;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryBalancesTx(\r\n        account: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.BalancesOf;\r\n        const params = [\r\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTotalBalanceTx(\r\n        account: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TotalBalanceOf;\r\n        const params = [\r\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { Account } from './account';\r\nimport { DEFAULT_SCRYPT } from './consts';\r\nimport { Identity } from './identity';\r\n\r\n/**\r\n * Class to manage Accounts and Identity\r\n */\r\nexport class TWallet {\r\n\r\n    static parseJson(json: string): TWallet {\r\n        return TWallet.parseJsonObj(JSON.parse(json));\r\n    }\r\n\r\n    /**\r\n     * Deserializes JSON object.\r\n     *\r\n     * Object should be real object, not stringified.\r\n     *\r\n     * @param obj JSON object\r\n     */\r\n    static parseJsonObj(obj: any): TWallet {\r\n        const twallet = new TWallet();\r\n        twallet.name = obj.name;\r\n        twallet.defaultTstid = obj.defaultTstid;\r\n        twallet.defaultAccountAddress = obj.defaultAccountAddress;\r\n        twallet.createTime = obj.createTime;\r\n        twallet.version = obj.version;\r\n        twallet.scrypt = obj.scrypt;\r\n        twallet.identities = obj.identities && (obj.identities as any[]).map((i) => Identity.parseJsonObj(i));\r\n        twallet.accounts = obj.accounts && (obj.accounts as any[]).map((a) => Account.parseJsonObj(a));\r\n        twallet.extra = obj.extra;\r\n        return twallet;\r\n    }\r\n\r\n    static fromTWalletFile(obj: any): TWallet {\r\n        const twallet = TWallet.parseJsonObj(obj);\r\n        return twallet;\r\n    }\r\n\r\n    /**\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     * import { TWallet } from 'tesrasdk-ts';\r\n     * const twallet = TWallet.create('test');\r\n     * ```\r\n     *\r\n     * @param name TWallet's name\r\n     */\r\n    static create(name: string): TWallet {\r\n        const twallet = new TWallet();\r\n        twallet.name = name;\r\n\r\n        // createtime\r\n        twallet.createTime = (new Date()).toISOString();\r\n        twallet.version = '1.0';\r\n        twallet.scrypt = {\r\n            n: DEFAULT_SCRYPT.cost,\r\n            r: DEFAULT_SCRYPT.blockSize,\r\n            p: DEFAULT_SCRYPT.parallel,\r\n            dkLen: DEFAULT_SCRYPT.size\r\n        };\r\n\r\n        return twallet;\r\n    }\r\n\r\n    name: string;\r\n    defaultTstid: string = '';\r\n    defaultAccountAddress: string = '';\r\n    createTime: string;\r\n    version: string;\r\n    scrypt: {\r\n        n: number;\r\n        r: number;\r\n        p: number;\r\n        dkLen: number;\r\n    };\r\n    identities: Identity[] = [];\r\n    accounts: Account[] = [];\r\n    extra: null;\r\n\r\n    addAccount(account: Account): void {\r\n        for (const ac of this.accounts) {\r\n            if (ac.address.toBase58() === account.address.toBase58()) {\r\n                return;\r\n            }\r\n        }\r\n        this.accounts.push(account);\r\n    }\r\n\r\n    addIdentity(identity: Identity): void {\r\n        for (const item of this.identities) {\r\n            if (item.tstId === identity.tstId) {\r\n                return;\r\n            }\r\n        }\r\n        this.identities.push(identity);\r\n    }\r\n\r\n    setDefaultAccount(address: string): void {\r\n        this.defaultAccountAddress = address;\r\n    }\r\n\r\n    setDefaultIdentity(tstId: string): void {\r\n        this.defaultTstid = tstId;\r\n    }\r\n\r\n    toJson(): string {\r\n        return JSON.stringify(this.toJsonObj());\r\n    }\r\n\r\n    /**\r\n     * Serializes to JSON object.\r\n     *\r\n     * Returned object will not be stringified.\r\n     *\r\n     */\r\n    toJsonObj(): any {\r\n        const obj = {\r\n            name: this.name,\r\n            defaultTstid: this.defaultTstid,\r\n            defaultAccountAddress: this.defaultAccountAddress,\r\n            createTime: this.createTime,\r\n            version: this.version,\r\n            scrypt: this.scrypt,\r\n            identities: this.identities.map((i) => i.toJsonObj()),\r\n            accounts: this.accounts.map((a) => a.toJsonObj()),\r\n            extra: null\r\n        };\r\n\r\n        return obj;\r\n    }\r\n\r\n    signatureData(): string {\r\n        return '';\r\n    }\r\n\r\n    /*\r\n    *generate a twallet file that is compatible with cli twallet.\r\n    */\r\n    toTWalletFile(): any {\r\n        const obj = this.toJsonObj();\r\n        return obj;\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport * as Long from 'long';\r\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { bigIntToBytes, str2hexstr } from '../../utils';\r\nimport { Parameter, ParameterType } from '../abi/parameter';\r\nimport { Address } from './../../crypto/address';\r\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\r\n\r\nconst functionNames = {\r\n    Init: 'init',\r\n    Transfer: 'transfer',\r\n    TransferMulti: 'transferMulti',\r\n    Approve: 'approve',\r\n    TransferFromm: 'transferFrom',\r\n    Allowance: 'allowance',\r\n    BalanceOf: 'balanceOf',\r\n    TotalSupply: 'totalSupply',\r\n    Symbol: 'symbol',\r\n    Decimals: 'decimals',\r\n    Name: 'name'\r\n};\r\n\r\nexport const formatBigNumParameter = (amount: string): Parameter => {\r\n    // let val = new BigNumber(amount).toString(16);\r\n    // if (val.length % 2 === 1) {\r\n    //     val = '0' + val;\r\n    // }\r\n    // const valHex = reverseHex(val);\r\n    const valHex = bigIntToBytes(Long.fromString(amount));\r\n    const p = new Parameter('value', ParameterType.ByteArray, valHex);\r\n    return p;\r\n};\r\n\r\nexport class Oep4State  {\r\n    from: string;\r\n    to: string;\r\n    amount: string;\r\n\r\n    constructor(from: Address, to: Address, amount: string) {\r\n        this.from = from.serialize();\r\n        this.to = to.serialize();\r\n        this.amount = formatBigNumParameter(amount).value;\r\n    }\r\n}\r\n/**\r\n * Transaction builder for oep-4 contracts\r\n */\r\nexport class Oep4TxBuilder {\r\n\r\n    contractAddr: Address;\r\n\r\n    constructor(contractAddr: Address) {\r\n        this.contractAddr = contractAddr;\r\n    }\r\n\r\n    /**\r\n     * Init the oep-4 smart contract\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer's address to pay for gas\r\n     */\r\n    init(gasPrice: string, gasLimit: string, payer?: Address): Transaction {\r\n        const funcName = functionNames.Init;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Make transaction for transfer\r\n     * @param from Sender's address\r\n     * @param to Receiver's address\r\n     * @param amount Amountof asset to transfer\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer's address to pay for gas\r\n     */\r\n    makeTransferTx(\r\n        from: Address,\r\n        to: Address,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.Transfer;\r\n        const p1 = new Parameter('from', ParameterType.ByteArray, from.serialize());\r\n        const p2 = new Parameter('to', ParameterType.ByteArray, to.serialize());\r\n        const p3 = formatBigNumParameter(amount);\r\n        return makeInvokeTransaction(funcName, [p1, p2, p3], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Make transaction for multi transfer.\r\n     * The transaction needs signatures of each sender in states and the signature of the payer.\r\n     * @param states Array of State(sender, receiver, amount)\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer to pay for gas\r\n     */\r\n    makeTransferMultiTx(\r\n        states: Oep4State[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const list = [];\r\n        list.push(str2hexstr(functionNames.TransferMulti));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.from,\r\n                state.to,\r\n                state.amount\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Make transaction for approve\r\n     * @param owner Owner's address\r\n     * @param spender Spender's address\r\n     * @param amount Amount\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer to pay for gas\r\n     */\r\n    makeApproveTx(\r\n        owner: Address,\r\n        spender: Address,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.Approve;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\r\n            formatBigNumParameter(amount)\r\n        ];\r\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferFromTx(\r\n        sender: Address,\r\n        from: Address,\r\n        to: Address,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.TransferFromm;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, sender.serialize()),\r\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\r\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\r\n            formatBigNumParameter(amount)\r\n        ];\r\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeQueryAllowanceTx(\r\n        owner: Address,\r\n        spender: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.Allowance;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize())\r\n        ];\r\n        return makeInvokeTransaction(funcName, params, this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the balance\r\n     * @param address Address to query balance\r\n     */\r\n    queryBalanceOf(address: Address): Transaction {\r\n        const funcName = functionNames.BalanceOf;\r\n        const p1 = new Parameter('from', ParameterType.ByteArray, address.serialize());\r\n\r\n        return makeInvokeTransaction(funcName, [p1], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    queryTotalSupply(): Transaction {\r\n        const funcName = functionNames.TotalSupply;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    queryDecimals(): Transaction {\r\n        const funcName = functionNames.Decimals;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    querySymbol(): Transaction {\r\n        const funcName = functionNames.Symbol;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    queryName(): Transaction {\r\n        const funcName = functionNames.Name;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/*\r\n********************************* Notice ********************************************\r\n*************************************************************************************\r\n* All the methods in this file is only for our native app development!!!\r\n* We do not recommend you to use these methods directly.\r\n* You can refer to these methods or the test cases to implement the same methods.\r\n*************************************************************************************\r\n*************************************************************************************\r\n*/\r\nimport axios from 'axios';\r\nimport * as bip39 from 'bip39';\r\nimport { Account } from '../account';\r\nimport { Claim } from '../claim/claim';\r\nimport { HTTP_REST_PORT, HTTP_WS_PORT, REST_API, TEST_NODE, TST_BIP44_PATH } from '../consts';\r\nimport { Address, PgpSignature, PrivateKey, PublicKey } from '../crypto';\r\nimport { ERROR_CODE } from '../error';\r\nimport { Identity } from '../identity';\r\nimport { NeoRpc } from '../neocore/NeoRpc';\r\nimport { Program } from '../neocore/Program';\r\nimport { SmartContract } from '../neocore/SmartContract';\r\nimport RestClient from '../network/rest/restClient';\r\nimport { WebsocketClient } from '../network/websocket/websocketClient';\r\nimport * as scrypt from '../scrypt';\r\nimport { ScryptParams } from '../scrypt';\r\nimport AbiInfo from '../smartcontract/abi/abiInfo';\r\nimport { Parameter } from '../smartcontract/abi/parameter';\r\nimport { makeTransferTx, makeWithdrawTsgTx, TST_CONTRACT } from '../smartcontract/nativevm/tstAssetTxBuilder';\r\nimport { buildAddAttributeTx, buildGetDDOTx, buildRegisterTstidTx\r\n} from '../smartcontract/nativevm/tstidContractTxBuilder';\r\nimport { Oep8TxBuilder } from '../smartcontract/neovm/oep8TxBuilder';\r\nimport { DDOAttribute } from '../transaction/ddo';\r\nimport { Transaction } from '../transaction/transaction';\r\nimport {\r\n    buildRestfulParam,\r\n    sendRawTxRestfulUrl,\r\n    signTransaction,\r\n    signTx\r\n} from '../transaction/transactionBuilder';\r\nimport { TWallet } from '../twallet';\r\nimport { generateMnemonic, hexstr2str, isBase64, isHexString, now, reverseHex,\r\n    sendBackResult2Native, str2hexstr, StringReader } from '../utils';\r\nimport { Ecies } from './../crypto/Ecies';\r\nimport { ParameterType } from './../smartcontract/abi/parameter';\r\nimport { Oep4TxBuilder } from './../smartcontract/neovm/oep4TxBuilder';\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst HDKey = require('./../hdkey-secp256r1/hdkey.js');\r\n\r\n// tslint:disable:no-unused-expression\r\n// tslint:disable:no-shadowed-variable\r\n\r\n// neo contract\r\nconst CONTRACT_HASH = 'ceab719b8baa2310f232ee0d277c061704541cfb';\r\n// neo node\r\nconst NEO_NODE = 'http://121.41.17.61:3000';\r\n// neo abi\r\n// tslint:disable-next-line:max-line-length\r\nconst NEP5_ABI = '{\"hash\":\"0x5bb169f915c916a5e30a3c13a5e0cd228ea26826\",\"entrypoint\":\"Main\",\"functions\":[{\"name\":\"Name\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Symbol\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Decimals\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Main\",\"parameters\":[{\"name\":\"operation\",\"type\":\"String\"},{\"name\":\"args\",\"type\":\"Array\"}],\"returntype\":\"Any\"},{\"name\":\"Init\",\"parameters\":[],\"returntype\":\"Boolean\"},{\"name\":\"TotalSupply\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Transfer\",\"parameters\":[{\"name\":\"from\",\"type\":\"ByteArray\"},{\"name\":\"to\",\"type\":\"ByteArray\"},{\"name\":\"value\",\"type\":\"Integer\"}],\"returntype\":\"Boolean\"},{\"name\":\"BalanceOf\",\"parameters\":[{\"name\":\"address\",\"type\":\"ByteArray\"}],\"returntype\":\"Integer\"}],\"events\":[{\"name\":\"transfer\",\"parameters\":[{\"name\":\"arg1\",\"type\":\"ByteArray\"},{\"name\":\"arg2\",\"type\":\"ByteArray\"},{\"name\":\"arg3\",\"type\":\"Integer\"}],\"returntype\":\"Void\"}]}';\r\n// neo swap address\r\n// const RECEIVER_ADDR = 'AFmseVrdL9f9oyCzZefL9tG6UbvhPbdYzM';\r\n\r\nconst NEO_TRAN = 100000000;\r\n\r\nexport class SDK {\r\n    static SERVER_NODE: string = TEST_NODE;\r\n    static REST_PORT: string = HTTP_REST_PORT;\r\n    static SOCKET_PORT: string = HTTP_WS_PORT;\r\n    static restClient: RestClient = new RestClient();\r\n    static socketClient: WebsocketClient = new WebsocketClient();\r\n\r\n    static setServerNode(node: string) {\r\n        if (node) {\r\n            let url = '';\r\n            if (node.indexOf('http') > -1) {\r\n                url = node.substr('http://'.length);\r\n            } else {\r\n                url = node;\r\n            }\r\n            SDK.SERVER_NODE = url;\r\n            return;\r\n        }\r\n\r\n        throw new Error('Can not set ' + node + 'as server node');\r\n    }\r\n\r\n    static setRestPort(port: string) {\r\n        if (port) {\r\n            SDK.REST_PORT = port;\r\n            SDK.restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n            return;\r\n        }\r\n\r\n        throw new Error('Can not set ' + port + ' as restful port');\r\n    }\r\n\r\n    static setSocketPort(port: string) {\r\n        if (port) {\r\n            SDK.SOCKET_PORT = port;\r\n            SDK.socketClient = new WebsocketClient(`ws://${SDK.SERVER_NODE}:${SDK.SOCKET_PORT}`);\r\n            return;\r\n        }\r\n        throw new Error('Can not set ' + port + 'as socket port');\r\n    }\r\n\r\n    static getDecryptError(err: any) {\r\n        return {\r\n            error: ERROR_CODE.Decrypto_ERROR,\r\n            result: ''\r\n        };\r\n    }\r\n\r\n    static transformPassword(password: string) {\r\n        if (isBase64(password)) {\r\n            return Buffer.from(password, 'base64').toString();\r\n        }\r\n        return password;\r\n    }\r\n\r\n    static createTWallet(\r\n        name: string, password: string, payer: string, gasPrice: string, gasLimit: string, callback?: string\r\n        ) {\r\n        const twallet = TWallet.create(name);\r\n        password = this.transformPassword(password);\r\n        const privateKey = PrivateKey.random();\r\n        const identity = Identity.create(privateKey, password, name);\r\n\r\n        twallet.defaultTstid = identity.tstId;\r\n        twallet.addIdentity(identity);\r\n\r\n        // let account = new Account()\r\n        // account.create(privateKey, password, name)\r\n        // twallet.addAccount(account)\r\n\r\n        const twalletDataStr = twallet.toJson();\r\n        let obj: any = {\r\n            error: 0,\r\n            result: twalletDataStr,\r\n            tx : ''\r\n        };\r\n\r\n        const publicKey = privateKey.getPublicKey();\r\n        const tx = buildRegisterTstidTx(identity.tstId, publicKey, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        // add preExec\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            // preExec success, send real request\r\n            if (res.Result.Result === '01') {\r\n                // restClient.sendRawTransaction(tx.serialize(), false)\r\n                obj.tx = tx.serialize();\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            } else {\r\n                const errResult = {\r\n                    error: ERROR_CODE.PreExec_ERROR,\r\n                    result: ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\r\n                }\r\n                return errResult;\r\n            }\r\n        }).catch((err: any) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static importIdentityWithPrivateKey(\r\n        label: string = '',\r\n        privateKey: string,\r\n        password: string,\r\n        callback?: string\r\n    ) {\r\n        privateKey = privateKey.trim();\r\n        password = this.transformPassword(password);\r\n        if (!privateKey || privateKey.length !== 64 || !isHexString(privateKey)) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        let obj: any;\r\n        const pri = new PrivateKey(privateKey);\r\n        const identity = Identity.create(pri, password, label);\r\n        obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: identity.toJson()\r\n        };\r\n        const tx = buildGetDDOTx(identity.tstId);\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = res.Result;\r\n            if (result.Result) {\r\n                //\r\n            } else {\r\n                obj.error = ERROR_CODE.UNKNOWN_TSTID;\r\n                obj.result = '';\r\n            }\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static importIdentityWithWif(\r\n        label: string = '',\r\n        wif: string,\r\n        password: string,\r\n        callback?: string\r\n    ) {\r\n        wif = wif.trim();\r\n        password = this.transformPassword(password);\r\n        let obj: any;\r\n        let pri: PrivateKey;\r\n        try {\r\n            pri = PrivateKey.deserializeWIF(wif);\r\n        } catch (err) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const identity = Identity.create(pri, password, label);\r\n        obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: identity.toJson()\r\n        };\r\n        const tx = buildGetDDOTx(identity.tstId);\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = res.Result;\r\n            if (result.Result) {\r\n                //\r\n            } else {\r\n                obj.error = ERROR_CODE.UNKNOWN_TSTID;\r\n                obj.result = '';\r\n            }\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static importIdentityWithWifOffChain(\r\n        label: string = '',\r\n        wif: string,\r\n        password: string,\r\n        callback?: string\r\n    ) {\r\n        wif = wif.trim();\r\n        password = this.transformPassword(password);\r\n        let obj: any;\r\n        let pri: PrivateKey;\r\n        try {\r\n            pri = PrivateKey.deserializeWIF(wif);\r\n        } catch (err) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const identity = Identity.create(pri, password, label);\r\n        obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: identity.toJson()\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    static importIdentityWithTWallet(\r\n        label: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ) {\r\n        let obj: any;\r\n        let identity = new Identity();\r\n        try {\r\n            // TODO check tstId\r\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n            const addr = new Address(address);\r\n            password = this.transformPassword(password);\r\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\r\n        } catch (err) {\r\n            obj  = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }\r\n        obj = {\r\n            error : ERROR_CODE.SUCCESS,\r\n            result : identity.toJson()\r\n        };\r\n        // check tstId on chain\r\n        const tx = buildGetDDOTx(identity.tstId);\r\n        const param = buildRestfulParam(tx);\r\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\r\n        const url = sendRawTxRestfulUrl(restUrl, true);\r\n        // clear privateKey and password\r\n        password = '';\r\n        return axios.post(url, param).then((res: any) => {\r\n            const result = res.data.Result;\r\n            if (result.Result) {\r\n                //\r\n            } else {\r\n                obj.error = ERROR_CODE.UNKNOWN_TSTID;\r\n                obj.result = '';\r\n            }\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result : ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    // send http post to check\r\n    static importIdentityAndCreateTWallet(\r\n        label: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ) {\r\n        let identity = new Identity();\r\n        let error = {};\r\n        let obj: any;\r\n        try {\r\n            password = this.transformPassword(password);\r\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n            const addr = new Address(address);\r\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\r\n            const twallet = TWallet.create(identity.label);\r\n            twallet.defaultTstid = identity.tstId;\r\n            twallet.addIdentity(identity);\r\n            const twalletStr = twallet.toJson();\r\n            obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: twalletStr\r\n            };\r\n            // check tstId on chain\r\n            const tx = buildGetDDOTx(identity.tstId);\r\n            const param = buildRestfulParam(tx);\r\n            const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\r\n            const url = sendRawTxRestfulUrl(restUrl, true);\r\n            return axios.post(url, param).then((res: any) => {\r\n                const result = res.data.Result;\r\n                if (result.Result) {\r\n                    //\r\n                } else {\r\n                    obj.error = ERROR_CODE.UNKNOWN_TSTID;\r\n                    obj.result = '';\r\n                }\r\n                // clear privateKey and password\r\n                password = '';\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            }).catch((err) => {\r\n                obj = {\r\n                    error: ERROR_CODE.NETWORK_ERROR,\r\n                    result : ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n            });\r\n            // callback && sendBackResult2Native(JSON.stringify(obj), callback)\r\n            // return obj\r\n        } catch (err) {\r\n            error = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(error), callback);\r\n            }\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n\r\n    static createIdentity(label: string, password: string, payer: string,\r\n                          gasPrice: string, gasLimit: string, callback?: string) {\r\n        const privateKey = PrivateKey.random();\r\n        password = this.transformPassword(password);\r\n        const identity = Identity.create(privateKey, password, label);\r\n        const result = identity.toJson();\r\n        let obj: any = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result,\r\n            tx : ''\r\n        };\r\n        // register tstId\r\n        const publicKey = privateKey.getPublicKey();\r\n        const tx = buildRegisterTstidTx(identity.tstId, publicKey, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        password = '';\r\n        privateKey.key = '';\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            // preExec success, send real request\r\n            if (res.Result.Result === '01') {\r\n                // restClient.sendRawTransaction(tx.serialize(), false)\r\n                obj.tx = tx.serialize();\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                // clear privateKey and password\r\n                privateKey.key = '';\r\n                password = '';\r\n                return obj;\r\n            } else {\r\n                const errResult = {\r\n                    error: ERROR_CODE.PreExec_ERROR,\r\n                    result: ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\r\n                }\r\n                return errResult;\r\n            }\r\n        }).catch((err: any) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static createAccount(label: string, password: string, callback?: string) {\r\n        // generate mnemnic\r\n        let mnemonic = generateMnemonic();\r\n        password = this.transformPassword(password);\r\n        const mnemonicHex = str2hexstr(mnemonic);\r\n        const privateKey = PrivateKey.generateFromMnemonic(mnemonic);\r\n        const account = Account.create(privateKey, password, label);\r\n        const addr = account.address;\r\n        const salt = Buffer.from(account.salt, 'base64').toString('hex');\r\n        const mnemonicEnc = scrypt.encryptWithGcm(mnemonicHex, addr, salt, password);\r\n        const result = account.toJson();\r\n        const obj = {\r\n            error : ERROR_CODE.SUCCESS,\r\n            result,\r\n            mnemonicEnc\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        mnemonic = '';\r\n        return obj;\r\n    }\r\n\r\n    static decryptMnemonicEnc(mnemonicEnc: string,\r\n                              address: string, salt: string, password: string, callback?: string) {\r\n        let obj;\r\n        password = this.transformPassword(password);\r\n        const addr = new Address(address);\r\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n        const decMneHex = scrypt.decryptWithGcm(mnemonicEnc, addr, saltHex, password);\r\n        const decMne = hexstr2str(decMneHex);\r\n        obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: decMne\r\n        };\r\n        // tslint:disable-next-line:no-unused-expression\r\n        callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n        return obj;\r\n    }\r\n\r\n    static importAccountWithTWallet(\r\n        label: string,\r\n        encryptedPrivateKey: string,\r\n        address: string,\r\n        salt: string,\r\n        password: string,\r\n        callback?: string\r\n    ) {\r\n        let account = new Account();\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(address);\r\n            account = Account.importAccount(label, encryptedPrivateKeyObj, password, addr, salt);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: account.toJson()\r\n        };\r\n        // add address check\r\n        if (address !== account.address.toBase58()) {\r\n            obj.error = ERROR_CODE.INVALID_ADDR,\r\n            obj.result = '';\r\n        }\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        password = '';\r\n        return obj;\r\n    }\r\n\r\n    static signSelfClaim(\r\n        context: string,\r\n        claimData: string,\r\n        tstId: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    )  {\r\n        let privateKey: PrivateKey;\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.sendRawTx}`;\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // const claimDataObj = JSON.parse(claimData);\r\n        const metadata = {\r\n            issuer: tstId,\r\n            subject: tstId,\r\n            issuedAt: now()\r\n        };\r\n\r\n        // todo: pass real public key id\r\n        const publicKeyId = tstId + '#keys-1';\r\n        const claim = new Claim(metadata, undefined, undefined);\r\n        claim.sign(restUrl, publicKeyId, privateKey);\r\n        const obj = {\r\n            error : 0,\r\n            result : claim\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return obj;\r\n    }\r\n\r\n    static decryptEncryptedPrivateKey(\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ) {\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        let pri;\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            pri = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const obj = {\r\n            error : 0,\r\n            result : pri.key\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        password = '';\r\n        return obj;\r\n    }\r\n\r\n    static getClaim(\r\n        claimId: string,\r\n        context: string,\r\n        issuer: string,\r\n        subject: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        payer: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        callback ?: string\r\n    ) {\r\n        let privateKey: PrivateKey;\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n\r\n            return result;\r\n        }\r\n        const path = 'claim' + claimId;\r\n        const valueObj = {\r\n            Type : 'JSON',\r\n            Value : {\r\n                Context: context,\r\n                Issuer: issuer\r\n            }\r\n        };\r\n        // const type = 'JSON';\r\n        const value = JSON.stringify(valueObj);\r\n        const attr = new DDOAttribute();\r\n        attr.key = path;\r\n        attr.type = 'JSON';\r\n        attr.value = value;\r\n        const publicKey = privateKey.getPublicKey();\r\n        const tx = buildAddAttributeTx(subject, [attr], publicKey, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            if (res.Result.Result === '01') {\r\n                // user agent will do this\r\n                // restClient.sendRawTransaction(tx.serialize(), false)\r\n                // const hash = sha256(sha256(tx.serializeUnsignedData()))\r\n                const obj = {\r\n                    error: ERROR_CODE.SUCCESS,\r\n                    result: '',\r\n                    tx: tx.serialize()\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                // clear privateKey and password\r\n                privateKey.key = '';\r\n                password = '';\r\n                return obj;\r\n            } else {\r\n                const obj = {\r\n                    error: ERROR_CODE.PreExec_ERROR,\r\n                    result: ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            }\r\n        }\r\n        ).catch((err: any) => {\r\n            const obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static signData(\r\n        content: string, // hex string\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ): PgpSignature | object {\r\n        let privateKey: PrivateKey;\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        let result;\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const signature = privateKey.sign(content);\r\n        result = signature.serializePgp();\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static getBalance(address: string, callback?: string) {\r\n        const addressObj = new Address(address);\r\n        const request = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.getBalance}/${addressObj.toBase58()}`;\r\n        return axios.get(request).then((res: any) => {\r\n            if (res.data.Error === 0) {\r\n                const result = res.data.Result;\r\n                const obj = {\r\n                    error : 0,\r\n                    result\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            } else {\r\n                const obj = {\r\n                    error: res.data.Error,\r\n                    result : ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            }\r\n        }).catch( (err: any) => {\r\n            const obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return Promise.reject(obj);\r\n        });\r\n    }\r\n\r\n    // pls check balance before transfer\r\n    static transferAssets(\r\n        token: string,\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback?: string) {\r\n\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n        } catch (err) {\r\n            const result = {\r\n                error : ERROR_CODE.INVALID_PARAMS,\r\n                result : ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(from);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        const tx = makeTransferTx(token, fromAddress, toAddress, value, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static claimTsg(\r\n        address: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback?: string\r\n    ) {\r\n        let addressObj: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            addressObj = new Address(address);\r\n\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addressObj, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        const tx = makeWithdrawTsgTx(addressObj, addressObj, value, new Address(payer), gasPrice, gasLimit);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static exportIdentityToQrcode(identityDataStr: string, callback?: string) {\r\n        const obj = Identity.parseJson(identityDataStr);\r\n        let salt = obj.controls[0].salt;\r\n        if (!isBase64(salt)) {\r\n            salt = Buffer.from(salt, 'hex').toString('base64');\r\n        }\r\n        const result = {\r\n            type : 'I',\r\n            label : obj.label,\r\n            algorithm : 'ECDSA',\r\n            scrypt : {\r\n                n : 4096,\r\n                p : 8,\r\n                r : 8,\r\n                dkLen : 64\r\n            },\r\n            key : obj.controls[0].encryptedKey.key,\r\n            salt,\r\n            address: obj.controls[0].address.toBase58(),\r\n            parameters : {\r\n                curve : 'secp256r1'\r\n            }\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static exportIdentityToKeystring(identityDataStr: string, callback?: string) {\r\n        const obj = Identity.parseJson(identityDataStr);\r\n        const address = obj.controls[0].address.toBase58();\r\n        const salt = obj.controls[0].salt;\r\n        const key = obj.controls[0].encryptedKey.key;\r\n        const result = salt + address + key;\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static exportAccountToQrcode(accountDataStr: string, callback?: string) {\r\n        const obj = Account.parseJson(accountDataStr);\r\n        const result = {\r\n            type: 'A',\r\n            label: obj.label,\r\n            algorithm: 'ECDSA',\r\n            scrypt: {\r\n                n: 4096,\r\n                p: 8,\r\n                r: 8,\r\n                dkLen: 64\r\n            },\r\n            key: obj.encryptedKey.key,\r\n            salt: obj.salt,\r\n            address: obj.address.toBase58(),\r\n            parameters: {\r\n                curve: 'secp256r1'\r\n            }\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static exportAccountToKeystring(accountDataStr: string, callback?: string) {\r\n        const obj = Account.parseJson(accountDataStr);\r\n        const salt = obj.salt;\r\n        const address = obj.address.toBase58();\r\n        const key = obj.encryptedKey.key;\r\n        const result = salt + address + key;\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static importAccountMnemonic(label: string, mnemonic: string, password: string, callback?: string) {\r\n        mnemonic = mnemonic.trim();\r\n        password = this.transformPassword(password);\r\n        if (!bip39.validateMnemonic(mnemonic)) {\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            // tslint:disable-next-line:no-unused-expression\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\r\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\r\n        const pri = hdkey.derive(TST_BIP44_PATH);\r\n        const key = Buffer.from(pri.privateKey).toString('hex');\r\n        const privateKey = new PrivateKey(key);\r\n        const account = Account.create(privateKey, password, label);\r\n        const result = account.toJson();\r\n        const obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        mnemonic = '';\r\n        return obj;\r\n    }\r\n\r\n    static exportWifPrivakeKey(encryptedKey: string, password: string,\r\n                               address: string, salt: string, callback?: string) {\r\n        if (address.length !== 34 && address.length !== 40) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        password = this.transformPassword(password);\r\n        const encrypt = new PrivateKey(encryptedKey);\r\n        const addr = new Address(address);\r\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n        const privateKey = encrypt.decrypt(password, addr, saltHex);\r\n        let wif = privateKey.serializeWIF();\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: {\r\n                wif,\r\n                privateKey: privateKey.key\r\n            }\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        wif = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static importAccountWithWif(label: string, wif: string, password: string, callback?: string) {\r\n        let privateKey;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            privateKey = PrivateKey.deserializeWIF(wif);\r\n        } catch (err) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const account = Account.create(privateKey, password, label);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: account.toJson()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static importAccountWithPrivateKey(label: string, privateKey: string, password: string, callback?: string) {\r\n        privateKey = privateKey.trim();\r\n        password = this.transformPassword(password);\r\n        if (!privateKey || privateKey.length !== 64 || !isHexString(privateKey)) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const pri = new PrivateKey(privateKey);\r\n        const account = Account.create(pri, password, label);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: account.toJson()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Actually import with Qrcode\r\n     */\r\n    static importAccountWithKeystore(keystore: string, password: string, callback?: string) {\r\n        let keyStoreObj;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            keyStoreObj = JSON.parse(keystore);\r\n        } catch (err) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        if (keyStoreObj.type !== 'A') {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        } else {\r\n            let account = new Account();\r\n            const encryptedPrivateKeyObj = new PrivateKey(keyStoreObj.key);\r\n            try {\r\n                const params = {\r\n                    cost: keyStoreObj.scrypt.n || 4096,\r\n                    blockSize: keyStoreObj.scrypt.p || 8,\r\n                    parallel: keyStoreObj.scrypt.r || 8,\r\n                    size: keyStoreObj.scrypt.dkLen || 64\r\n                };\r\n                const addr = new Address(keyStoreObj.address);\r\n                account = Account.importAccount(\r\n                    keyStoreObj.label, encryptedPrivateKeyObj, password, addr, keyStoreObj.salt, params);\r\n                const obj = {\r\n                    error: ERROR_CODE.SUCCESS,\r\n                    result: account.toJson()\r\n                };\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                // clear privateKey and password\r\n                password = '';\r\n                return obj;\r\n            } catch (err) {\r\n                const result = this.getDecryptError(err);\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(result), callback);\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    static getUnclaimedTsg(address: string, callback?: string) {\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.getAllowance('tsg', new Address(TST_CONTRACT), new Address(address)).then((res) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res.Result\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static querySmartCodeEventByTxhash(txHash: string, callback?: string) {\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.getSmartCodeEvent(txHash).then((res) => {\r\n            const obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static createSharedTWallet(requiredSignatureNum: string, allRelatedPks: string, callback?: string) {\r\n        const M  = parseInt(requiredSignatureNum, 10);\r\n        let pks = [];\r\n        let pubs = [];\r\n        let error = ERROR_CODE.SUCCESS;\r\n        try {\r\n            pks = JSON.parse(allRelatedPks);\r\n            pubs = pks.map((p: string) => PublicKey.deserializeHex(new StringReader(p)));\r\n        } catch (err) {\r\n            error = ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        if (M < 2 || pks.length < M || pks.length > 12) {\r\n            error = ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        let address = '';\r\n        try {\r\n            address = Address.fromMultiPubKeys(M, pubs).toBase58();\r\n        } catch (err) {\r\n            error = ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        if (callback) {\r\n            const result = {\r\n                error,\r\n                result: address\r\n            };\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return address;\r\n    }\r\n\r\n    static adderssFromPublicKey(publicKey: string, callback?: string) {\r\n        const pk = PublicKey.deserializeHex(new StringReader(publicKey));\r\n        const address = Address.fromPubKey(pk).toBase58();\r\n        const result = {\r\n            error : ERROR_CODE.SUCCESS,\r\n            result: address\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return address;\r\n    }\r\n\r\n    static makeMultiSignTransaction(asset: string, from: string, to: string, amount: string, gasPrice: string,\r\n                                    gasLimit: string, callback?: string) {\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const tx = makeTransferTx(asset, fromAddress, toAddress, amount, gasPrice, gasLimit);\r\n        tx.payer = fromAddress;\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            txHash: reverseHex(tx.getSignContent()),\r\n            txData: tx.serialize()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        return result;\r\n    }\r\n\r\n    static signMultiAddrTransaction(\r\n        encryptedPrivateKey: string,\r\n        address: string,\r\n        salt: string,\r\n        password: string,\r\n        allRelatedPks: string,\r\n        requiredSignatureNum: string,\r\n        txDada: string,\r\n        callback?: string) {\r\n        password = this.transformPassword(password);\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const M = parseInt(requiredSignatureNum, 10);\r\n        const tx = Transaction.deserialize(txDada);\r\n        const pubs = JSON.parse(allRelatedPks);\r\n        const pks = pubs.map((p: string) => new PublicKey(p));\r\n        signTx(tx, M, pks, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            signedHash: tx.serialize()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        return tx;\r\n    }\r\n\r\n    /**\r\n     * Neo transfer\r\n     */\r\n    static neoTransfer(\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        callback?: string,\r\n        params ?: ScryptParams\r\n    ) {\r\n        password = this.transformPassword(password);\r\n        const recv = new Address(to);\r\n        const addr = new Address(from);\r\n        const abiInfo = AbiInfo.parseJson(NEP5_ABI);\r\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\r\n        const amount = parseInt(value, 10);\r\n        const func = abiInfo.getFunction('Transfer');\r\n        func.name = func.name.toLowerCase();\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex, params);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const p1 = new Parameter('from', ParameterType.ByteArray, addr.serialize());\r\n        const p2 = new Parameter('to', ParameterType.ByteArray, recv.serialize());\r\n        const p3 = new Parameter('value', ParameterType.Integer, amount * NEO_TRAN);\r\n        func.setParamsValue(p1, p2, p3);\r\n        const tx = SmartContract.makeInvokeTransaction(contractAddr, addr, func);\r\n        const p = new Program();\r\n        p.parameter = Program.programFromParams([tx.sign(privateKey)]);\r\n        p.code = Program.programFromPubKey(privateKey.getPublicKey());\r\n        tx.scripts = [p];\r\n\r\n        return NeoRpc.sendRawTransaction(NEO_NODE, tx.serialize()).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: ''\r\n            };\r\n            if (res.result) {\r\n                result.result = reverseHex(tx.getHash());\r\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            } else {\r\n                result.error = ERROR_CODE.NETWORK_ERROR;\r\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static getNeoBalance(address: string, callback?: string) {\r\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\r\n        const addr = new Address(address);\r\n        return NeoRpc.getBalance(NEO_NODE, contractAddr, addr).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.result) {\r\n                const balance = parseInt(reverseHex(res.result), 16);\r\n                result.result = balance;\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static sendTransaction(txData: string, callback?: string) {\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(txData).then((res) => {\r\n            const obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static sendTransactionWithWebsocket(txData: string, callback?: string) {\r\n        const socketClient = new WebsocketClient(`ws://${SDK.SERVER_NODE}:${SDK.SOCKET_PORT}`);\r\n        return socketClient.sendRawTransaction(txData, false, true).then((res) => {\r\n            const obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    // ope8 apis for TSTO\r\n    static queryOep8Balance(\r\n        contractHash: string,\r\n        account: string,\r\n        tokenId: number,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep8.makeQueryBalanceOfTx(addr, tokenId);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.Result.Result) {\r\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static queryOep8Balances(\r\n        contractHash: string,\r\n        account: string,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep8.makeQueryBalancesTx(addr);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: [0, 0, 0, 0, 0, 0, 0, 0]\r\n            };\r\n            if (res.Result.Result) {\r\n                const vals = res.Result.Result.map((v: string) => v ? parseInt(reverseHex(v), 16) : 0);\r\n                result.result = vals;\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static queryOep8TotalBalance(\r\n        contractHash: string,\r\n        account: string,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep8.makeQueryTotalBalanceTx(addr);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.Result.Result) {\r\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static transferOep8(\r\n        contractHash: string,\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        tokenId: number,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback?: string\r\n    ) {\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        let payerAddress: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n            payerAddress = new Address(payer);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(from);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            return result;\r\n        }\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const tx = oep8.makeTransferTx(fromAddress, toAddress, tokenId, value, gasPrice, gasLimit, payerAddress);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static compoundOep8(\r\n        contractHash: string,\r\n        account: string,\r\n        compoundNum: number,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback: string\r\n    ) {\r\n        let addr: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            addr = new Address(account);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            return result;\r\n        }\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const tx = oep8.makeCompoundTx(addr, compoundNum, gasPrice, gasLimit, addr);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    // ope4 apis for TSTO\r\n    static queryOep4Balance(\r\n        contractHash: string,\r\n        account: string,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep4 = new Oep4TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep4.queryBalanceOf(addr);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.Result.Result) {\r\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static transferOep4(\r\n        contractHash: string,\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        callback?: string\r\n    ) {\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(from);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            return result;\r\n        }\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep4 = new Oep4TxBuilder(contractAddr);\r\n        const tx = oep4.makeTransferTx(fromAddress, toAddress, value, gasPrice, gasLimit, fromAddress);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static eciesDecrypt(\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        cipher: string,\r\n        callback?: string\r\n    ) {\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        let pri;\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            pri = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const ins = new Ecies();\r\n        const cipherContent = cipher.split('.');\r\n        ins.setKeyPair(pri.key);\r\n        const plainBuffer = ins.dec(\r\n            cipherContent[0],\r\n            cipherContent[1],\r\n            cipherContent[2],\r\n            32\r\n        );\r\n\r\n        const plain = plainBuffer.toString('utf8');\r\n        const obj = {\r\n            error: 0,\r\n            result: plain\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport BigInt from '../../common/bigInt';\r\nimport { GENESIS_BLOCK_TIMESTAMP } from '../../consts';\r\nimport { Address } from '../../crypto';\r\nimport { ERROR_CODE } from '../../error';\r\nimport RestClient from '../../network/rest/restClient';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { makeNativeContractTx } from '../../transaction/transactionUtils';\r\nimport { bigIntFromBytes, calcUnboundTsg, hex2VarBytes, hexstr2str,\r\n    num2hexstring, str2hexstr, str2VarBytes, StringReader, varifyPositiveInt } from '../../utils';\r\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\r\nimport Struct from '../abi/struct';\r\n\r\nconst GOVERNANCE_CONTRACT = '0000000000000000000000000000000000000007';\r\nconst PEER_ATTRIBUTES = 'peerAttributes';\r\nconst SPLIT_FEE_ADDRESS = 'splitFeeAddress';\r\nconst AUTHORIZE_INFO_POOL = 'voteInfoPool';\r\nconst GLOBAL_PARAM = 'globalParam';\r\nconst TOTAL_STAKE = 'totalStake';\r\nconst VBFT_CONFIG = 'vbftConfig';\r\nconst contractAddress = new Address(GOVERNANCE_CONTRACT);\r\n\r\n/* TODO: Test */\r\n\r\n// tslint:disable:no-console\r\n\r\n/**\r\n * Register to be candidate node.\r\n * This tx needs signatures from userAddr and payer if these two address are not the same.\r\n * @param tstId user's TST ID, must be assigned with the role.\r\n * @param peerPubKey public key of user's peer\r\n * @param userAddr user's address to pledge TST&TSG. This address must have enough TST & TSG.\r\n * @param keyNo user's pk id\r\n * @param initPos Initial state\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeRegisterCandidateTx(\r\n    tstId: string,\r\n    peerPubKey: string,\r\n    keyNo: number,\r\n    userAddr: Address,\r\n    initPos: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    if (typeof initPos !== 'number') {\r\n        throw new Error('Parameter initPos must be number!');\r\n    }\r\n    varifyPositiveInt(initPos);\r\n    if (tstId.substr(0, 3) === 'did') {\r\n        tstId = str2hexstr(tstId);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), initPos, tstId, keyNo);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('registerCandidate', params, contractAddress,\r\n                                     gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n *\r\n * @param userAddr User's address to pledge TST&TSG.\r\n * @param peerPubKey Public key of user's peer\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeUnregisterCandidateTx(\r\n    userAddr: Address,\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('unRegisterCandidate', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Creates transaction to approve candidate\r\n * @param peerPubKey Public key of user's peer\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeApproveCandidateTx(\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey));\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('approveCandidate', params, contractAddress,\r\n                                     gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Creates transaction to reject candidate\r\n * @param peerPubKey Public key of user's peer\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeRejectCandidateTx(\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey));\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('rejectCandidate', params, contractAddress,\r\n        gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Creates transaction to vote for some peers.\r\n * Can only vote for peers that with status 1 or 2\r\n * This tx needs signatures from userAddr and payer if these two address are not the same.\r\n * @param userAddr User's address\r\n * @param peerPubKeys Public keys of peers that to be voted\r\n * @param posList Array of token that to vote\r\n * @param payer Address to pay for transaction's gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeVoteForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeys: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    if (peerPubKeys.length !== posList.length) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeys.length);\r\n    for (const p of peerPubKeys) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const n of posList) {\r\n        struct.add(n);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('voteForPeer', params, contractAddress,\r\n       gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * User unvotes peer nodes\r\n * @param userAddr user's address\r\n * @param peerPubKeys peer's pks\r\n * @param posList amount of TST to unvote\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeUnvoteForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeys: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    if (peerPubKeys.length !== posList.length) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeys.length);\r\n    for (const p of peerPubKeys) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const n of posList) {\r\n        struct.add(n);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('unVoteForPeer', params, contractAddress,\r\n         gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Withdraw the unvote TST\r\n * Need two signatures if userAddr and payer are not the same\r\n * @param userAddr\r\n * @param peerPubKeys\r\n * @param withdrawList\r\n */\r\nexport function makeWithdrawTx(\r\n    userAddr: Address,\r\n    peerPubKeys: string[],\r\n    withdrawList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    if (peerPubKeys.length !== withdrawList.length) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeys.length);\r\n    for (const p of peerPubKeys) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(withdrawList.length);\r\n    for (const w of withdrawList) {\r\n        struct.add(w);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('withdraw', params, contractAddress,\r\n        gasPrice, gasLimit, payer);\r\n}\r\n\r\n/** Quit node register\r\n * Need two signatures if userAddr and payer are not the same\r\n */\r\nexport function makeQuitNodeTx(\r\n    userAddr: Address,\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('quitNode', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Peer change the status of authorization\r\n * @param peerPubKey Peer's public key\r\n * @param userAddr User's address\r\n * @param maxAuthorize Allowed max amount of stake authorization\r\n * @param payer Payer of the transaction fee\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeChangeAuthorizationTx(\r\n    peerPubKey: string,\r\n    userAddr: Address,\r\n    maxAuthorize: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), maxAuthorize);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('changeMaxAuthorization', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Update allocation proportion of peer\r\n * @param peerPubKey\r\n * @param userAddr\r\n * @param peerCost\r\n * @param payer\r\n * @param gasPrice\r\n * @param gasLimit\r\n */\r\nexport function makeSetPeerCostTx(\r\n    peerPubKey: string,\r\n    userAddr: Address,\r\n    peerCost: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), peerCost);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('setPeerCost', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Withdraw fee to user's address\r\n * @param userAddr User's address\r\n * @param payer\r\n * @param gasPrice\r\n * @param gasLimit\r\n */\r\nexport function makeWithdrawFeeTx(\r\n    userAddr: Address,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('withdrawFee', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * User authorize some peers\r\n * @param userAddr\r\n * @param peerPubKeyList\r\n * @param posList\r\n * @param payer\r\n * @param gasPrice\r\n * @param gasLimit\r\n */\r\nexport function makeAuthorizeForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeyList: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeyList.length);\r\n    for (const p of peerPubKeyList) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const w of posList) {\r\n        struct.add(w);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('authorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * User cancels the authorization of peer\r\n */\r\nexport function makeUnauthorizeForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeyList: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeyList.length);\r\n    for (const p of peerPubKeyList) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const w of posList) {\r\n        struct.add(w);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('unAuthorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Peer add the init pos\r\n * @param peerPubkey Peer's public key\r\n * @param userAddr Stake twallet address\r\n * @param pos Amount of pos to add\r\n * @param payer Payer of the transaction\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeAddInitPosTx(\r\n    peerPubkey: string,\r\n    userAddr: Address,\r\n    pos: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('addInitPos', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Peer reduce the init pos\r\n * @param peerPubkey Peer's public key\r\n * @param userAddr Stake twallet address\r\n * @param pos Amount of pos to reduce\r\n * @param payer Payer of the transaction\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeReduceInitPosTx(\r\n    peerPubkey: string,\r\n    userAddr: Address,\r\n    pos: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('reduceInitPos', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\nexport function makeWithdrawPeerUnboundTsgTx(\r\n    userAddr: Address,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n) {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('withdrawTsg', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * If not set ifAuthorize or cost before, query result will be empty.\r\n * @param peerPubKey\r\n * @param url\r\n */\r\nexport async function getAttributes(peerPubKey: string, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(PEER_ATTRIBUTES) + peerPubKey;\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    const result = res.Result;\r\n    if (result) {\r\n        return PeerAttributes.deserialize(new StringReader(result));\r\n    } else {\r\n        return new PeerAttributes();\r\n    }\r\n}\r\n\r\n/**\r\n * Get the reward fee of address\r\n * @param address User's address\r\n * @param url Node's restfull url\r\n */\r\nexport async function getSplitFeeAddress(address: Address, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(SPLIT_FEE_ADDRESS) + address.serialize();\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    const result = res.Result;\r\n    if (result) {\r\n        return SplitFeeAddress.deserialize(new StringReader(result));\r\n    } else {\r\n        return new SplitFeeAddress();\r\n    }\r\n}\r\n\r\n/**\r\n * Get authorization of user's address\r\n * @param peerPubKey Peer's public key\r\n * @param address User's address\r\n * @param url Node's restful url\r\n */\r\nexport async function getAuthorizeInfo(peerPubKey: string, address: Address, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(AUTHORIZE_INFO_POOL) + peerPubKey + address.serialize();\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    const result = res.Result;\r\n    if (result) {\r\n        return AuthorizeInfo.deserialize(new StringReader(result));\r\n    } else {\r\n        return new AuthorizeInfo();\r\n    }\r\n}\r\n\r\n/**\r\n * Query the governance view\r\n * @param url Url of restful api\r\n */\r\nexport async function getGovernanceView(url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr('governanceView');\r\n    const viewRes = await restClient.getStorage(codeHash, key);\r\n    const view = viewRes.Result;\r\n    const governanceView = GovernanceView.deserialize(new StringReader(view));\r\n    return governanceView;\r\n}\r\n\r\n/**\r\n * Query all the peer's state. The result is a map.\r\n * @param url Url of blockchain node\r\n */\r\nexport async function getPeerPoolMap(url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const governanceView = await getGovernanceView(url);\r\n    const key1 = str2hexstr('peerPool');\r\n    const key2 = num2hexstring(governanceView.view, 4, true);\r\n    const keyP = key1 + key2;\r\n    const res = await restClient.getStorage(codeHash, keyP);\r\n    const sr = new StringReader(res.Result);\r\n    const length = sr.readInt();\r\n    const result: any = {};\r\n    for (let i = 0; i < length; i++) {\r\n        const p = PeerPoolItem.deserialize(sr);\r\n        result[p.peerPubkey] = p;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport async function getGlobalParam(url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(GLOBAL_PARAM);\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    if (res.Result) {\r\n        return GlobalParam.deserialize(new StringReader(res.Result));\r\n    } else {\r\n        return new GlobalParam();\r\n    }\r\n\r\n}\r\n\r\nexport async function getTotalStake(userAddr: Address, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(TOTAL_STAKE) + userAddr.serialize();\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    if (res.Result) {\r\n        return TotalStake.deserialize(new StringReader(res.Result));\r\n    } else {\r\n        return new TotalStake();\r\n    }\r\n}\r\n\r\nexport async function getPeerUnboundTsg(userAddr: Address, url?: string) {\r\n    const totalStake = await getTotalStake(userAddr, url);\r\n    if (!totalStake.address) {\r\n        return 0;\r\n    }\r\n    const restClient = new RestClient(url);\r\n    const blockHeight = (await restClient.getBlockHeight()).Result;\r\n    const block = (await restClient.getBlockJson(blockHeight)).Result;\r\n    const timeStamp = block.Header.Timestamp - GENESIS_BLOCK_TIMESTAMP;\r\n    return calcUnboundTsg(totalStake.stake, totalStake.timeOffset, timeStamp);\r\n}\r\n\r\nexport async function getConfiguration(url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(VBFT_CONFIG);\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    if (res.Result) {\r\n        return Configuration.deserialize(new StringReader(res.Result));\r\n    } else {\r\n        return new Configuration();\r\n    }\r\n}\r\n\r\n/**\r\n * Use to store governance state.\r\n */\r\nexport class GovernanceView {\r\n    static deserialize(sr: StringReader): GovernanceView {\r\n        const g = new GovernanceView();\r\n        g.view = sr.readUint32();\r\n        g.height = sr.readUint32();\r\n        g.txhash = sr.read(64); // uint256\r\n        return g;\r\n    }\r\n    view: number = 0;\r\n    height: number = 0;\r\n    txhash: string = '';\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.view, 4, true);\r\n        result += num2hexstring(this.height, 4, true);\r\n        result += hex2VarBytes(this.txhash);\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Describs the peer's state in the pool.\r\n */\r\nexport class PeerPoolItem {\r\n    static deserialize(sr: StringReader): PeerPoolItem {\r\n        const p = new PeerPoolItem();\r\n        p.index = sr.readInt();\r\n        p.peerPubkey = hexstr2str(sr.readNextBytes());\r\n        p.address = Address.deserialize(sr);\r\n        p.status = parseInt(sr.read(1), 16);\r\n        p.initPos = sr.readLong();\r\n        p.totalPos = sr.readLong();\r\n        return p;\r\n    }\r\n\r\n    index: number = 0;\r\n    peerPubkey: string = '';\r\n    address: Address;\r\n    status: number = 0;\r\n    initPos: number = 0;\r\n    totalPos: number = 0;\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.index, 4, true);\r\n        result += str2VarBytes(this.peerPubkey);\r\n        result += this.address.serialize();\r\n        result += num2hexstring(this.status);\r\n        result += num2hexstring(this.initPos, 8, true);\r\n        result += num2hexstring(this.totalPos, 8, true);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class PeerAttributes {\r\n    static deserialize(sr: StringReader): PeerAttributes {\r\n        const pr = new PeerAttributes();\r\n        pr.peerPubkey = hexstr2str(sr.readNextBytes());\r\n\r\n        pr.maxAuthorize = sr.readLong();\r\n\r\n        pr.t2PeerCost = sr.readLong();\r\n        pr.t1PeerCost = sr.readLong();\r\n        pr.tPeerCost = sr.readLong();\r\n\r\n        if (sr.isEmpty) {\r\n            return pr;\r\n        }\r\n        pr.field1 = sr.readNextBytes();\r\n        pr.field2 = sr.readNextBytes();\r\n        pr.field3 = sr.readNextBytes();\r\n        pr.field4 = sr.readNextBytes();\r\n\r\n        return pr;\r\n    }\r\n    peerPubkey: string = '';\r\n    maxAuthorize: number = 0;\r\n    t2PeerCost: number = 100; // peer cost, active in view T + 2\r\n    t1PeerCost: number = 100; // peer cost, active in view T + 1\r\n    tPeerCost: number = 0; // peer cost, active in view T\r\n    field1: string = '';\r\n    field2: string = '';\r\n    field3: string = '';\r\n    field4: string = '';\r\n\r\n    serialize(): string {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport class SplitFeeAddress {\r\n    static deserialize(sr: StringReader) {\r\n        const sfa = new SplitFeeAddress();\r\n        sfa.address = Address.deserialize(sr);\r\n        sfa.amount = sr.readLong();\r\n        return sfa;\r\n    }\r\n\r\n    address: Address;\r\n    amount: number = 0;\r\n}\r\n\r\nexport class AuthorizeInfo {\r\n    static deserialize(sr: StringReader) {\r\n        const ai = new AuthorizeInfo();\r\n        ai.peerPubkey = hexstr2str(sr.readNextBytes());\r\n        ai.address = Address.deserialize(sr);\r\n        ai.consensusPos = sr.readLong();\r\n        ai.freezePos = sr.readLong();\r\n        ai.newPos = sr.readLong();\r\n        ai.withdrawPos = sr.readLong();\r\n        ai.withdrawFreezePos = sr.readLong();\r\n        ai.withdrawUnfreezePos = sr.readLong();\r\n        return ai;\r\n    }\r\n\r\n    peerPubkey: string = '';\r\n    address: Address;\r\n    consensusPos: number = 0;\r\n    freezePos: number = 0;\r\n    newPos: number = 0;\r\n    withdrawPos: number = 0;\r\n    withdrawFreezePos: number = 0;\r\n    withdrawUnfreezePos: number = 0;\r\n}\r\n\r\nexport class GlobalParam {\r\n    static deserialize(sr: StringReader) {\r\n        const gp = new GlobalParam();\r\n        const feeHexStr = sr.readNextBytes();\r\n        const candidateFeeStr = BigInt.fromHexstr(feeHexStr).value;\r\n        gp.candidateFee = Number(candidateFeeStr);\r\n        const minStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        gp.minInitState = Number(minStr);\r\n        const candidateNumStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const candidateNum = Number(candidateNumStr);\r\n        gp.candidateNum = candidateNum;\r\n        const posLimitStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        gp.posLimit = Number(posLimitStr);\r\n        const aStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const a = Number(aStr);\r\n        const bStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const b = Number(bStr);\r\n        const yStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const yita = Number(yStr);\r\n        const pStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const penalty = Number(pStr);\r\n        gp.A = a;\r\n        gp.B = b;\r\n        gp.yita = yita;\r\n        gp.penalty = penalty;\r\n        return gp;\r\n    }\r\n\r\n    candidateFee: number;\r\n    candidateNum: number;\r\n    minInitState: number;\r\n    posLimit: number;\r\n    A: number;\r\n    B: number;\r\n    yita: number;\r\n    penalty: number;\r\n}\r\n\r\nexport class TotalStake {\r\n    static deserialize(sr: StringReader): TotalStake {\r\n        const ts = new TotalStake();\r\n        ts.address = Address.deserialize(sr);\r\n        ts.stake = sr.readLong();\r\n        ts.timeOffset = sr.readUint32();\r\n        return ts;\r\n    }\r\n    address: Address;\r\n    stake: number;\r\n    timeOffset: number;\r\n}\r\n\r\nexport class Configuration {\r\n\r\n    static deserialize(sr: StringReader): Configuration {\r\n        const config = new Configuration();\r\n        config.N = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.C = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.K = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.L = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.BlockMsgDelay = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.HashMsgDelay = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.PeerHandShakeTimeout = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.MaxBlockChangeView = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        return config;\r\n    }\r\n    N: number;\r\n    C: number;\r\n    K: number;\r\n    L: number;\r\n    BlockMsgDelay: number;\r\n    HashMsgDelay: number;\r\n    PeerHandShakeTimeout: number;\r\n    MaxBlockChangeView: number;\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { BigNumber } from 'bignumber.js';\r\nimport BigInt from '../../common/bigInt';\r\nimport { Address } from '../../crypto/address';\r\nimport { ERROR_CODE } from '../../error';\r\nimport { hex2VarBytes, hexstr2str, num2hexstring, str2VarBytes, StringReader } from '../../utils';\r\n\r\nexport class Transfers {\r\n    static deserialize(sr: StringReader) {\r\n        const t = new Transfers();\r\n        // const version = sr.read(1);\r\n        // t.version = version;\r\n        const states = [];\r\n        const stateLen = sr.readNextLen();\r\n        for (let i = 0; i < stateLen; i++) {\r\n            const state = State.deserialize(sr);\r\n            states.push(state);\r\n        }\r\n        t.states = states;\r\n        return t;\r\n    }\r\n\r\n    // byte\r\n    // version : string\r\n    states: State[] = [];\r\n\r\n    constructor() {\r\n        // this.version = '00';\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        // result += this.version\r\n        result += num2hexstring(this.states.length);\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < this.states.length; i++) {\r\n            result += this.states[i].serialize();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class TokenTransfer {\r\n    static deserialize(sr: StringReader) {\r\n        const tf = new TokenTransfer();\r\n        tf.states = [];\r\n        const contract = sr.read(20);\r\n        tf.contract = contract;\r\n\r\n        const len = sr.readNextLen();\r\n        for (let i = 0; i < len; i++) {\r\n            const state = State.deserialize(sr);\r\n            tf.states.push(state);\r\n        }\r\n        return tf;\r\n    }\r\n\r\n    // 20 bytes\r\n    contract: string;\r\n    states: State[];\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.contract;\r\n        const len = num2hexstring(this.states.length);\r\n        result += len;\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0 ; i < this.states.length; i++) {\r\n            result += this.states[i].serialize();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class State {\r\n    static deserialize(sr: StringReader) {\r\n        // const version = sr.read(1);\r\n        const from = new Address(sr.readNextBytes());\r\n        const to   = new Address(sr.readNextBytes());\r\n        // const value = (new BigNumber(sr.readNextBytes(), 16)).toString();\r\n        // const value = sr.read(8);\r\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n\r\n        return new State(from, to, value.toString());\r\n    }\r\n\r\n    // byte\r\n    // version : string\r\n    // 20 bytes address\r\n    from: Address;\r\n    to: Address;\r\n    value: string | number;\r\n\r\n    constructor(from: Address, to: Address, value: string | number) {\r\n        const bi = new BigNumber(value);\r\n        if (!bi.isInteger() || bi.isNegative()) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        this.from = from;\r\n        this.to = to;\r\n        this.value = value;\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        // result += this.version\r\n        result += hex2VarBytes(this.from.serialize());\r\n        result += hex2VarBytes(this.to.serialize());\r\n        const bi = new BigInt(this.value).toHexstr();\r\n        result += hex2VarBytes(bi);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class Contract {\r\n    static deserialize(sr: StringReader) {\r\n        const c = new Contract();\r\n        const version = sr.read(1);\r\n        const address = Address.deserialize(sr);\r\n        const method = sr.readNextBytes();\r\n        const args = sr.readNextBytes();\r\n        c.version = version;\r\n        c.address = address;\r\n        c.method = hexstr2str(method);\r\n        c.args = args;\r\n        return c;\r\n    }\r\n\r\n    // byte\r\n    version: string;\r\n\r\n    // 20 bytes\r\n    address: Address;\r\n\r\n    method: string;\r\n\r\n    // byte\r\n    args: string;\r\n\r\n    constructor() {\r\n        this.version = '00';\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.version;\r\n\r\n        result += this.address.serialize();\r\n\r\n        result += str2VarBytes(this.method);\r\n\r\n        result += hex2VarBytes(this.args);\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class TransferFrom {\r\n    static deserialize(sr: StringReader): TransferFrom {\r\n        // const version = sr.read(1);\r\n        const sender = new Address(sr.readNextBytes());\r\n        const from = new Address(sr.readNextBytes());\r\n        const to = new Address(sr.readNextBytes());\r\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const tf = new TransferFrom(sender, from, to, value.toString());\r\n        return tf;\r\n    }\r\n\r\n    // version : string = '00'\r\n\r\n    sender: Address;\r\n\r\n    from: Address;\r\n\r\n    to: Address;\r\n\r\n    value: string;\r\n\r\n    constructor(sender: Address, from: Address, to: Address, value: string) {\r\n        const bi = new BigNumber(value);\r\n        if (!bi.isInteger() || !bi.isNegative()) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        this.sender = sender;\r\n        this.from = from;\r\n        this.to = to;\r\n        this.value = value;\r\n    }\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        // result += this.version\r\n        result += hex2VarBytes(this.sender.serialize());\r\n        result += hex2VarBytes(this.from.serialize());\r\n        result += hex2VarBytes(this.to.serialize());\r\n        const biHex = new BigInt(this.value).toHexstr();\r\n        result += hex2VarBytes(biHex);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2019-2020 The TesraSupernet Authors\r\n* This file is part of The TesraSupernet library.\r\n*\r\n* The TesraSupernet is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The TesraSupernet is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { str2hexstr } from '../../utils';\r\nimport { Address } from './../../crypto/address';\r\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\r\nimport { Parameter, ParameterType } from './../abi/parameter';\r\n\r\nexport class Oep5Param {\r\n    public toAcct: string; // hex string\r\n    public tokenId: string; // hex string\r\n\r\n    public constructor(toAcct: Address, tokenId: string ) {\r\n        this.toAcct = toAcct.serialize();\r\n        this.tokenId = tokenId;\r\n    }\r\n}\r\n\r\nconst FunctionNames = {\r\n    Init: 'init',\r\n    Name: 'name',\r\n    Symbol: 'symbol',\r\n    TotalSupply: 'totalSupply',\r\n    BalanceOf: 'balanceOf',\r\n    OwnerOf: 'ownerOf',\r\n    Transfer: 'transfer',\r\n    TransferMulti: 'transferMulti',\r\n    Approve: 'approve',\r\n    ApproveMulti: 'approveMulti',\r\n    TakeOwnership: 'takeOwnership',\r\n    QueryTokenIDByIndex: 'queryTokenIDByIndex',\r\n    QueryTokenByID: 'queryTokenByID',\r\n    GetApproved: 'getApproved',\r\n    CreateMultiTokens: 'createMultiTokens',\r\n    CreateOneToken: 'createOneToken'\r\n};\r\n\r\nexport class Oep5TxBuilder {\r\n    contractAddr: Address;\r\n\r\n    constructor(contractAddr: Address) {\r\n        this.contractAddr = contractAddr;\r\n    }\r\n\r\n    makeInitTx(\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Init;\r\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeOwnerOfTx(\r\n        tokenId: string\r\n    ): Transaction {\r\n        const func = FunctionNames.OwnerOf;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Transfer the control to someone else\r\n     * @param oep5Param\r\n     * @param gasPrice\r\n     * @param gasLimit\r\n     * @param payer\r\n     */\r\n    makeTransferTx(\r\n        oep5Param: Oep5Param,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Transfer;\r\n        const params = [\r\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\r\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Transfer the control to multi people\r\n     */\r\n    makeTransferMultiTx(\r\n        oep5Params: Oep5Param[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const list = [];\r\n        list.push(str2hexstr(FunctionNames.TransferMulti));\r\n        const temp = [];\r\n        for (const param of oep5Params) {\r\n            temp.push([\r\n                param.toAcct,\r\n                param.tokenId\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Approve the token to toAcct address, it can overwrite older approved address\r\n     * @param oep5Param\r\n     * @param gasPrice\r\n     * @param gasLimit\r\n     * @param payer\r\n     */\r\n    makeApproveTx(\r\n        oep5Param: Oep5Param,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Approve;\r\n        const params = [\r\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\r\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Take the approved token.\r\n     * @param oep5Param\r\n     * @param gasPrice\r\n     * @param gasLimit\r\n     * @param payer\r\n     */\r\n    makeTakeOwnershipTx(\r\n        oep5Param: Oep5Param,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TakeOwnership;\r\n        const params = [\r\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\r\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeQueryBalanceOfTx(\r\n        addr: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.BalanceOf;\r\n        const params = [\r\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize())\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTotalSupplyTx(): Transaction {\r\n        const func = FunctionNames.TotalSupply;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n    makeQueryTokenIDByIndexTx(\r\n        index: number\r\n    ): Transaction {\r\n        const func = FunctionNames.QueryTokenIDByIndex;\r\n        const params = [\r\n            new Parameter('index', ParameterType.Long, index)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTokenByIDTx(\r\n        tokenId: string\r\n    ): Transaction {\r\n        const func = FunctionNames.QueryTokenByID;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeGetApprovedTx(\r\n        tokenId: string\r\n    ): Transaction {\r\n        const func = FunctionNames.GetApproved;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryNameTx(): Transaction {\r\n        const func = FunctionNames.Name;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n    makeQuerySymbolTx(): Transaction {\r\n        const func = FunctionNames.Symbol;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2019-2020 The TesraSupernet Authors\r\n * This file is part of The TesraSupernet library.\r\n *\r\n * The TesraSupernet is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The TesraSupernet is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Account } from './account';\r\nimport { Claim } from './claim';\r\nimport * as CONST from './consts';\r\nimport * as Crypto from './crypto';\r\nimport * as Html5Websocket from './html5-websocket';\r\nimport { Identity } from './identity';\r\nimport * as NeoCore from './neocore';\r\nimport RestClient from './network/rest/restClient';\r\nimport RpcClient from './network/rpc/rpcClient';\r\nimport { WebsocketClient } from './network/websocket/websocketClient';\r\nimport * as scrypt from './scrypt';\r\nimport { SDK } from './sdk/index';\r\nimport AbiFunction from './smartcontract/abi/abiFunction';\r\nimport AbiInfo from './smartcontract/abi/abiInfo';\r\nimport { Parameter, ParameterType } from './smartcontract/abi/parameter';\r\nimport Struct from './smartcontract/abi/struct';\r\nimport * as GovernanceTxBuilder from './smartcontract/nativevm/governanceContractTxBuilder';\r\nimport * as Token from './smartcontract/nativevm/token';\r\nimport * as TstAssetTxBuilder from './smartcontract/nativevm/tstAssetTxBuilder';\r\nimport * as TstidContract from './smartcontract/nativevm/tstidContractTxBuilder';\r\nimport * as Oep4 from './smartcontract/neovm/oep4TxBuilder';\r\nimport * as Oep5 from './smartcontract/neovm/oep5TxBuilder';\r\nimport * as Oep8 from './smartcontract/neovm/oep8TxBuilder';\r\nimport { DDO, DDOAttribute } from './transaction/ddo';\r\nimport * as ScriptBuilder from './transaction/scriptBuilder';\r\nimport { Transaction } from './transaction/transaction';\r\nimport * as TransactionBuilder from './transaction/transactionBuilder';\r\nimport { Transfer } from './transaction/transfer';\r\nimport { TxSignature } from './transaction/txSignature';\r\nimport { TWallet } from './twallet';\r\nimport * as utils from './utils';\r\n\r\nclass TST {\r\n    Account: any;\r\n    Identity: any;\r\n    Claim: any;\r\n    DDO: any;\r\n    DDOAttribute: any;\r\n    Transaction: any;\r\n    Transfer: any;\r\n    TxSignature: any;\r\n    TransactionBuilder: any;\r\n    TstAssetTxBuilder: any;\r\n    Parameter: any;\r\n    ParameterType: any;\r\n    AbiFunction: any;\r\n    AbiInfo: any;\r\n    utils: any;\r\n    scrypt: any;\r\n    CONST: any;\r\n    TWallet: any;\r\n    SDK: any;\r\n    Token: any;\r\n    TstidContract: any;\r\n    GovernanceTxBuilder: any;\r\n    RestClient: any;\r\n    RpcClient: any;\r\n    WebsocketClient: any;\r\n    Crypto: any;\r\n    Struct: any;\r\n    ScriptBuilder: any;\r\n    NeoCore: any;\r\n    Oep4: any;\r\n    Oep8: any;\r\n    Oep5: any;\r\n\r\n    constructor() {\r\n        this.Account = Account;\r\n        this.Identity = Identity;\r\n        this.Claim = Claim;\r\n        this.DDO = DDO;\r\n        this.DDOAttribute = DDOAttribute;\r\n        this.Transaction = Transaction;\r\n        this.Transfer = Transfer;\r\n        this.TxSignature = TxSignature;\r\n        this.TransactionBuilder = TransactionBuilder;\r\n        this.TstAssetTxBuilder = TstAssetTxBuilder;\r\n        this.GovernanceTxBuilder = GovernanceTxBuilder;\r\n        this.Parameter = Parameter;\r\n        this.ParameterType = ParameterType;\r\n        this.AbiFunction = AbiFunction;\r\n        this.AbiInfo = AbiInfo;\r\n        this.utils = utils;\r\n        this.scrypt = scrypt;\r\n        this.CONST = CONST;\r\n        this.TWallet = TWallet;\r\n        this.SDK = SDK;\r\n        this.Token = Token;\r\n        this.TstidContract = TstidContract;\r\n        this.RestClient = RestClient;\r\n        this.RpcClient = RpcClient;\r\n        this.WebsocketClient = WebsocketClient;\r\n        this.Crypto = Crypto;\r\n        this.Struct = Struct;\r\n        this.ScriptBuilder = ScriptBuilder;\r\n        this.NeoCore = NeoCore;\r\n        this.Oep4 = Oep4;\r\n        this.Oep8 = Oep8;\r\n        this.Oep5 = Oep5;\r\n    }\r\n    setNode(url: string) {\r\n        this.CONST.TEST_NODE = url;\r\n    }\r\n\r\n    setRpcPort(port: string) {\r\n        this.CONST.HTTP_JSON_PORT = port;\r\n    }\r\n\r\n    setRestPort(port: string) {\r\n        this.CONST.HTTP_REST_PORT = port;\r\n    }\r\n\r\n    setSocketPort(port: string) {\r\n        this.CONST.HTTP_WS_PORT = port;\r\n    }\r\n}\r\n\r\nexport default TST;\r\n\r\nexport {\r\n    Account,\r\n    Identity,\r\n    Claim,\r\n    DDO,\r\n    DDOAttribute,\r\n    Transaction,\r\n    Transfer,\r\n    TxSignature,\r\n    Parameter,\r\n    ParameterType,\r\n    AbiFunction,\r\n    AbiInfo,\r\n    TransactionBuilder,\r\n    TstAssetTxBuilder,\r\n    GovernanceTxBuilder,\r\n    utils,\r\n    scrypt,\r\n    CONST,\r\n    TWallet,\r\n    SDK,\r\n    Token,\r\n    TstidContract,\r\n    RestClient,\r\n    RpcClient,\r\n    WebsocketClient,\r\n    Crypto,\r\n    Struct,\r\n    ScriptBuilder,\r\n    NeoCore,\r\n    Oep4,\r\n    Oep8,\r\n    Oep5,\r\n    Html5Websocket\r\n};\r\n"],"sourceRoot":""}